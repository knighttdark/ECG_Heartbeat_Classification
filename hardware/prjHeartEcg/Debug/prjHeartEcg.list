
prjHeartEcg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e58  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08003fe0  08003fe0  00004fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004308  08004308  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004310  08004310  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004318  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000268  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20000274  20000274  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a1b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a14  00000000  00000000  0000fa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00011470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c5  00000000  00000000  00011a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002181f  00000000  00000000  00011e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078da  00000000  00000000  0003366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d218d  00000000  00000000  0003af46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b1  00000000  00000000  0010d0d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000192c  00000000  00000000  0010d184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0010eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002de5  00000000  00000000  0010eb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000f0  00000000  00000000  001118f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fc8 	.word	0x08003fc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003fc8 	.word	0x08003fc8

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_uldivmod>:
 8000b84:	b953      	cbnz	r3, 8000b9c <__aeabi_uldivmod+0x18>
 8000b86:	b94a      	cbnz	r2, 8000b9c <__aeabi_uldivmod+0x18>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	2800      	cmpeq	r0, #0
 8000b8e:	bf1c      	itt	ne
 8000b90:	f04f 31ff 	movne.w	r1, #4294967295
 8000b94:	f04f 30ff 	movne.w	r0, #4294967295
 8000b98:	f000 b96a 	b.w	8000e70 <__aeabi_idiv0>
 8000b9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba4:	f000 f806 	bl	8000bb4 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4770      	bx	lr

08000bb4 <__udivmoddi4>:
 8000bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb8:	9d08      	ldr	r5, [sp, #32]
 8000bba:	460c      	mov	r4, r1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d14e      	bne.n	8000c5e <__udivmoddi4+0xaa>
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	458c      	cmp	ip, r1
 8000bc4:	4686      	mov	lr, r0
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	d962      	bls.n	8000c92 <__udivmoddi4+0xde>
 8000bcc:	b14a      	cbz	r2, 8000be2 <__udivmoddi4+0x2e>
 8000bce:	f1c2 0320 	rsb	r3, r2, #32
 8000bd2:	4091      	lsls	r1, r2
 8000bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bdc:	4319      	orrs	r1, r3
 8000bde:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be6:	fa1f f68c 	uxth.w	r6, ip
 8000bea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb04 f106 	mul.w	r1, r4, r6
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x64>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0a:	f080 8112 	bcs.w	8000e32 <__udivmoddi4+0x27e>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 810f 	bls.w	8000e32 <__udivmoddi4+0x27e>
 8000c14:	3c02      	subs	r4, #2
 8000c16:	4463      	add	r3, ip
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c22:	fb07 1110 	mls	r1, r7, r0, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb00 f606 	mul.w	r6, r0, r6
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x94>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3a:	f080 80fc 	bcs.w	8000e36 <__udivmoddi4+0x282>
 8000c3e:	429e      	cmp	r6, r3
 8000c40:	f240 80f9 	bls.w	8000e36 <__udivmoddi4+0x282>
 8000c44:	4463      	add	r3, ip
 8000c46:	3802      	subs	r0, #2
 8000c48:	1b9b      	subs	r3, r3, r6
 8000c4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c4e:	2100      	movs	r1, #0
 8000c50:	b11d      	cbz	r5, 8000c5a <__udivmoddi4+0xa6>
 8000c52:	40d3      	lsrs	r3, r2
 8000c54:	2200      	movs	r2, #0
 8000c56:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d905      	bls.n	8000c6e <__udivmoddi4+0xba>
 8000c62:	b10d      	cbz	r5, 8000c68 <__udivmoddi4+0xb4>
 8000c64:	e9c5 0100 	strd	r0, r1, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	e7f5      	b.n	8000c5a <__udivmoddi4+0xa6>
 8000c6e:	fab3 f183 	clz	r1, r3
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d146      	bne.n	8000d04 <__udivmoddi4+0x150>
 8000c76:	42a3      	cmp	r3, r4
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xcc>
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	f0c0 80f0 	bcc.w	8000e60 <__udivmoddi4+0x2ac>
 8000c80:	1a86      	subs	r6, r0, r2
 8000c82:	eb64 0303 	sbc.w	r3, r4, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d0e6      	beq.n	8000c5a <__udivmoddi4+0xa6>
 8000c8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c90:	e7e3      	b.n	8000c5a <__udivmoddi4+0xa6>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x204>
 8000c98:	eba1 040c 	sub.w	r4, r1, ip
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa1f f78c 	uxth.w	r7, ip
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000caa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cae:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb07 f006 	mul.w	r0, r7, r6
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x11c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x11a>
 8000cc8:	4298      	cmp	r0, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2b4>
 8000cce:	4626      	mov	r6, r4
 8000cd0:	1a1c      	subs	r4, r3, r0
 8000cd2:	fa1f f38e 	uxth.w	r3, lr
 8000cd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cda:	fb08 4410 	mls	r4, r8, r0, r4
 8000cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce2:	fb00 f707 	mul.w	r7, r0, r7
 8000ce6:	429f      	cmp	r7, r3
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x148>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x146>
 8000cf4:	429f      	cmp	r7, r3
 8000cf6:	f200 80b0 	bhi.w	8000e5a <__udivmoddi4+0x2a6>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	1bdb      	subs	r3, r3, r7
 8000cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0x9c>
 8000d04:	f1c1 0620 	rsb	r6, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d14:	fa04 f301 	lsl.w	r3, r4, r1
 8000d18:	ea43 030c 	orr.w	r3, r3, ip
 8000d1c:	40f4      	lsrs	r4, r6
 8000d1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d22:	0c38      	lsrs	r0, r7, #16
 8000d24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d28:	fbb4 fef0 	udiv	lr, r4, r0
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fb00 441e 	mls	r4, r0, lr, r4
 8000d34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d38:	fb0e f90c 	mul.w	r9, lr, ip
 8000d3c:	45a1      	cmp	r9, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x1a6>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4a:	f080 8084 	bcs.w	8000e56 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8081 	bls.w	8000e56 <__udivmoddi4+0x2a2>
 8000d54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	eba4 0409 	sub.w	r4, r4, r9
 8000d5e:	fa1f f983 	uxth.w	r9, r3
 8000d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d66:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x1d2>
 8000d76:	193c      	adds	r4, r7, r4
 8000d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d7c:	d267      	bcs.n	8000e4e <__udivmoddi4+0x29a>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d965      	bls.n	8000e4e <__udivmoddi4+0x29a>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	429c      	cmp	r4, r3
 8000d94:	46ce      	mov	lr, r9
 8000d96:	469c      	mov	ip, r3
 8000d98:	d351      	bcc.n	8000e3e <__udivmoddi4+0x28a>
 8000d9a:	d04e      	beq.n	8000e3a <__udivmoddi4+0x286>
 8000d9c:	b155      	cbz	r5, 8000db4 <__udivmoddi4+0x200>
 8000d9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000da2:	eb64 040c 	sbc.w	r4, r4, ip
 8000da6:	fa04 f606 	lsl.w	r6, r4, r6
 8000daa:	40cb      	lsrs	r3, r1
 8000dac:	431e      	orrs	r6, r3
 8000dae:	40cc      	lsrs	r4, r1
 8000db0:	e9c5 6400 	strd	r6, r4, [r5]
 8000db4:	2100      	movs	r1, #0
 8000db6:	e750      	b.n	8000c5a <__udivmoddi4+0xa6>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	430c      	orrs	r4, r1
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3110 	mls	r1, r8, r0, r3
 8000de0:	0c23      	lsrs	r3, r4, #16
 8000de2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de6:	fb00 f107 	mul.w	r1, r0, r7
 8000dea:	4299      	cmp	r1, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x24c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df6:	d22c      	bcs.n	8000e52 <__udivmoddi4+0x29e>
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d92a      	bls.n	8000e52 <__udivmoddi4+0x29e>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e08:	fb08 3311 	mls	r3, r8, r1, r3
 8000e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e10:	fb01 f307 	mul.w	r3, r1, r7
 8000e14:	42a3      	cmp	r3, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x276>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e20:	d213      	bcs.n	8000e4a <__udivmoddi4+0x296>
 8000e22:	42a3      	cmp	r3, r4
 8000e24:	d911      	bls.n	8000e4a <__udivmoddi4+0x296>
 8000e26:	3902      	subs	r1, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	1ae4      	subs	r4, r4, r3
 8000e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e30:	e739      	b.n	8000ca6 <__udivmoddi4+0xf2>
 8000e32:	4604      	mov	r4, r0
 8000e34:	e6f0      	b.n	8000c18 <__udivmoddi4+0x64>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e706      	b.n	8000c48 <__udivmoddi4+0x94>
 8000e3a:	45c8      	cmp	r8, r9
 8000e3c:	d2ae      	bcs.n	8000d9c <__udivmoddi4+0x1e8>
 8000e3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7a8      	b.n	8000d9c <__udivmoddi4+0x1e8>
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	e7ed      	b.n	8000e2a <__udivmoddi4+0x276>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	e799      	b.n	8000d86 <__udivmoddi4+0x1d2>
 8000e52:	4630      	mov	r0, r6
 8000e54:	e7d4      	b.n	8000e00 <__udivmoddi4+0x24c>
 8000e56:	46d6      	mov	lr, sl
 8000e58:	e77f      	b.n	8000d5a <__udivmoddi4+0x1a6>
 8000e5a:	4463      	add	r3, ip
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	e74d      	b.n	8000cfc <__udivmoddi4+0x148>
 8000e60:	4606      	mov	r6, r0
 8000e62:	4623      	mov	r3, r4
 8000e64:	4608      	mov	r0, r1
 8000e66:	e70f      	b.n	8000c88 <__udivmoddi4+0xd4>
 8000e68:	3e02      	subs	r6, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	e730      	b.n	8000cd0 <__udivmoddi4+0x11c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fa41 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f88b 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f945 	bl	8001114 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e8a:	f000 f8f1 	bl	8001070 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //AI_Init();
  uint8_t freqBin=1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
	  ecg_raw = HAL_ADC_GetValue(&hadc1);
	  printf("ECG raw value: %d\r\n", ecg_raw);
	  float ecg_norm = ecg_raw / 4095.0f;
	  HAL_Delay(1000);
	   */
	  for (int i = 0; i < FFT_SIZE; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	e058      	b.n	8000f4a <main+0xd2>
	  {
	      inputSignal[i] = round(32767 * sin(2.0 * M_PI * freqBin * i / FFT_SIZE));
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fb46 	bl	800052c <__aeabi_i2d>
 8000ea0:	a33c      	add	r3, pc, #240	@ (adr r3, 8000f94 <main+0x11c>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fbab 	bl	8000600 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4614      	mov	r4, r2
 8000eb0:	461d      	mov	r5, r3
 8000eb2:	6838      	ldr	r0, [r7, #0]
 8000eb4:	f7ff fb3a 	bl	800052c <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f7ff fb9e 	bl	8000600 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <main+0x108>)
 8000ed2:	f7ff fcbf 	bl	8000854 <__aeabi_ddiv>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	ec43 2b17 	vmov	d7, r2, r3
 8000ede:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee2:	eef0 0a67 	vmov.f32	s1, s15
 8000ee6:	f001 fff7 	bl	8002ed8 <sin>
 8000eea:	ec51 0b10 	vmov	r0, r1, d0
 8000eee:	a322      	add	r3, pc, #136	@ (adr r3, 8000f78 <main+0x100>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fb84 	bl	8000600 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	ec43 2b17 	vmov	d7, r2, r3
 8000f00:	eeb0 0a47 	vmov.f32	s0, s14
 8000f04:	eef0 0a67 	vmov.f32	s1, s15
 8000f08:	f002 f83a 	bl	8002f80 <round>
 8000f0c:	ec53 2b10 	vmov	r2, r3, d0
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fe0e 	bl	8000b34 <__aeabi_d2iz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b219      	sxth	r1, r3
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <main+0x10c>)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	      complexSpectrum[i * 2 + 0] = inputSignal[i];
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4916      	ldr	r1, [pc, #88]	@ (8000f84 <main+0x10c>)
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000f30:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <main+0x110>)
 8000f32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      complexSpectrum[i * 2 + 1] = 0;  // keep it zero for now
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <main+0x110>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int i = 0; i < FFT_SIZE; i++)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f4e:	dda3      	ble.n	8000e98 <main+0x20>
	  }

	  // generate sine for next frequency bin in next iteration
	  freqBin++;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3301      	adds	r3, #1
 8000f54:	71fb      	strb	r3, [r7, #7]
	  if (freqBin >= FFT_SIZE / 2) freqBin = 1;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b1f      	cmp	r3, #31
 8000f5a:	d901      	bls.n	8000f60 <main+0xe8>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]

	  // FFT:
	  arm_cfft_q15(&arm_cfft_sR_q15_len64, &complexSpectrum[0], 0, 1);
 8000f60:	2301      	movs	r3, #1
 8000f62:	2200      	movs	r2, #0
 8000f64:	4908      	ldr	r1, [pc, #32]	@ (8000f88 <main+0x110>)
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <main+0x114>)
 8000f68:	f001 fc0e 	bl	8002788 <arm_cfft_q15>
	  // Converting complex spectrum to amplitudes
	  arm_cmplx_mag_q15(&complexSpectrum[0], &realSpectrum[0], FFT_SIZE);
 8000f6c:	2240      	movs	r2, #64	@ 0x40
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <main+0x118>)
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <main+0x110>)
 8000f72:	f001 fec3 	bl	8002cfc <arm_cmplx_mag_q15>
	  for (int i = 0; i < FFT_SIZE; i++)
 8000f76:	e78c      	b.n	8000e92 <main+0x1a>
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40dfffc0 	.word	0x40dfffc0
 8000f80:	40500000 	.word	0x40500000
 8000f84:	20000028 	.word	0x20000028
 8000f88:	200000a8 	.word	0x200000a8
 8000f8c:	08003ff0 	.word	0x08003ff0
 8000f90:	200001a8 	.word	0x200001a8
 8000f94:	54442d18 	.word	0x54442d18
 8000f98:	401921fb 	.word	0x401921fb

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	@ 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	@ 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 ff68 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b28      	ldr	r3, [pc, #160]	@ (8001068 <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	4a27      	ldr	r2, [pc, #156]	@ (8001068 <SystemClock_Config+0xcc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	@ (800106c <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <SystemClock_Config+0xd0>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001010:	23a8      	movs	r3, #168	@ 0xa8
 8001012:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fec5 	bl	8001db0 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800102c:	f000 f88c 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2105      	movs	r1, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f001 f926 	bl	80022a0 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800105a:	f000 f875 	bl	8001148 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	@ 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <MX_ADC1_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	@ (800110c <MX_ADC1_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <MX_ADC1_Init+0x98>)
 800108a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800108e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010b2:	4a17      	ldr	r2, [pc, #92]	@ (8001110 <MX_ADC1_Init+0xa0>)
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010d2:	f000 f989 	bl	80013e8 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010dc:	f000 f834 	bl	8001148 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010e8:	2306      	movs	r3, #6
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_ADC1_Init+0x98>)
 80010f2:	f000 f9bd 	bl	8001470 <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010fc:	f000 f824 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000228 	.word	0x20000228
 800110c:	40012000 	.word	0x40012000
 8001110:	0f000001 	.word	0x0f000001

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_GPIO_Init+0x30>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <MX_GPIO_Init+0x30>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_GPIO_Init+0x30>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_ADC_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_ADC_MspInit+0x80>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <HAL_ADC_MspInit+0x80>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_ADC_MspInit+0x80>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_ADC_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <HAL_ADC_MspInit+0x80>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_ADC_MspInit+0x80>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_ADC_MspInit+0x84>)
 8001212:	f000 fc31 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012000 	.word	0x40012000
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f891 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012b4:	f7ff ffea 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	@ (80012fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f001 fdd7 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fdc9 	bl	8000e78 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	20000274 	.word	0x20000274

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fb6f 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff ff0c 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fb79 	bl	8001a5e <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 fb4f 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000270 	.word	0x20000270

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000270 	.word	0x20000270

080013e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e033      	b.n	8001466 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fecc 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800142e:	f023 0302 	bic.w	r3, r3, #2
 8001432:	f043 0202 	orr.w	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f93a 	bl	80016b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40
 8001456:	e001      	b.n	800145c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1c>
 8001488:	2302      	movs	r3, #2
 800148a:	e105      	b.n	8001698 <HAL_ADC_ConfigChannel+0x228>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d925      	bls.n	80014e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3b1e      	subs	r3, #30
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43da      	mvns	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	400a      	ands	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68d9      	ldr	r1, [r3, #12]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4403      	add	r3, r0
 80014da:	3b1e      	subs	r3, #30
 80014dc:	409a      	lsls	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	e022      	b.n	800152e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	2207      	movs	r2, #7
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	4603      	mov	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4403      	add	r3, r0
 8001524:	409a      	lsls	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b06      	cmp	r3, #6
 8001534:	d824      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b05      	subs	r3, #5
 8001548:	221f      	movs	r2, #31
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	400a      	ands	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b05      	subs	r3, #5
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
 800157e:	e04c      	b.n	800161a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d824      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3b23      	subs	r3, #35	@ 0x23
 800159a:	221f      	movs	r2, #31
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b23      	subs	r3, #35	@ 0x23
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d0:	e023      	b.n	800161a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b41      	subs	r3, #65	@ 0x41
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b41      	subs	r3, #65	@ 0x41
 800160e:	fa00 f203 	lsl.w	r2, r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161a:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <HAL_ADC_ConfigChannel+0x234>)
 800161c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <HAL_ADC_ConfigChannel+0x238>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d109      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1cc>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b12      	cmp	r3, #18
 800162e:	d105      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_ADC_ConfigChannel+0x238>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d123      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d003      	beq.n	8001656 <HAL_ADC_ConfigChannel+0x1e6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b11      	cmp	r3, #17
 8001654:	d11b      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d111      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_ADC_ConfigChannel+0x23c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <HAL_ADC_ConfigChannel+0x240>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0c9a      	lsrs	r2, r3, #18
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001680:	e002      	b.n	8001688 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3b01      	subs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40012300 	.word	0x40012300
 80016a8:	40012000 	.word	0x40012000
 80016ac:	20000000 	.word	0x20000000
 80016b0:	431bde83 	.word	0x431bde83

080016b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016bc:	4b79      	ldr	r3, [pc, #484]	@ (80018a4 <ADC_Init+0x1f0>)
 80016be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	021a      	lsls	r2, r3, #8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	4a58      	ldr	r2, [pc, #352]	@ (80018a8 <ADC_Init+0x1f4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d022      	beq.n	8001792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800175a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800177c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e00f      	b.n	80017b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0202 	bic.w	r2, r2, #2
 80017c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6899      	ldr	r1, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7e1b      	ldrb	r3, [r3, #24]
 80017cc:	005a      	lsls	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01b      	beq.n	8001818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	3b01      	subs	r3, #1
 800180c:	035a      	lsls	r2, r3, #13
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e007      	b.n	8001828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001826:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	3b01      	subs	r3, #1
 8001844:	051a      	lsls	r2, r3, #20
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800185c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800186a:	025a      	lsls	r2, r3, #9
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	029a      	lsls	r2, r3, #10
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40012300 	.word	0x40012300
 80018a8:	0f000001 	.word	0x0f000001

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff47 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5c 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e16b      	b.n	8001d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 815a 	bne.w	8001d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80b4 	beq.w	8001d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b60      	ldr	r3, [pc, #384]	@ (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a5f      	ldr	r2, [pc, #380]	@ (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d88 <HAL_GPIO_Init+0x310>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	@ (8001d8c <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a51      	ldr	r2, [pc, #324]	@ (8001d90 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a50      	ldr	r2, [pc, #320]	@ (8001d94 <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	@ (8001d98 <HAL_GPIO_Init+0x320>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	@ (8001d9c <HAL_GPIO_Init+0x324>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_GPIO_Init+0x328>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	@ (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	@ (8001da8 <HAL_GPIO_Init+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x20a>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00e      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	@ (8001d88 <HAL_GPIO_Init+0x310>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a32      	ldr	r2, [pc, #200]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b30      	ldr	r3, [pc, #192]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a27      	ldr	r2, [pc, #156]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d12:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d36:	4a1d      	ldr	r2, [pc, #116]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d60:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f ae90 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	@ 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e267      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dce:	4b88      	ldr	r3, [pc, #544]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d00c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dda:	4b85      	ldr	r3, [pc, #532]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d112      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4b82      	ldr	r3, [pc, #520]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001df2:	d10b      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d05b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x108>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d157      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e242      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e14:	d106      	bne.n	8001e24 <HAL_RCC_OscConfig+0x74>
 8001e16:	4b76      	ldr	r3, [pc, #472]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a75      	ldr	r2, [pc, #468]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xb0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e2e:	4b70      	ldr	r3, [pc, #448]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6f      	ldr	r2, [pc, #444]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xb0>
 8001e48:	4b69      	ldr	r3, [pc, #420]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a68      	ldr	r2, [pc, #416]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b66      	ldr	r3, [pc, #408]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a65      	ldr	r2, [pc, #404]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fab2 	bl	80013d0 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff faae 	bl	80013d0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e207      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xc0>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fa9e 	bl	80013d0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fa9a 	bl	80013d0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	@ 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1f3      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b51      	ldr	r3, [pc, #324]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0xe8>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d063      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed2:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b44      	ldr	r3, [pc, #272]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b41      	ldr	r3, [pc, #260]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x152>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1c7      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4937      	ldr	r1, [pc, #220]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x244>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff fa53 	bl	80013d0 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fa4f 	bl	80013d0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1a8      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4925      	ldr	r1, [pc, #148]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_RCC_OscConfig+0x244>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fa32 	bl	80013d0 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff fa2e 	bl	80013d0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e187      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d036      	beq.n	8002008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <HAL_RCC_OscConfig+0x248>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fa12 	bl	80013d0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fa0e 	bl	80013d0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e167      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x200>
 8001fce:	e01b      	b.n	8002008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_RCC_OscConfig+0x248>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f9fb 	bl	80013d0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	e00e      	b.n	8001ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fde:	f7ff f9f7 	bl	80013d0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d907      	bls.n	8001ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e150      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	42470000 	.word	0x42470000
 8001ff8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4b88      	ldr	r3, [pc, #544]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ea      	bne.n	8001fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8097 	beq.w	8002144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b81      	ldr	r3, [pc, #516]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b7d      	ldr	r3, [pc, #500]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4a7c      	ldr	r2, [pc, #496]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	4b7a      	ldr	r3, [pc, #488]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b77      	ldr	r3, [pc, #476]	@ (8002224 <HAL_RCC_OscConfig+0x474>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b74      	ldr	r3, [pc, #464]	@ (8002224 <HAL_RCC_OscConfig+0x474>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a73      	ldr	r2, [pc, #460]	@ (8002224 <HAL_RCC_OscConfig+0x474>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff f9b7 	bl	80013d0 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7ff f9b3 	bl	80013d0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e10c      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b6a      	ldr	r3, [pc, #424]	@ (8002224 <HAL_RCC_OscConfig+0x474>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x2ea>
 800208c:	4b64      	ldr	r3, [pc, #400]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	4a63      	ldr	r2, [pc, #396]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6713      	str	r3, [r2, #112]	@ 0x70
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x324>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x30c>
 80020a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0x324>
 80020bc:	4b58      	ldr	r3, [pc, #352]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c0:	4a57      	ldr	r2, [pc, #348]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c8:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	4a54      	ldr	r2, [pc, #336]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d015      	beq.n	8002108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f978 	bl	80013d0 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f974 	bl	80013d0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0cb      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	4b49      	ldr	r3, [pc, #292]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0ee      	beq.n	80020e4 <HAL_RCC_OscConfig+0x334>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff f962 	bl	80013d0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7ff f95e 	bl	80013d0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0b5      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	4b3e      	ldr	r3, [pc, #248]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ee      	bne.n	8002110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	4a38      	ldr	r2, [pc, #224]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a1 	beq.w	8002290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214e:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d05c      	beq.n	8002214 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d141      	bne.n	80021e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <HAL_RCC_OscConfig+0x478>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff f932 	bl	80013d0 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f92e 	bl	80013d0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e087      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	3b01      	subs	r3, #1
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	491b      	ldr	r1, [pc, #108]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x478>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7ff f907 	bl	80013d0 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7ff f903 	bl	80013d0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e05c      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x416>
 80021e4:	e054      	b.n	8002290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_RCC_OscConfig+0x478>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f8f0 	bl	80013d0 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f8ec 	bl	80013d0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e045      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_RCC_OscConfig+0x470>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x444>
 8002212:	e03d      	b.n	8002290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e038      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000
 8002228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x4ec>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d028      	beq.n	800228c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d121      	bne.n	800228c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d11a      	bne.n	800228c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	4293      	cmp	r3, r2
 8002266:	d111      	bne.n	800228c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0cc      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b68      	ldr	r3, [pc, #416]	@ (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d90c      	bls.n	80022dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b65      	ldr	r3, [pc, #404]	@ (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b63      	ldr	r3, [pc, #396]	@ (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b8      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f4:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a58      	ldr	r2, [pc, #352]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a52      	ldr	r2, [pc, #328]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	494d      	ldr	r1, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d044      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d119      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d003      	beq.n	800235e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	2b03      	cmp	r3, #3
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	4b3f      	ldr	r3, [pc, #252]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06f      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e067      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237e:	4b37      	ldr	r3, [pc, #220]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 0203 	bic.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4934      	ldr	r1, [pc, #208]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002390:	f7ff f81e 	bl	80013d0 <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	e00a      	b.n	80023ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7ff f81a 	bl	80013d0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e04f      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 020c 	and.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1eb      	bne.n	8002398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d20c      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e032      	b.n	800244e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4916      	ldr	r1, [pc, #88]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	490e      	ldr	r1, [pc, #56]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002426:	f000 f821 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800242a:	4602      	mov	r2, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	490a      	ldr	r1, [pc, #40]	@ (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	5ccb      	ldrb	r3, [r1, r3]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe ff7e 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023c00 	.word	0x40023c00
 800245c:	40023800 	.word	0x40023800
 8002460:	08003fe0 	.word	0x08003fe0
 8002464:	20000000 	.word	0x20000000
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b090      	sub	sp, #64	@ 0x40
 8002472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002484:	4b59      	ldr	r3, [pc, #356]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d00d      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x40>
 8002490:	2b08      	cmp	r3, #8
 8002492:	f200 80a1 	bhi.w	80025d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x34>
 800249a:	2b04      	cmp	r3, #4
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800249e:	e09b      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024a4:	e09b      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a6:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024aa:	e098      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ac:	4b4f      	ldr	r3, [pc, #316]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b6:	4b4d      	ldr	r3, [pc, #308]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d028      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c2:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	2200      	movs	r2, #0
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024d4:	2100      	movs	r1, #0
 80024d6:	4b47      	ldr	r3, [pc, #284]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024d8:	fb03 f201 	mul.w	r2, r3, r1
 80024dc:	2300      	movs	r3, #0
 80024de:	fb00 f303 	mul.w	r3, r0, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	4a43      	ldr	r2, [pc, #268]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024e6:	fba0 1202 	umull	r1, r2, r0, r2
 80024ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024ec:	460a      	mov	r2, r1
 80024ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f2:	4413      	add	r3, r2
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	2200      	movs	r2, #0
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	61fa      	str	r2, [r7, #28]
 80024fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002506:	f7fe fb3d 	bl	8000b84 <__aeabi_uldivmod>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4613      	mov	r3, r2
 8002510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002512:	e053      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4b35      	ldr	r3, [pc, #212]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	2200      	movs	r2, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	617a      	str	r2, [r7, #20]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002526:	f04f 0b00 	mov.w	fp, #0
 800252a:	4652      	mov	r2, sl
 800252c:	465b      	mov	r3, fp
 800252e:	f04f 0000 	mov.w	r0, #0
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	0159      	lsls	r1, r3, #5
 8002538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253c:	0150      	lsls	r0, r2, #5
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	ebb2 080a 	subs.w	r8, r2, sl
 8002546:	eb63 090b 	sbc.w	r9, r3, fp
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002556:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800255a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800255e:	ebb2 0408 	subs.w	r4, r2, r8
 8002562:	eb63 0509 	sbc.w	r5, r3, r9
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	00eb      	lsls	r3, r5, #3
 8002570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002574:	00e2      	lsls	r2, r4, #3
 8002576:	4614      	mov	r4, r2
 8002578:	461d      	mov	r5, r3
 800257a:	eb14 030a 	adds.w	r3, r4, sl
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	eb45 030b 	adc.w	r3, r5, fp
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002592:	4629      	mov	r1, r5
 8002594:	028b      	lsls	r3, r1, #10
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800259c:	4621      	mov	r1, r4
 800259e:	028a      	lsls	r2, r1, #10
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	2200      	movs	r2, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	60fa      	str	r2, [r7, #12]
 80025ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025b0:	f7fe fae8 	bl	8000b84 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x180>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025d6:	e002      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3740      	adds	r7, #64	@ 0x40
 80025e4:	46bd      	mov	sp, r7
 80025e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	017d7840 	.word	0x017d7840

080025f8 <arm_cfft_radix4by2_q15>:
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fc:	084d      	lsrs	r5, r1, #1
 80025fe:	b081      	sub	sp, #4
 8002600:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8002604:	4616      	mov	r6, r2
 8002606:	d04d      	beq.n	80026a4 <arm_cfft_radix4by2_q15+0xac>
 8002608:	4604      	mov	r4, r0
 800260a:	4686      	mov	lr, r0
 800260c:	46bc      	mov	ip, r7
 800260e:	4691      	mov	r9, r2
 8002610:	4628      	mov	r0, r5
 8002612:	f04f 0800 	mov.w	r8, #0
 8002616:	f859 2b04 	ldr.w	r2, [r9], #4
 800261a:	f8de 3000 	ldr.w	r3, [lr]
 800261e:	fa93 fa28 	shadd16	sl, r3, r8
 8002622:	f8dc 1000 	ldr.w	r1, [ip]
 8002626:	fa91 f128 	shadd16	r1, r1, r8
 800262a:	fada fb11 	qsub16	fp, sl, r1
 800262e:	fa9a f121 	shadd16	r1, sl, r1
 8002632:	f84e 1b04 	str.w	r1, [lr], #4
 8002636:	fb22 f10b 	smuad	r1, r2, fp
 800263a:	fb42 f21b 	smusdx	r2, r2, fp
 800263e:	0c13      	lsrs	r3, r2, #16
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002646:	3801      	subs	r0, #1
 8002648:	f84c 3b04 	str.w	r3, [ip], #4
 800264c:	d1e3      	bne.n	8002616 <arm_cfft_radix4by2_q15+0x1e>
 800264e:	4629      	mov	r1, r5
 8002650:	2302      	movs	r3, #2
 8002652:	4632      	mov	r2, r6
 8002654:	4620      	mov	r0, r4
 8002656:	f000 f8f5 	bl	8002844 <arm_radix4_butterfly_q15>
 800265a:	2302      	movs	r3, #2
 800265c:	4629      	mov	r1, r5
 800265e:	4632      	mov	r2, r6
 8002660:	4638      	mov	r0, r7
 8002662:	f000 f8ef 	bl	8002844 <arm_radix4_butterfly_q15>
 8002666:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800266a:	1ca3      	adds	r3, r4, #2
 800266c:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8002670:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8002674:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8002678:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800267c:	007f      	lsls	r7, r7, #1
 800267e:	0076      	lsls	r6, r6, #1
 8002680:	0040      	lsls	r0, r0, #1
 8002682:	0052      	lsls	r2, r2, #1
 8002684:	f823 7c02 	strh.w	r7, [r3, #-2]
 8002688:	3408      	adds	r4, #8
 800268a:	f824 6c06 	strh.w	r6, [r4, #-6]
 800268e:	f824 0c04 	strh.w	r0, [r4, #-4]
 8002692:	f824 2c02 	strh.w	r2, [r4, #-2]
 8002696:	42a5      	cmp	r5, r4
 8002698:	f103 0308 	add.w	r3, r3, #8
 800269c:	d1e6      	bne.n	800266c <arm_cfft_radix4by2_q15+0x74>
 800269e:	b001      	add	sp, #4
 80026a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a4:	4629      	mov	r1, r5
 80026a6:	2302      	movs	r3, #2
 80026a8:	f000 f8cc 	bl	8002844 <arm_radix4_butterfly_q15>
 80026ac:	4632      	mov	r2, r6
 80026ae:	4629      	mov	r1, r5
 80026b0:	4638      	mov	r0, r7
 80026b2:	2302      	movs	r3, #2
 80026b4:	b001      	add	sp, #4
 80026b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026ba:	f000 b8c3 	b.w	8002844 <arm_radix4_butterfly_q15>
 80026be:	bf00      	nop

080026c0 <arm_cfft_radix4by2_inverse_q15>:
 80026c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c4:	084d      	lsrs	r5, r1, #1
 80026c6:	b081      	sub	sp, #4
 80026c8:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80026cc:	4616      	mov	r6, r2
 80026ce:	d04d      	beq.n	800276c <arm_cfft_radix4by2_inverse_q15+0xac>
 80026d0:	4604      	mov	r4, r0
 80026d2:	4686      	mov	lr, r0
 80026d4:	46bc      	mov	ip, r7
 80026d6:	4691      	mov	r9, r2
 80026d8:	4628      	mov	r0, r5
 80026da:	f04f 0800 	mov.w	r8, #0
 80026de:	f859 2b04 	ldr.w	r2, [r9], #4
 80026e2:	f8de 3000 	ldr.w	r3, [lr]
 80026e6:	fa93 fa28 	shadd16	sl, r3, r8
 80026ea:	f8dc 1000 	ldr.w	r1, [ip]
 80026ee:	fa91 f128 	shadd16	r1, r1, r8
 80026f2:	fada fb11 	qsub16	fp, sl, r1
 80026f6:	fa9a f121 	shadd16	r1, sl, r1
 80026fa:	f84e 1b04 	str.w	r1, [lr], #4
 80026fe:	fb42 f10b 	smusd	r1, r2, fp
 8002702:	fb22 f21b 	smuadx	r2, r2, fp
 8002706:	0c13      	lsrs	r3, r2, #16
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800270e:	3801      	subs	r0, #1
 8002710:	f84c 3b04 	str.w	r3, [ip], #4
 8002714:	d1e3      	bne.n	80026de <arm_cfft_radix4by2_inverse_q15+0x1e>
 8002716:	4629      	mov	r1, r5
 8002718:	2302      	movs	r3, #2
 800271a:	4632      	mov	r2, r6
 800271c:	4620      	mov	r0, r4
 800271e:	f000 f9bf 	bl	8002aa0 <arm_radix4_butterfly_inverse_q15>
 8002722:	2302      	movs	r3, #2
 8002724:	4629      	mov	r1, r5
 8002726:	4632      	mov	r2, r6
 8002728:	4638      	mov	r0, r7
 800272a:	f000 f9b9 	bl	8002aa0 <arm_radix4_butterfly_inverse_q15>
 800272e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8002732:	1ca3      	adds	r3, r4, #2
 8002734:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8002738:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800273c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8002740:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8002744:	007f      	lsls	r7, r7, #1
 8002746:	0076      	lsls	r6, r6, #1
 8002748:	0040      	lsls	r0, r0, #1
 800274a:	0052      	lsls	r2, r2, #1
 800274c:	f823 7c02 	strh.w	r7, [r3, #-2]
 8002750:	3408      	adds	r4, #8
 8002752:	f824 6c06 	strh.w	r6, [r4, #-6]
 8002756:	f824 0c04 	strh.w	r0, [r4, #-4]
 800275a:	f824 2c02 	strh.w	r2, [r4, #-2]
 800275e:	42a5      	cmp	r5, r4
 8002760:	f103 0308 	add.w	r3, r3, #8
 8002764:	d1e6      	bne.n	8002734 <arm_cfft_radix4by2_inverse_q15+0x74>
 8002766:	b001      	add	sp, #4
 8002768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800276c:	4629      	mov	r1, r5
 800276e:	2302      	movs	r3, #2
 8002770:	f000 f996 	bl	8002aa0 <arm_radix4_butterfly_inverse_q15>
 8002774:	4632      	mov	r2, r6
 8002776:	4629      	mov	r1, r5
 8002778:	4638      	mov	r0, r7
 800277a:	2302      	movs	r3, #2
 800277c:	b001      	add	sp, #4
 800277e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002782:	f000 b98d 	b.w	8002aa0 <arm_radix4_butterfly_inverse_q15>
 8002786:	bf00      	nop

08002788 <arm_cfft_q15>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	2a01      	cmp	r2, #1
 800278c:	460d      	mov	r5, r1
 800278e:	4604      	mov	r4, r0
 8002790:	461e      	mov	r6, r3
 8002792:	8801      	ldrh	r1, [r0, #0]
 8002794:	d024      	beq.n	80027e0 <arm_cfft_q15+0x58>
 8002796:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800279a:	d013      	beq.n	80027c4 <arm_cfft_q15+0x3c>
 800279c:	d808      	bhi.n	80027b0 <arm_cfft_q15+0x28>
 800279e:	2920      	cmp	r1, #32
 80027a0:	d031      	beq.n	8002806 <arm_cfft_q15+0x7e>
 80027a2:	d945      	bls.n	8002830 <arm_cfft_q15+0xa8>
 80027a4:	2940      	cmp	r1, #64	@ 0x40
 80027a6:	d00d      	beq.n	80027c4 <arm_cfft_q15+0x3c>
 80027a8:	2980      	cmp	r1, #128	@ 0x80
 80027aa:	d02c      	beq.n	8002806 <arm_cfft_q15+0x7e>
 80027ac:	b98e      	cbnz	r6, 80027d2 <arm_cfft_q15+0x4a>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80027b4:	d006      	beq.n	80027c4 <arm_cfft_q15+0x3c>
 80027b6:	d923      	bls.n	8002800 <arm_cfft_q15+0x78>
 80027b8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80027bc:	d023      	beq.n	8002806 <arm_cfft_q15+0x7e>
 80027be:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80027c2:	d1f3      	bne.n	80027ac <arm_cfft_q15+0x24>
 80027c4:	2301      	movs	r3, #1
 80027c6:	6862      	ldr	r2, [r4, #4]
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f83b 	bl	8002844 <arm_radix4_butterfly_q15>
 80027ce:	2e00      	cmp	r6, #0
 80027d0:	d0ed      	beq.n	80027ae <arm_cfft_q15+0x26>
 80027d2:	4628      	mov	r0, r5
 80027d4:	68a2      	ldr	r2, [r4, #8]
 80027d6:	89a1      	ldrh	r1, [r4, #12]
 80027d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80027dc:	f7fd bd29 	b.w	8000232 <arm_bitreversal_16>
 80027e0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80027e4:	d01e      	beq.n	8002824 <arm_cfft_q15+0x9c>
 80027e6:	d813      	bhi.n	8002810 <arm_cfft_q15+0x88>
 80027e8:	2920      	cmp	r1, #32
 80027ea:	d004      	beq.n	80027f6 <arm_cfft_q15+0x6e>
 80027ec:	d927      	bls.n	800283e <arm_cfft_q15+0xb6>
 80027ee:	2940      	cmp	r1, #64	@ 0x40
 80027f0:	d018      	beq.n	8002824 <arm_cfft_q15+0x9c>
 80027f2:	2980      	cmp	r1, #128	@ 0x80
 80027f4:	d1da      	bne.n	80027ac <arm_cfft_q15+0x24>
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	4628      	mov	r0, r5
 80027fa:	f7ff ff61 	bl	80026c0 <arm_cfft_radix4by2_inverse_q15>
 80027fe:	e7d5      	b.n	80027ac <arm_cfft_q15+0x24>
 8002800:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002804:	d1d2      	bne.n	80027ac <arm_cfft_q15+0x24>
 8002806:	6862      	ldr	r2, [r4, #4]
 8002808:	4628      	mov	r0, r5
 800280a:	f7ff fef5 	bl	80025f8 <arm_cfft_radix4by2_q15>
 800280e:	e7cd      	b.n	80027ac <arm_cfft_q15+0x24>
 8002810:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002814:	d006      	beq.n	8002824 <arm_cfft_q15+0x9c>
 8002816:	d90e      	bls.n	8002836 <arm_cfft_q15+0xae>
 8002818:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800281c:	d0eb      	beq.n	80027f6 <arm_cfft_q15+0x6e>
 800281e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002822:	d1c3      	bne.n	80027ac <arm_cfft_q15+0x24>
 8002824:	2301      	movs	r3, #1
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	4628      	mov	r0, r5
 800282a:	f000 f939 	bl	8002aa0 <arm_radix4_butterfly_inverse_q15>
 800282e:	e7bd      	b.n	80027ac <arm_cfft_q15+0x24>
 8002830:	2910      	cmp	r1, #16
 8002832:	d1bb      	bne.n	80027ac <arm_cfft_q15+0x24>
 8002834:	e7c6      	b.n	80027c4 <arm_cfft_q15+0x3c>
 8002836:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800283a:	d0dc      	beq.n	80027f6 <arm_cfft_q15+0x6e>
 800283c:	e7b6      	b.n	80027ac <arm_cfft_q15+0x24>
 800283e:	2910      	cmp	r1, #16
 8002840:	d1b4      	bne.n	80027ac <arm_cfft_q15+0x24>
 8002842:	e7ef      	b.n	8002824 <arm_cfft_q15+0x9c>

08002844 <arm_radix4_butterfly_q15>:
 8002844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	b08f      	sub	sp, #60	@ 0x3c
 800284a:	469b      	mov	fp, r3
 800284c:	9101      	str	r1, [sp, #4]
 800284e:	0889      	lsrs	r1, r1, #2
 8002850:	460e      	mov	r6, r1
 8002852:	910d      	str	r1, [sp, #52]	@ 0x34
 8002854:	0089      	lsls	r1, r1, #2
 8002856:	4607      	mov	r7, r0
 8002858:	900c      	str	r0, [sp, #48]	@ 0x30
 800285a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800285e:	4408      	add	r0, r1
 8002860:	2400      	movs	r4, #0
 8002862:	1845      	adds	r5, r0, r1
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4696      	mov	lr, r2
 8002868:	9209      	str	r2, [sp, #36]	@ 0x24
 800286a:	46b2      	mov	sl, r6
 800286c:	4429      	add	r1, r5
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	4626      	mov	r6, r4
 8002872:	4622      	mov	r2, r4
 8002874:	f8cd b000 	str.w	fp, [sp]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	fa93 fc22 	shadd16	ip, r3, r2
 800287e:	fa9c fc22 	shadd16	ip, ip, r2
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	fa93 f322 	shadd16	r3, r3, r2
 8002888:	fa93 f322 	shadd16	r3, r3, r2
 800288c:	fa9c f813 	qadd16	r8, ip, r3
 8002890:	fadc fc13 	qsub16	ip, ip, r3
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	fa93 f322 	shadd16	r3, r3, r2
 800289a:	fa93 f922 	shadd16	r9, r3, r2
 800289e:	680b      	ldr	r3, [r1, #0]
 80028a0:	fa93 f322 	shadd16	r3, r3, r2
 80028a4:	fa93 f322 	shadd16	r3, r3, r2
 80028a8:	fa99 f313 	qadd16	r3, r9, r3
 80028ac:	fa98 f923 	shadd16	r9, r8, r3
 80028b0:	f847 9b04 	str.w	r9, [r7], #4
 80028b4:	fad8 f313 	qsub16	r3, r8, r3
 80028b8:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 80028bc:	fb29 fb03 	smuad	fp, r9, r3
 80028c0:	fb49 f913 	smusdx	r9, r9, r3
 80028c4:	6803      	ldr	r3, [r0, #0]
 80028c6:	fa93 f322 	shadd16	r3, r3, r2
 80028ca:	fa93 f822 	shadd16	r8, r3, r2
 80028ce:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80028d2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80028d6:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 80028da:	f840 3b04 	str.w	r3, [r0], #4
 80028de:	680b      	ldr	r3, [r1, #0]
 80028e0:	fa93 f322 	shadd16	r3, r3, r2
 80028e4:	fa93 f322 	shadd16	r3, r3, r2
 80028e8:	fad8 f313 	qsub16	r3, r8, r3
 80028ec:	faac f913 	qasx	r9, ip, r3
 80028f0:	faec fc13 	qsax	ip, ip, r3
 80028f4:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80028f8:	fb23 f80c 	smuad	r8, r3, ip
 80028fc:	fb43 f31c 	smusdx	r3, r3, ip
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	041b      	lsls	r3, r3, #16
 8002904:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002908:	f845 3b04 	str.w	r3, [r5], #4
 800290c:	f85e 3004 	ldr.w	r3, [lr, r4]
 8002910:	fb23 fc09 	smuad	ip, r3, r9
 8002914:	fb43 f319 	smusdx	r3, r3, r9
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002920:	f841 3b04 	str.w	r3, [r1], #4
 8002924:	9b00      	ldr	r3, [sp, #0]
 8002926:	441e      	add	r6, r3
 8002928:	9b02      	ldr	r3, [sp, #8]
 800292a:	f1ba 0a01 	subs.w	sl, sl, #1
 800292e:	441c      	add	r4, r3
 8002930:	d1a2      	bne.n	8002878 <arm_radix4_butterfly_q15+0x34>
 8002932:	f8dd b000 	ldr.w	fp, [sp]
 8002936:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800293a:	9306      	str	r3, [sp, #24]
 800293c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800293e:	2b04      	cmp	r3, #4
 8002940:	f240 8081 	bls.w	8002a46 <arm_radix4_butterfly_q15+0x202>
 8002944:	f8cd a008 	str.w	sl, [sp, #8]
 8002948:	930a      	str	r3, [sp, #40]	@ 0x28
 800294a:	469a      	mov	sl, r3
 800294c:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8002950:	2200      	movs	r2, #0
 8002952:	4611      	mov	r1, r2
 8002954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002956:	9204      	str	r2, [sp, #16]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	9308      	str	r3, [sp, #32]
 800295e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002960:	9207      	str	r2, [sp, #28]
 8002962:	9105      	str	r1, [sp, #20]
 8002964:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	9908      	ldr	r1, [sp, #32]
 800296c:	9a03      	ldr	r2, [sp, #12]
 800296e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002970:	1850      	adds	r0, r2, r1
 8002972:	9a05      	ldr	r2, [sp, #20]
 8002974:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002978:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800297c:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8002980:	9b06      	ldr	r3, [sp, #24]
 8002982:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8002986:	18d3      	adds	r3, r2, r3
 8002988:	9305      	str	r3, [sp, #20]
 800298a:	9a04      	ldr	r2, [sp, #16]
 800298c:	9b01      	ldr	r3, [sp, #4]
 800298e:	180d      	adds	r5, r1, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	46b6      	mov	lr, r6
 8002994:	eb01 0405 	add.w	r4, r1, r5
 8002998:	9e03      	ldr	r6, [sp, #12]
 800299a:	d941      	bls.n	8002a20 <arm_radix4_butterfly_q15+0x1dc>
 800299c:	eb0a 0e02 	add.w	lr, sl, r2
 80029a0:	6833      	ldr	r3, [r6, #0]
 80029a2:	682a      	ldr	r2, [r5, #0]
 80029a4:	fa93 fb12 	qadd16	fp, r3, r2
 80029a8:	fad3 f312 	qsub16	r3, r3, r2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	6802      	ldr	r2, [r0, #0]
 80029b0:	6821      	ldr	r1, [r4, #0]
 80029b2:	fa92 f211 	qadd16	r2, r2, r1
 80029b6:	fa9b f322 	shadd16	r3, fp, r2
 80029ba:	9902      	ldr	r1, [sp, #8]
 80029bc:	fa93 f121 	shadd16	r1, r3, r1
 80029c0:	6031      	str	r1, [r6, #0]
 80029c2:	443e      	add	r6, r7
 80029c4:	fadb f222 	shsub16	r2, fp, r2
 80029c8:	fb28 f102 	smuad	r1, r8, r2
 80029cc:	fb48 f212 	smusdx	r2, r8, r2
 80029d0:	0c12      	lsrs	r2, r2, #16
 80029d2:	0412      	lsls	r2, r2, #16
 80029d4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	6002      	str	r2, [r0, #0]
 80029dc:	6822      	ldr	r2, [r4, #0]
 80029de:	4438      	add	r0, r7
 80029e0:	fad1 f212 	qsub16	r2, r1, r2
 80029e4:	9b00      	ldr	r3, [sp, #0]
 80029e6:	faa3 f122 	shasx	r1, r3, r2
 80029ea:	fae3 f322 	shsax	r3, r3, r2
 80029ee:	fb2c fb03 	smuad	fp, ip, r3
 80029f2:	fb4c f313 	smusdx	r3, ip, r3
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	443d      	add	r5, r7
 8002a02:	fb29 f301 	smuad	r3, r9, r1
 8002a06:	fb49 f111 	smusdx	r1, r9, r1
 8002a0a:	0c09      	lsrs	r1, r1, #16
 8002a0c:	0409      	lsls	r1, r1, #16
 8002a0e:	9a01      	ldr	r2, [sp, #4]
 8002a10:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8002a14:	4673      	mov	r3, lr
 8002a16:	429a      	cmp	r2, r3
 8002a18:	6021      	str	r1, [r4, #0]
 8002a1a:	44d6      	add	lr, sl
 8002a1c:	443c      	add	r4, r7
 8002a1e:	d8bf      	bhi.n	80029a0 <arm_radix4_butterfly_q15+0x15c>
 8002a20:	9a03      	ldr	r2, [sp, #12]
 8002a22:	9b04      	ldr	r3, [sp, #16]
 8002a24:	3204      	adds	r2, #4
 8002a26:	9203      	str	r2, [sp, #12]
 8002a28:	9a07      	ldr	r2, [sp, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	9304      	str	r3, [sp, #16]
 8002a30:	d99b      	bls.n	800296a <arm_radix4_butterfly_q15+0x126>
 8002a32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a34:	9a06      	ldr	r2, [sp, #24]
 8002a36:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a42:	9206      	str	r2, [sp, #24]
 8002a44:	d882      	bhi.n	800294c <arm_radix4_butterfly_q15+0x108>
 8002a46:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002a48:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8002a4a:	3410      	adds	r4, #16
 8002a4c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002a50:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8002a54:	fa93 f117 	qadd16	r1, r3, r7
 8002a58:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8002a5c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002a60:	fa92 f510 	qadd16	r5, r2, r0
 8002a64:	fa91 f525 	shadd16	r5, r1, r5
 8002a68:	f844 5c10 	str.w	r5, [r4, #-16]
 8002a6c:	fa92 f510 	qadd16	r5, r2, r0
 8002a70:	fad1 f125 	shsub16	r1, r1, r5
 8002a74:	f844 1c0c 	str.w	r1, [r4, #-12]
 8002a78:	fad3 f317 	qsub16	r3, r3, r7
 8002a7c:	fad2 f210 	qsub16	r2, r2, r0
 8002a80:	fae3 f122 	shsax	r1, r3, r2
 8002a84:	f844 1c08 	str.w	r1, [r4, #-8]
 8002a88:	faa3 f322 	shasx	r3, r3, r2
 8002a8c:	3e01      	subs	r6, #1
 8002a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8002a92:	f104 0410 	add.w	r4, r4, #16
 8002a96:	d1d9      	bne.n	8002a4c <arm_radix4_butterfly_q15+0x208>
 8002a98:	b00f      	add	sp, #60	@ 0x3c
 8002a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9e:	bf00      	nop

08002aa0 <arm_radix4_butterfly_inverse_q15>:
 8002aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa4:	b08f      	sub	sp, #60	@ 0x3c
 8002aa6:	469b      	mov	fp, r3
 8002aa8:	9101      	str	r1, [sp, #4]
 8002aaa:	0889      	lsrs	r1, r1, #2
 8002aac:	460e      	mov	r6, r1
 8002aae:	910d      	str	r1, [sp, #52]	@ 0x34
 8002ab0:	0089      	lsls	r1, r1, #2
 8002ab2:	4607      	mov	r7, r0
 8002ab4:	900c      	str	r0, [sp, #48]	@ 0x30
 8002ab6:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8002aba:	4408      	add	r0, r1
 8002abc:	2400      	movs	r4, #0
 8002abe:	1845      	adds	r5, r0, r1
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4696      	mov	lr, r2
 8002ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ac6:	46b2      	mov	sl, r6
 8002ac8:	4429      	add	r1, r5
 8002aca:	9302      	str	r3, [sp, #8]
 8002acc:	4626      	mov	r6, r4
 8002ace:	4622      	mov	r2, r4
 8002ad0:	f8cd b000 	str.w	fp, [sp]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	fa93 fc22 	shadd16	ip, r3, r2
 8002ada:	fa9c fc22 	shadd16	ip, ip, r2
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	fa93 f322 	shadd16	r3, r3, r2
 8002ae4:	fa93 f322 	shadd16	r3, r3, r2
 8002ae8:	fa9c f813 	qadd16	r8, ip, r3
 8002aec:	fadc fc13 	qsub16	ip, ip, r3
 8002af0:	6803      	ldr	r3, [r0, #0]
 8002af2:	fa93 f322 	shadd16	r3, r3, r2
 8002af6:	fa93 f922 	shadd16	r9, r3, r2
 8002afa:	680b      	ldr	r3, [r1, #0]
 8002afc:	fa93 f322 	shadd16	r3, r3, r2
 8002b00:	fa93 f322 	shadd16	r3, r3, r2
 8002b04:	fa99 f313 	qadd16	r3, r9, r3
 8002b08:	fa98 f923 	shadd16	r9, r8, r3
 8002b0c:	f847 9b04 	str.w	r9, [r7], #4
 8002b10:	fad8 f313 	qsub16	r3, r8, r3
 8002b14:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 8002b18:	fb49 fb03 	smusd	fp, r9, r3
 8002b1c:	fb29 f913 	smuadx	r9, r9, r3
 8002b20:	6803      	ldr	r3, [r0, #0]
 8002b22:	fa93 f322 	shadd16	r3, r3, r2
 8002b26:	fa93 f822 	shadd16	r8, r3, r2
 8002b2a:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8002b2e:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8002b32:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 8002b36:	f840 3b04 	str.w	r3, [r0], #4
 8002b3a:	680b      	ldr	r3, [r1, #0]
 8002b3c:	fa93 f322 	shadd16	r3, r3, r2
 8002b40:	fa93 f322 	shadd16	r3, r3, r2
 8002b44:	fad8 f313 	qsub16	r3, r8, r3
 8002b48:	faec f913 	qsax	r9, ip, r3
 8002b4c:	faac fc13 	qasx	ip, ip, r3
 8002b50:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8002b54:	fb43 f80c 	smusd	r8, r3, ip
 8002b58:	fb23 f31c 	smuadx	r3, r3, ip
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b64:	f845 3b04 	str.w	r3, [r5], #4
 8002b68:	f85e 3004 	ldr.w	r3, [lr, r4]
 8002b6c:	fb43 fc09 	smusd	ip, r3, r9
 8002b70:	fb23 f319 	smuadx	r3, r3, r9
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002b7c:	f841 3b04 	str.w	r3, [r1], #4
 8002b80:	9b00      	ldr	r3, [sp, #0]
 8002b82:	441e      	add	r6, r3
 8002b84:	9b02      	ldr	r3, [sp, #8]
 8002b86:	f1ba 0a01 	subs.w	sl, sl, #1
 8002b8a:	441c      	add	r4, r3
 8002b8c:	d1a2      	bne.n	8002ad4 <arm_radix4_butterfly_inverse_q15+0x34>
 8002b8e:	f8dd b000 	ldr.w	fp, [sp]
 8002b92:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002b96:	9306      	str	r3, [sp, #24]
 8002b98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	f240 8081 	bls.w	8002ca2 <arm_radix4_butterfly_inverse_q15+0x202>
 8002ba0:	f8cd a008 	str.w	sl, [sp, #8]
 8002ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ba6:	469a      	mov	sl, r3
 8002ba8:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8002bac:	2200      	movs	r2, #0
 8002bae:	4611      	mov	r1, r2
 8002bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002bb2:	9204      	str	r2, [sp, #16]
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	9308      	str	r3, [sp, #32]
 8002bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002bbc:	9207      	str	r2, [sp, #28]
 8002bbe:	9105      	str	r1, [sp, #20]
 8002bc0:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8002bc4:	9303      	str	r3, [sp, #12]
 8002bc6:	9908      	ldr	r1, [sp, #32]
 8002bc8:	9a03      	ldr	r2, [sp, #12]
 8002bca:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002bcc:	1850      	adds	r0, r2, r1
 8002bce:	9a05      	ldr	r2, [sp, #20]
 8002bd0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002bd4:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8002bd8:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8002bdc:	9b06      	ldr	r3, [sp, #24]
 8002bde:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8002be2:	18d3      	adds	r3, r2, r3
 8002be4:	9305      	str	r3, [sp, #20]
 8002be6:	9a04      	ldr	r2, [sp, #16]
 8002be8:	9b01      	ldr	r3, [sp, #4]
 8002bea:	180d      	adds	r5, r1, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	46b6      	mov	lr, r6
 8002bf0:	eb01 0405 	add.w	r4, r1, r5
 8002bf4:	9e03      	ldr	r6, [sp, #12]
 8002bf6:	d941      	bls.n	8002c7c <arm_radix4_butterfly_inverse_q15+0x1dc>
 8002bf8:	eb0a 0e02 	add.w	lr, sl, r2
 8002bfc:	6833      	ldr	r3, [r6, #0]
 8002bfe:	682a      	ldr	r2, [r5, #0]
 8002c00:	fa93 fb12 	qadd16	fp, r3, r2
 8002c04:	fad3 f312 	qsub16	r3, r3, r2
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6802      	ldr	r2, [r0, #0]
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	fa92 f211 	qadd16	r2, r2, r1
 8002c12:	fa9b f322 	shadd16	r3, fp, r2
 8002c16:	9902      	ldr	r1, [sp, #8]
 8002c18:	fa93 f121 	shadd16	r1, r3, r1
 8002c1c:	6031      	str	r1, [r6, #0]
 8002c1e:	443e      	add	r6, r7
 8002c20:	fadb f222 	shsub16	r2, fp, r2
 8002c24:	fb48 f102 	smusd	r1, r8, r2
 8002c28:	fb28 f212 	smuadx	r2, r8, r2
 8002c2c:	0c12      	lsrs	r2, r2, #16
 8002c2e:	0412      	lsls	r2, r2, #16
 8002c30:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8002c34:	6801      	ldr	r1, [r0, #0]
 8002c36:	6002      	str	r2, [r0, #0]
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	4438      	add	r0, r7
 8002c3c:	fad1 f212 	qsub16	r2, r1, r2
 8002c40:	9b00      	ldr	r3, [sp, #0]
 8002c42:	fae3 f122 	shsax	r1, r3, r2
 8002c46:	faa3 f322 	shasx	r3, r3, r2
 8002c4a:	fb4c fb03 	smusd	fp, ip, r3
 8002c4e:	fb2c f313 	smuadx	r3, ip, r3
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	443d      	add	r5, r7
 8002c5e:	fb49 f301 	smusd	r3, r9, r1
 8002c62:	fb29 f111 	smuadx	r1, r9, r1
 8002c66:	0c09      	lsrs	r1, r1, #16
 8002c68:	0409      	lsls	r1, r1, #16
 8002c6a:	9a01      	ldr	r2, [sp, #4]
 8002c6c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8002c70:	4673      	mov	r3, lr
 8002c72:	429a      	cmp	r2, r3
 8002c74:	6021      	str	r1, [r4, #0]
 8002c76:	44d6      	add	lr, sl
 8002c78:	443c      	add	r4, r7
 8002c7a:	d8bf      	bhi.n	8002bfc <arm_radix4_butterfly_inverse_q15+0x15c>
 8002c7c:	9a03      	ldr	r2, [sp, #12]
 8002c7e:	9b04      	ldr	r3, [sp, #16]
 8002c80:	3204      	adds	r2, #4
 8002c82:	9203      	str	r2, [sp, #12]
 8002c84:	9a07      	ldr	r2, [sp, #28]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	d99b      	bls.n	8002bc6 <arm_radix4_butterfly_inverse_q15+0x126>
 8002c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c90:	9a06      	ldr	r2, [sp, #24]
 8002c92:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	0092      	lsls	r2, r2, #2
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8002c9e:	9206      	str	r2, [sp, #24]
 8002ca0:	d882      	bhi.n	8002ba8 <arm_radix4_butterfly_inverse_q15+0x108>
 8002ca2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002ca4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8002ca6:	3410      	adds	r4, #16
 8002ca8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002cac:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8002cb0:	fa93 f117 	qadd16	r1, r3, r7
 8002cb4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8002cb8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002cbc:	fa92 f510 	qadd16	r5, r2, r0
 8002cc0:	fa91 f525 	shadd16	r5, r1, r5
 8002cc4:	f844 5c10 	str.w	r5, [r4, #-16]
 8002cc8:	fa92 f510 	qadd16	r5, r2, r0
 8002ccc:	fad1 f125 	shsub16	r1, r1, r5
 8002cd0:	f844 1c0c 	str.w	r1, [r4, #-12]
 8002cd4:	fad3 f317 	qsub16	r3, r3, r7
 8002cd8:	fad2 f210 	qsub16	r2, r2, r0
 8002cdc:	faa3 f122 	shasx	r1, r3, r2
 8002ce0:	f844 1c08 	str.w	r1, [r4, #-8]
 8002ce4:	fae3 f322 	shsax	r3, r3, r2
 8002ce8:	3e01      	subs	r6, #1
 8002cea:	f844 3c04 	str.w	r3, [r4, #-4]
 8002cee:	f104 0410 	add.w	r4, r4, #16
 8002cf2:	d1d9      	bne.n	8002ca8 <arm_radix4_butterfly_inverse_q15+0x208>
 8002cf4:	b00f      	add	sp, #60	@ 0x3c
 8002cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop

08002cfc <arm_cmplx_mag_q15>:
 8002cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d00:	b083      	sub	sp, #12
 8002d02:	0893      	lsrs	r3, r2, #2
 8002d04:	9200      	str	r2, [sp, #0]
 8002d06:	4681      	mov	r9, r0
 8002d08:	460e      	mov	r6, r1
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	d033      	beq.n	8002d76 <arm_cmplx_mag_q15+0x7a>
 8002d0e:	f100 0510 	add.w	r5, r0, #16
 8002d12:	469a      	mov	sl, r3
 8002d14:	460c      	mov	r4, r1
 8002d16:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8002d1a:	fb20 f000 	smuad	r0, r0, r0
 8002d1e:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8002d22:	fb23 fb03 	smuad	fp, r3, r3
 8002d26:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8002d2a:	fb21 f801 	smuad	r8, r1, r1
 8002d2e:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8002d32:	fb27 f707 	smuad	r7, r7, r7
 8002d36:	4621      	mov	r1, r4
 8002d38:	1440      	asrs	r0, r0, #17
 8002d3a:	f000 f831 	bl	8002da0 <arm_sqrt_q15>
 8002d3e:	1ca1      	adds	r1, r4, #2
 8002d40:	ea4f 406b 	mov.w	r0, fp, asr #17
 8002d44:	f000 f82c 	bl	8002da0 <arm_sqrt_q15>
 8002d48:	f104 0b06 	add.w	fp, r4, #6
 8002d4c:	1d21      	adds	r1, r4, #4
 8002d4e:	ea4f 4068 	mov.w	r0, r8, asr #17
 8002d52:	f000 f825 	bl	8002da0 <arm_sqrt_q15>
 8002d56:	1478      	asrs	r0, r7, #17
 8002d58:	4659      	mov	r1, fp
 8002d5a:	f000 f821 	bl	8002da0 <arm_sqrt_q15>
 8002d5e:	f1ba 0a01 	subs.w	sl, sl, #1
 8002d62:	f105 0510 	add.w	r5, r5, #16
 8002d66:	f104 0408 	add.w	r4, r4, #8
 8002d6a:	d1d4      	bne.n	8002d16 <arm_cmplx_mag_q15+0x1a>
 8002d6c:	9a01      	ldr	r2, [sp, #4]
 8002d6e:	eb09 1902 	add.w	r9, r9, r2, lsl #4
 8002d72:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 8002d76:	9b00      	ldr	r3, [sp, #0]
 8002d78:	f013 0a03 	ands.w	sl, r3, #3
 8002d7c:	d00c      	beq.n	8002d98 <arm_cmplx_mag_q15+0x9c>
 8002d7e:	f859 0b04 	ldr.w	r0, [r9], #4
 8002d82:	fb20 f000 	smuad	r0, r0, r0
 8002d86:	4631      	mov	r1, r6
 8002d88:	1440      	asrs	r0, r0, #17
 8002d8a:	f000 f809 	bl	8002da0 <arm_sqrt_q15>
 8002d8e:	f1ba 0a01 	subs.w	sl, sl, #1
 8002d92:	f106 0602 	add.w	r6, r6, #2
 8002d96:	d1f2      	bne.n	8002d7e <arm_cmplx_mag_q15+0x82>
 8002d98:	b003      	add	sp, #12
 8002d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d9e:	bf00      	nop

08002da0 <arm_sqrt_q15>:
 8002da0:	2800      	cmp	r0, #0
 8002da2:	dd65      	ble.n	8002e70 <arm_sqrt_q15+0xd0>
 8002da4:	b470      	push	{r4, r5, r6}
 8002da6:	fab0 f480 	clz	r4, r0
 8002daa:	3c11      	subs	r4, #17
 8002dac:	b2a4      	uxth	r4, r4
 8002dae:	f014 0501 	ands.w	r5, r4, #1
 8002db2:	bf1a      	itte	ne
 8002db4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002db8:	4098      	lslne	r0, r3
 8002dba:	40a0      	lsleq	r0, r4
 8002dbc:	b200      	sxth	r0, r0
 8002dbe:	ee07 0a90 	vmov	s15, r0
 8002dc2:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <arm_sqrt_q15+0xdc>)
 8002dc8:	ee17 2a90 	vmov	r2, s15
 8002dcc:	1052      	asrs	r2, r2, #1
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8002dd8:	b083      	sub	sp, #12
 8002dda:	edcd 7a01 	vstr	s15, [sp, #4]
 8002dde:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002de2:	fb03 f203 	mul.w	r2, r3, r3
 8002de6:	1046      	asrs	r6, r0, #1
 8002de8:	f342 32cf 	sbfx	r2, r2, #15, #16
 8002dec:	fb02 f206 	mul.w	r2, r2, r6
 8002df0:	13d2      	asrs	r2, r2, #15
 8002df2:	f5c2 5240 	rsb	r2, r2, #12288	@ 0x3000
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	f342 324f 	sbfx	r2, r2, #13, #16
 8002dfe:	f022 0203 	bic.w	r2, r2, #3
 8002e02:	fb02 f302 	mul.w	r3, r2, r2
 8002e06:	f343 33cf 	sbfx	r3, r3, #15, #16
 8002e0a:	fb06 f303 	mul.w	r3, r6, r3
 8002e0e:	13db      	asrs	r3, r3, #15
 8002e10:	f5c3 5340 	rsb	r3, r3, #12288	@ 0x3000
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	f343 334f 	sbfx	r3, r3, #13, #16
 8002e1c:	f023 0303 	bic.w	r3, r3, #3
 8002e20:	fb03 f203 	mul.w	r2, r3, r3
 8002e24:	f342 32cf 	sbfx	r2, r2, #15, #16
 8002e28:	fb06 f602 	mul.w	r6, r6, r2
 8002e2c:	13f6      	asrs	r6, r6, #15
 8002e2e:	f5c6 5640 	rsb	r6, r6, #12288	@ 0x3000
 8002e32:	fb03 f306 	mul.w	r3, r3, r6
 8002e36:	f343 334f 	sbfx	r3, r3, #13, #16
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	fb00 f003 	mul.w	r0, r0, r3
 8002e42:	f340 308f 	sbfx	r0, r0, #14, #16
 8002e46:	f020 0001 	bic.w	r0, r0, #1
 8002e4a:	b15d      	cbz	r5, 8002e64 <arm_sqrt_q15+0xc4>
 8002e4c:	3c01      	subs	r4, #1
 8002e4e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8002e52:	1063      	asrs	r3, r4, #1
 8002e54:	fa40 f303 	asr.w	r3, r0, r3
 8002e58:	b21b      	sxth	r3, r3
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	800b      	strh	r3, [r1, #0]
 8002e5e:	b003      	add	sp, #12
 8002e60:	bc70      	pop	{r4, r5, r6}
 8002e62:	4770      	bx	lr
 8002e64:	f344 034e 	sbfx	r3, r4, #1, #15
 8002e68:	fa40 f303 	asr.w	r3, r0, r3
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	e7f4      	b.n	8002e5a <arm_sqrt_q15+0xba>
 8002e70:	2300      	movs	r3, #0
 8002e72:	800b      	strh	r3, [r1, #0]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	5f3759df 	.word	0x5f3759df

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4d0d      	ldr	r5, [pc, #52]	@ (8002ec8 <__libc_init_array+0x38>)
 8002e94:	4c0d      	ldr	r4, [pc, #52]	@ (8002ecc <__libc_init_array+0x3c>)
 8002e96:	1b64      	subs	r4, r4, r5
 8002e98:	10a4      	asrs	r4, r4, #2
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed0 <__libc_init_array+0x40>)
 8002ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ed4 <__libc_init_array+0x44>)
 8002ea4:	f001 f890 	bl	8003fc8 <_init>
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	2600      	movs	r6, #0
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08004310 	.word	0x08004310
 8002ecc:	08004310 	.word	0x08004310
 8002ed0:	08004310 	.word	0x08004310
 8002ed4:	08004314 	.word	0x08004314

08002ed8 <sin>:
 8002ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002eda:	ec53 2b10 	vmov	r2, r3, d0
 8002ede:	4826      	ldr	r0, [pc, #152]	@ (8002f78 <sin+0xa0>)
 8002ee0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002ee4:	4281      	cmp	r1, r0
 8002ee6:	d807      	bhi.n	8002ef8 <sin+0x20>
 8002ee8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8002f70 <sin+0x98>
 8002eec:	2000      	movs	r0, #0
 8002eee:	b005      	add	sp, #20
 8002ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ef4:	f000 b954 	b.w	80031a0 <__kernel_sin>
 8002ef8:	4820      	ldr	r0, [pc, #128]	@ (8002f7c <sin+0xa4>)
 8002efa:	4281      	cmp	r1, r0
 8002efc:	d908      	bls.n	8002f10 <sin+0x38>
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd f9c5 	bl	8000290 <__aeabi_dsub>
 8002f06:	ec41 0b10 	vmov	d0, r0, r1
 8002f0a:	b005      	add	sp, #20
 8002f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f10:	4668      	mov	r0, sp
 8002f12:	f000 fa01 	bl	8003318 <__ieee754_rem_pio2>
 8002f16:	f000 0003 	and.w	r0, r0, #3
 8002f1a:	2801      	cmp	r0, #1
 8002f1c:	d00c      	beq.n	8002f38 <sin+0x60>
 8002f1e:	2802      	cmp	r0, #2
 8002f20:	d011      	beq.n	8002f46 <sin+0x6e>
 8002f22:	b9e8      	cbnz	r0, 8002f60 <sin+0x88>
 8002f24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002f28:	ed9d 0b00 	vldr	d0, [sp]
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f000 f937 	bl	80031a0 <__kernel_sin>
 8002f32:	ec51 0b10 	vmov	r0, r1, d0
 8002f36:	e7e6      	b.n	8002f06 <sin+0x2e>
 8002f38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002f3c:	ed9d 0b00 	vldr	d0, [sp]
 8002f40:	f000 f866 	bl	8003010 <__kernel_cos>
 8002f44:	e7f5      	b.n	8002f32 <sin+0x5a>
 8002f46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002f4a:	ed9d 0b00 	vldr	d0, [sp]
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 f926 	bl	80031a0 <__kernel_sin>
 8002f54:	ec53 2b10 	vmov	r2, r3, d0
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8002f5e:	e7d2      	b.n	8002f06 <sin+0x2e>
 8002f60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002f64:	ed9d 0b00 	vldr	d0, [sp]
 8002f68:	f000 f852 	bl	8003010 <__kernel_cos>
 8002f6c:	e7f2      	b.n	8002f54 <sin+0x7c>
 8002f6e:	bf00      	nop
	...
 8002f78:	3fe921fb 	.word	0x3fe921fb
 8002f7c:	7fefffff 	.word	0x7fefffff

08002f80 <round>:
 8002f80:	ec51 0b10 	vmov	r0, r1, d0
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8002f8a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8002f8e:	2a13      	cmp	r2, #19
 8002f90:	460b      	mov	r3, r1
 8002f92:	4605      	mov	r5, r0
 8002f94:	dc1b      	bgt.n	8002fce <round+0x4e>
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	da0b      	bge.n	8002fb2 <round+0x32>
 8002f9a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8002f9e:	3201      	adds	r2, #1
 8002fa0:	bf04      	itt	eq
 8002fa2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8002fa6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8002faa:	2200      	movs	r2, #0
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	e015      	b.n	8002fde <round+0x5e>
 8002fb2:	4c15      	ldr	r4, [pc, #84]	@ (8003008 <round+0x88>)
 8002fb4:	4114      	asrs	r4, r2
 8002fb6:	ea04 0601 	and.w	r6, r4, r1
 8002fba:	4306      	orrs	r6, r0
 8002fbc:	d00f      	beq.n	8002fde <round+0x5e>
 8002fbe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8002fc2:	fa41 f202 	asr.w	r2, r1, r2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	ea23 0304 	bic.w	r3, r3, r4
 8002fcc:	e7ed      	b.n	8002faa <round+0x2a>
 8002fce:	2a33      	cmp	r2, #51	@ 0x33
 8002fd0:	dd08      	ble.n	8002fe4 <round+0x64>
 8002fd2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002fd6:	d102      	bne.n	8002fde <round+0x5e>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f7fd f95b 	bl	8000294 <__adddf3>
 8002fde:	ec41 0b10 	vmov	d0, r0, r1
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8002fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8002fec:	40f4      	lsrs	r4, r6
 8002fee:	4204      	tst	r4, r0
 8002ff0:	d0f5      	beq.n	8002fde <round+0x5e>
 8002ff2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	408a      	lsls	r2, r1
 8002ffa:	1952      	adds	r2, r2, r5
 8002ffc:	bf28      	it	cs
 8002ffe:	3301      	addcs	r3, #1
 8003000:	ea22 0204 	bic.w	r2, r2, r4
 8003004:	e7d2      	b.n	8002fac <round+0x2c>
 8003006:	bf00      	nop
 8003008:	000fffff 	.word	0x000fffff
 800300c:	00000000 	.word	0x00000000

08003010 <__kernel_cos>:
 8003010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003014:	ec57 6b10 	vmov	r6, r7, d0
 8003018:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800301c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003020:	ed8d 1b00 	vstr	d1, [sp]
 8003024:	d206      	bcs.n	8003034 <__kernel_cos+0x24>
 8003026:	4630      	mov	r0, r6
 8003028:	4639      	mov	r1, r7
 800302a:	f7fd fd83 	bl	8000b34 <__aeabi_d2iz>
 800302e:	2800      	cmp	r0, #0
 8003030:	f000 8088 	beq.w	8003144 <__kernel_cos+0x134>
 8003034:	4632      	mov	r2, r6
 8003036:	463b      	mov	r3, r7
 8003038:	4630      	mov	r0, r6
 800303a:	4639      	mov	r1, r7
 800303c:	f7fd fae0 	bl	8000600 <__aeabi_dmul>
 8003040:	4b51      	ldr	r3, [pc, #324]	@ (8003188 <__kernel_cos+0x178>)
 8003042:	2200      	movs	r2, #0
 8003044:	4604      	mov	r4, r0
 8003046:	460d      	mov	r5, r1
 8003048:	f7fd fada 	bl	8000600 <__aeabi_dmul>
 800304c:	a340      	add	r3, pc, #256	@ (adr r3, 8003150 <__kernel_cos+0x140>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	4682      	mov	sl, r0
 8003054:	468b      	mov	fp, r1
 8003056:	4620      	mov	r0, r4
 8003058:	4629      	mov	r1, r5
 800305a:	f7fd fad1 	bl	8000600 <__aeabi_dmul>
 800305e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003158 <__kernel_cos+0x148>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd f916 	bl	8000294 <__adddf3>
 8003068:	4622      	mov	r2, r4
 800306a:	462b      	mov	r3, r5
 800306c:	f7fd fac8 	bl	8000600 <__aeabi_dmul>
 8003070:	a33b      	add	r3, pc, #236	@ (adr r3, 8003160 <__kernel_cos+0x150>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd f90b 	bl	8000290 <__aeabi_dsub>
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f7fd fabf 	bl	8000600 <__aeabi_dmul>
 8003082:	a339      	add	r3, pc, #228	@ (adr r3, 8003168 <__kernel_cos+0x158>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f7fd f904 	bl	8000294 <__adddf3>
 800308c:	4622      	mov	r2, r4
 800308e:	462b      	mov	r3, r5
 8003090:	f7fd fab6 	bl	8000600 <__aeabi_dmul>
 8003094:	a336      	add	r3, pc, #216	@ (adr r3, 8003170 <__kernel_cos+0x160>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd f8f9 	bl	8000290 <__aeabi_dsub>
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	f7fd faad 	bl	8000600 <__aeabi_dmul>
 80030a6:	a334      	add	r3, pc, #208	@ (adr r3, 8003178 <__kernel_cos+0x168>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd f8f2 	bl	8000294 <__adddf3>
 80030b0:	4622      	mov	r2, r4
 80030b2:	462b      	mov	r3, r5
 80030b4:	f7fd faa4 	bl	8000600 <__aeabi_dmul>
 80030b8:	4622      	mov	r2, r4
 80030ba:	462b      	mov	r3, r5
 80030bc:	f7fd faa0 	bl	8000600 <__aeabi_dmul>
 80030c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80030c4:	4604      	mov	r4, r0
 80030c6:	460d      	mov	r5, r1
 80030c8:	4630      	mov	r0, r6
 80030ca:	4639      	mov	r1, r7
 80030cc:	f7fd fa98 	bl	8000600 <__aeabi_dmul>
 80030d0:	460b      	mov	r3, r1
 80030d2:	4602      	mov	r2, r0
 80030d4:	4629      	mov	r1, r5
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7fd f8da 	bl	8000290 <__aeabi_dsub>
 80030dc:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <__kernel_cos+0x17c>)
 80030de:	4598      	cmp	r8, r3
 80030e0:	4606      	mov	r6, r0
 80030e2:	460f      	mov	r7, r1
 80030e4:	d810      	bhi.n	8003108 <__kernel_cos+0xf8>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4650      	mov	r0, sl
 80030ec:	4659      	mov	r1, fp
 80030ee:	f7fd f8cf 	bl	8000290 <__aeabi_dsub>
 80030f2:	460b      	mov	r3, r1
 80030f4:	4926      	ldr	r1, [pc, #152]	@ (8003190 <__kernel_cos+0x180>)
 80030f6:	4602      	mov	r2, r0
 80030f8:	2000      	movs	r0, #0
 80030fa:	f7fd f8c9 	bl	8000290 <__aeabi_dsub>
 80030fe:	ec41 0b10 	vmov	d0, r0, r1
 8003102:	b003      	add	sp, #12
 8003104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <__kernel_cos+0x184>)
 800310a:	4921      	ldr	r1, [pc, #132]	@ (8003190 <__kernel_cos+0x180>)
 800310c:	4598      	cmp	r8, r3
 800310e:	bf8c      	ite	hi
 8003110:	4d21      	ldrhi	r5, [pc, #132]	@ (8003198 <__kernel_cos+0x188>)
 8003112:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003116:	2400      	movs	r4, #0
 8003118:	4622      	mov	r2, r4
 800311a:	462b      	mov	r3, r5
 800311c:	2000      	movs	r0, #0
 800311e:	f7fd f8b7 	bl	8000290 <__aeabi_dsub>
 8003122:	4622      	mov	r2, r4
 8003124:	4680      	mov	r8, r0
 8003126:	4689      	mov	r9, r1
 8003128:	462b      	mov	r3, r5
 800312a:	4650      	mov	r0, sl
 800312c:	4659      	mov	r1, fp
 800312e:	f7fd f8af 	bl	8000290 <__aeabi_dsub>
 8003132:	4632      	mov	r2, r6
 8003134:	463b      	mov	r3, r7
 8003136:	f7fd f8ab 	bl	8000290 <__aeabi_dsub>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4640      	mov	r0, r8
 8003140:	4649      	mov	r1, r9
 8003142:	e7da      	b.n	80030fa <__kernel_cos+0xea>
 8003144:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003180 <__kernel_cos+0x170>
 8003148:	e7db      	b.n	8003102 <__kernel_cos+0xf2>
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
 8003150:	be8838d4 	.word	0xbe8838d4
 8003154:	bda8fae9 	.word	0xbda8fae9
 8003158:	bdb4b1c4 	.word	0xbdb4b1c4
 800315c:	3e21ee9e 	.word	0x3e21ee9e
 8003160:	809c52ad 	.word	0x809c52ad
 8003164:	3e927e4f 	.word	0x3e927e4f
 8003168:	19cb1590 	.word	0x19cb1590
 800316c:	3efa01a0 	.word	0x3efa01a0
 8003170:	16c15177 	.word	0x16c15177
 8003174:	3f56c16c 	.word	0x3f56c16c
 8003178:	5555554c 	.word	0x5555554c
 800317c:	3fa55555 	.word	0x3fa55555
 8003180:	00000000 	.word	0x00000000
 8003184:	3ff00000 	.word	0x3ff00000
 8003188:	3fe00000 	.word	0x3fe00000
 800318c:	3fd33332 	.word	0x3fd33332
 8003190:	3ff00000 	.word	0x3ff00000
 8003194:	3fe90000 	.word	0x3fe90000
 8003198:	3fd20000 	.word	0x3fd20000
 800319c:	00000000 	.word	0x00000000

080031a0 <__kernel_sin>:
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	ec55 4b10 	vmov	r4, r5, d0
 80031a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80031ac:	b085      	sub	sp, #20
 80031ae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80031b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80031b6:	4680      	mov	r8, r0
 80031b8:	d205      	bcs.n	80031c6 <__kernel_sin+0x26>
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fd fcb9 	bl	8000b34 <__aeabi_d2iz>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d052      	beq.n	800326c <__kernel_sin+0xcc>
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fd fa17 	bl	8000600 <__aeabi_dmul>
 80031d2:	4682      	mov	sl, r0
 80031d4:	468b      	mov	fp, r1
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4620      	mov	r0, r4
 80031dc:	4629      	mov	r1, r5
 80031de:	f7fd fa0f 	bl	8000600 <__aeabi_dmul>
 80031e2:	a342      	add	r3, pc, #264	@ (adr r3, 80032ec <__kernel_sin+0x14c>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	e9cd 0100 	strd	r0, r1, [sp]
 80031ec:	4650      	mov	r0, sl
 80031ee:	4659      	mov	r1, fp
 80031f0:	f7fd fa06 	bl	8000600 <__aeabi_dmul>
 80031f4:	a33f      	add	r3, pc, #252	@ (adr r3, 80032f4 <__kernel_sin+0x154>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd f849 	bl	8000290 <__aeabi_dsub>
 80031fe:	4652      	mov	r2, sl
 8003200:	465b      	mov	r3, fp
 8003202:	f7fd f9fd 	bl	8000600 <__aeabi_dmul>
 8003206:	a33d      	add	r3, pc, #244	@ (adr r3, 80032fc <__kernel_sin+0x15c>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f7fd f842 	bl	8000294 <__adddf3>
 8003210:	4652      	mov	r2, sl
 8003212:	465b      	mov	r3, fp
 8003214:	f7fd f9f4 	bl	8000600 <__aeabi_dmul>
 8003218:	a33a      	add	r3, pc, #232	@ (adr r3, 8003304 <__kernel_sin+0x164>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fd f837 	bl	8000290 <__aeabi_dsub>
 8003222:	4652      	mov	r2, sl
 8003224:	465b      	mov	r3, fp
 8003226:	f7fd f9eb 	bl	8000600 <__aeabi_dmul>
 800322a:	a338      	add	r3, pc, #224	@ (adr r3, 800330c <__kernel_sin+0x16c>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd f830 	bl	8000294 <__adddf3>
 8003234:	4606      	mov	r6, r0
 8003236:	460f      	mov	r7, r1
 8003238:	f1b8 0f00 	cmp.w	r8, #0
 800323c:	d11b      	bne.n	8003276 <__kernel_sin+0xd6>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4650      	mov	r0, sl
 8003244:	4659      	mov	r1, fp
 8003246:	f7fd f9db 	bl	8000600 <__aeabi_dmul>
 800324a:	a325      	add	r3, pc, #148	@ (adr r3, 80032e0 <__kernel_sin+0x140>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd f81e 	bl	8000290 <__aeabi_dsub>
 8003254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003258:	f7fd f9d2 	bl	8000600 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4620      	mov	r0, r4
 8003262:	4629      	mov	r1, r5
 8003264:	f7fd f816 	bl	8000294 <__adddf3>
 8003268:	4604      	mov	r4, r0
 800326a:	460d      	mov	r5, r1
 800326c:	ec45 4b10 	vmov	d0, r4, r5
 8003270:	b005      	add	sp, #20
 8003272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800327a:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <__kernel_sin+0x148>)
 800327c:	2200      	movs	r2, #0
 800327e:	f7fd f9bf 	bl	8000600 <__aeabi_dmul>
 8003282:	4632      	mov	r2, r6
 8003284:	4680      	mov	r8, r0
 8003286:	4689      	mov	r9, r1
 8003288:	463b      	mov	r3, r7
 800328a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800328e:	f7fd f9b7 	bl	8000600 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4640      	mov	r0, r8
 8003298:	4649      	mov	r1, r9
 800329a:	f7fc fff9 	bl	8000290 <__aeabi_dsub>
 800329e:	4652      	mov	r2, sl
 80032a0:	465b      	mov	r3, fp
 80032a2:	f7fd f9ad 	bl	8000600 <__aeabi_dmul>
 80032a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032aa:	f7fc fff1 	bl	8000290 <__aeabi_dsub>
 80032ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80032e0 <__kernel_sin+0x140>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	4606      	mov	r6, r0
 80032b6:	460f      	mov	r7, r1
 80032b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032bc:	f7fd f9a0 	bl	8000600 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4630      	mov	r0, r6
 80032c6:	4639      	mov	r1, r7
 80032c8:	f7fc ffe4 	bl	8000294 <__adddf3>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fc ffdc 	bl	8000290 <__aeabi_dsub>
 80032d8:	e7c6      	b.n	8003268 <__kernel_sin+0xc8>
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w
 80032e0:	55555549 	.word	0x55555549
 80032e4:	3fc55555 	.word	0x3fc55555
 80032e8:	3fe00000 	.word	0x3fe00000
 80032ec:	5acfd57c 	.word	0x5acfd57c
 80032f0:	3de5d93a 	.word	0x3de5d93a
 80032f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80032f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80032fc:	57b1fe7d 	.word	0x57b1fe7d
 8003300:	3ec71de3 	.word	0x3ec71de3
 8003304:	19c161d5 	.word	0x19c161d5
 8003308:	3f2a01a0 	.word	0x3f2a01a0
 800330c:	1110f8a6 	.word	0x1110f8a6
 8003310:	3f811111 	.word	0x3f811111
 8003314:	00000000 	.word	0x00000000

08003318 <__ieee754_rem_pio2>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	ec57 6b10 	vmov	r6, r7, d0
 8003320:	4bc5      	ldr	r3, [pc, #788]	@ (8003638 <__ieee754_rem_pio2+0x320>)
 8003322:	b08d      	sub	sp, #52	@ 0x34
 8003324:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003328:	4598      	cmp	r8, r3
 800332a:	4604      	mov	r4, r0
 800332c:	9704      	str	r7, [sp, #16]
 800332e:	d807      	bhi.n	8003340 <__ieee754_rem_pio2+0x28>
 8003330:	2200      	movs	r2, #0
 8003332:	2300      	movs	r3, #0
 8003334:	ed80 0b00 	vstr	d0, [r0]
 8003338:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800333c:	2500      	movs	r5, #0
 800333e:	e028      	b.n	8003392 <__ieee754_rem_pio2+0x7a>
 8003340:	4bbe      	ldr	r3, [pc, #760]	@ (800363c <__ieee754_rem_pio2+0x324>)
 8003342:	4598      	cmp	r8, r3
 8003344:	d878      	bhi.n	8003438 <__ieee754_rem_pio2+0x120>
 8003346:	9b04      	ldr	r3, [sp, #16]
 8003348:	4dbd      	ldr	r5, [pc, #756]	@ (8003640 <__ieee754_rem_pio2+0x328>)
 800334a:	2b00      	cmp	r3, #0
 800334c:	4630      	mov	r0, r6
 800334e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003600 <__ieee754_rem_pio2+0x2e8>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	4639      	mov	r1, r7
 8003356:	dd38      	ble.n	80033ca <__ieee754_rem_pio2+0xb2>
 8003358:	f7fc ff9a 	bl	8000290 <__aeabi_dsub>
 800335c:	45a8      	cmp	r8, r5
 800335e:	4606      	mov	r6, r0
 8003360:	460f      	mov	r7, r1
 8003362:	d01a      	beq.n	800339a <__ieee754_rem_pio2+0x82>
 8003364:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003608 <__ieee754_rem_pio2+0x2f0>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fc ff91 	bl	8000290 <__aeabi_dsub>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4680      	mov	r8, r0
 8003374:	4689      	mov	r9, r1
 8003376:	4630      	mov	r0, r6
 8003378:	4639      	mov	r1, r7
 800337a:	f7fc ff89 	bl	8000290 <__aeabi_dsub>
 800337e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003608 <__ieee754_rem_pio2+0x2f0>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fc ff84 	bl	8000290 <__aeabi_dsub>
 8003388:	e9c4 8900 	strd	r8, r9, [r4]
 800338c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003390:	2501      	movs	r5, #1
 8003392:	4628      	mov	r0, r5
 8003394:	b00d      	add	sp, #52	@ 0x34
 8003396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339a:	a39d      	add	r3, pc, #628	@ (adr r3, 8003610 <__ieee754_rem_pio2+0x2f8>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fc ff76 	bl	8000290 <__aeabi_dsub>
 80033a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8003618 <__ieee754_rem_pio2+0x300>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	4606      	mov	r6, r0
 80033ac:	460f      	mov	r7, r1
 80033ae:	f7fc ff6f 	bl	8000290 <__aeabi_dsub>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4680      	mov	r8, r0
 80033b8:	4689      	mov	r9, r1
 80033ba:	4630      	mov	r0, r6
 80033bc:	4639      	mov	r1, r7
 80033be:	f7fc ff67 	bl	8000290 <__aeabi_dsub>
 80033c2:	a395      	add	r3, pc, #596	@ (adr r3, 8003618 <__ieee754_rem_pio2+0x300>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	e7dc      	b.n	8003384 <__ieee754_rem_pio2+0x6c>
 80033ca:	f7fc ff63 	bl	8000294 <__adddf3>
 80033ce:	45a8      	cmp	r8, r5
 80033d0:	4606      	mov	r6, r0
 80033d2:	460f      	mov	r7, r1
 80033d4:	d018      	beq.n	8003408 <__ieee754_rem_pio2+0xf0>
 80033d6:	a38c      	add	r3, pc, #560	@ (adr r3, 8003608 <__ieee754_rem_pio2+0x2f0>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f7fc ff5a 	bl	8000294 <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4680      	mov	r8, r0
 80033e6:	4689      	mov	r9, r1
 80033e8:	4630      	mov	r0, r6
 80033ea:	4639      	mov	r1, r7
 80033ec:	f7fc ff50 	bl	8000290 <__aeabi_dsub>
 80033f0:	a385      	add	r3, pc, #532	@ (adr r3, 8003608 <__ieee754_rem_pio2+0x2f0>)
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f7fc ff4d 	bl	8000294 <__adddf3>
 80033fa:	f04f 35ff 	mov.w	r5, #4294967295
 80033fe:	e9c4 8900 	strd	r8, r9, [r4]
 8003402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003406:	e7c4      	b.n	8003392 <__ieee754_rem_pio2+0x7a>
 8003408:	a381      	add	r3, pc, #516	@ (adr r3, 8003610 <__ieee754_rem_pio2+0x2f8>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f7fc ff41 	bl	8000294 <__adddf3>
 8003412:	a381      	add	r3, pc, #516	@ (adr r3, 8003618 <__ieee754_rem_pio2+0x300>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	4606      	mov	r6, r0
 800341a:	460f      	mov	r7, r1
 800341c:	f7fc ff3a 	bl	8000294 <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4680      	mov	r8, r0
 8003426:	4689      	mov	r9, r1
 8003428:	4630      	mov	r0, r6
 800342a:	4639      	mov	r1, r7
 800342c:	f7fc ff30 	bl	8000290 <__aeabi_dsub>
 8003430:	a379      	add	r3, pc, #484	@ (adr r3, 8003618 <__ieee754_rem_pio2+0x300>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	e7de      	b.n	80033f6 <__ieee754_rem_pio2+0xde>
 8003438:	4b82      	ldr	r3, [pc, #520]	@ (8003644 <__ieee754_rem_pio2+0x32c>)
 800343a:	4598      	cmp	r8, r3
 800343c:	f200 80d1 	bhi.w	80035e2 <__ieee754_rem_pio2+0x2ca>
 8003440:	f000 f966 	bl	8003710 <fabs>
 8003444:	ec57 6b10 	vmov	r6, r7, d0
 8003448:	a375      	add	r3, pc, #468	@ (adr r3, 8003620 <__ieee754_rem_pio2+0x308>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	4630      	mov	r0, r6
 8003450:	4639      	mov	r1, r7
 8003452:	f7fd f8d5 	bl	8000600 <__aeabi_dmul>
 8003456:	4b7c      	ldr	r3, [pc, #496]	@ (8003648 <__ieee754_rem_pio2+0x330>)
 8003458:	2200      	movs	r2, #0
 800345a:	f7fc ff1b 	bl	8000294 <__adddf3>
 800345e:	f7fd fb69 	bl	8000b34 <__aeabi_d2iz>
 8003462:	4605      	mov	r5, r0
 8003464:	f7fd f862 	bl	800052c <__aeabi_i2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003470:	a363      	add	r3, pc, #396	@ (adr r3, 8003600 <__ieee754_rem_pio2+0x2e8>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f7fd f8c3 	bl	8000600 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4630      	mov	r0, r6
 8003480:	4639      	mov	r1, r7
 8003482:	f7fc ff05 	bl	8000290 <__aeabi_dsub>
 8003486:	a360      	add	r3, pc, #384	@ (adr r3, 8003608 <__ieee754_rem_pio2+0x2f0>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	4682      	mov	sl, r0
 800348e:	468b      	mov	fp, r1
 8003490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003494:	f7fd f8b4 	bl	8000600 <__aeabi_dmul>
 8003498:	2d1f      	cmp	r5, #31
 800349a:	4606      	mov	r6, r0
 800349c:	460f      	mov	r7, r1
 800349e:	dc0c      	bgt.n	80034ba <__ieee754_rem_pio2+0x1a2>
 80034a0:	4b6a      	ldr	r3, [pc, #424]	@ (800364c <__ieee754_rem_pio2+0x334>)
 80034a2:	1e6a      	subs	r2, r5, #1
 80034a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a8:	4543      	cmp	r3, r8
 80034aa:	d006      	beq.n	80034ba <__ieee754_rem_pio2+0x1a2>
 80034ac:	4632      	mov	r2, r6
 80034ae:	463b      	mov	r3, r7
 80034b0:	4650      	mov	r0, sl
 80034b2:	4659      	mov	r1, fp
 80034b4:	f7fc feec 	bl	8000290 <__aeabi_dsub>
 80034b8:	e00e      	b.n	80034d8 <__ieee754_rem_pio2+0x1c0>
 80034ba:	463b      	mov	r3, r7
 80034bc:	4632      	mov	r2, r6
 80034be:	4650      	mov	r0, sl
 80034c0:	4659      	mov	r1, fp
 80034c2:	f7fc fee5 	bl	8000290 <__aeabi_dsub>
 80034c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80034ca:	9305      	str	r3, [sp, #20]
 80034cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80034d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	dc02      	bgt.n	80034de <__ieee754_rem_pio2+0x1c6>
 80034d8:	e9c4 0100 	strd	r0, r1, [r4]
 80034dc:	e039      	b.n	8003552 <__ieee754_rem_pio2+0x23a>
 80034de:	a34c      	add	r3, pc, #304	@ (adr r3, 8003610 <__ieee754_rem_pio2+0x2f8>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034e8:	f7fd f88a 	bl	8000600 <__aeabi_dmul>
 80034ec:	4606      	mov	r6, r0
 80034ee:	460f      	mov	r7, r1
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4650      	mov	r0, sl
 80034f6:	4659      	mov	r1, fp
 80034f8:	f7fc feca 	bl	8000290 <__aeabi_dsub>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4680      	mov	r8, r0
 8003502:	4689      	mov	r9, r1
 8003504:	4650      	mov	r0, sl
 8003506:	4659      	mov	r1, fp
 8003508:	f7fc fec2 	bl	8000290 <__aeabi_dsub>
 800350c:	4632      	mov	r2, r6
 800350e:	463b      	mov	r3, r7
 8003510:	f7fc febe 	bl	8000290 <__aeabi_dsub>
 8003514:	a340      	add	r3, pc, #256	@ (adr r3, 8003618 <__ieee754_rem_pio2+0x300>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	4606      	mov	r6, r0
 800351c:	460f      	mov	r7, r1
 800351e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003522:	f7fd f86d 	bl	8000600 <__aeabi_dmul>
 8003526:	4632      	mov	r2, r6
 8003528:	463b      	mov	r3, r7
 800352a:	f7fc feb1 	bl	8000290 <__aeabi_dsub>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4606      	mov	r6, r0
 8003534:	460f      	mov	r7, r1
 8003536:	4640      	mov	r0, r8
 8003538:	4649      	mov	r1, r9
 800353a:	f7fc fea9 	bl	8000290 <__aeabi_dsub>
 800353e:	9a05      	ldr	r2, [sp, #20]
 8003540:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b31      	cmp	r3, #49	@ 0x31
 8003548:	dc20      	bgt.n	800358c <__ieee754_rem_pio2+0x274>
 800354a:	e9c4 0100 	strd	r0, r1, [r4]
 800354e:	46c2      	mov	sl, r8
 8003550:	46cb      	mov	fp, r9
 8003552:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003556:	4650      	mov	r0, sl
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	4659      	mov	r1, fp
 800355e:	f7fc fe97 	bl	8000290 <__aeabi_dsub>
 8003562:	463b      	mov	r3, r7
 8003564:	4632      	mov	r2, r6
 8003566:	f7fc fe93 	bl	8000290 <__aeabi_dsub>
 800356a:	9b04      	ldr	r3, [sp, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003572:	f6bf af0e 	bge.w	8003392 <__ieee754_rem_pio2+0x7a>
 8003576:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800357a:	6063      	str	r3, [r4, #4]
 800357c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003580:	f8c4 8000 	str.w	r8, [r4]
 8003584:	60a0      	str	r0, [r4, #8]
 8003586:	60e3      	str	r3, [r4, #12]
 8003588:	426d      	negs	r5, r5
 800358a:	e702      	b.n	8003392 <__ieee754_rem_pio2+0x7a>
 800358c:	a326      	add	r3, pc, #152	@ (adr r3, 8003628 <__ieee754_rem_pio2+0x310>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003596:	f7fd f833 	bl	8000600 <__aeabi_dmul>
 800359a:	4606      	mov	r6, r0
 800359c:	460f      	mov	r7, r1
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4640      	mov	r0, r8
 80035a4:	4649      	mov	r1, r9
 80035a6:	f7fc fe73 	bl	8000290 <__aeabi_dsub>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4682      	mov	sl, r0
 80035b0:	468b      	mov	fp, r1
 80035b2:	4640      	mov	r0, r8
 80035b4:	4649      	mov	r1, r9
 80035b6:	f7fc fe6b 	bl	8000290 <__aeabi_dsub>
 80035ba:	4632      	mov	r2, r6
 80035bc:	463b      	mov	r3, r7
 80035be:	f7fc fe67 	bl	8000290 <__aeabi_dsub>
 80035c2:	a31b      	add	r3, pc, #108	@ (adr r3, 8003630 <__ieee754_rem_pio2+0x318>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	4606      	mov	r6, r0
 80035ca:	460f      	mov	r7, r1
 80035cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035d0:	f7fd f816 	bl	8000600 <__aeabi_dmul>
 80035d4:	4632      	mov	r2, r6
 80035d6:	463b      	mov	r3, r7
 80035d8:	f7fc fe5a 	bl	8000290 <__aeabi_dsub>
 80035dc:	4606      	mov	r6, r0
 80035de:	460f      	mov	r7, r1
 80035e0:	e764      	b.n	80034ac <__ieee754_rem_pio2+0x194>
 80035e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <__ieee754_rem_pio2+0x338>)
 80035e4:	4598      	cmp	r8, r3
 80035e6:	d935      	bls.n	8003654 <__ieee754_rem_pio2+0x33c>
 80035e8:	4632      	mov	r2, r6
 80035ea:	463b      	mov	r3, r7
 80035ec:	4630      	mov	r0, r6
 80035ee:	4639      	mov	r1, r7
 80035f0:	f7fc fe4e 	bl	8000290 <__aeabi_dsub>
 80035f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035f8:	e9c4 0100 	strd	r0, r1, [r4]
 80035fc:	e69e      	b.n	800333c <__ieee754_rem_pio2+0x24>
 80035fe:	bf00      	nop
 8003600:	54400000 	.word	0x54400000
 8003604:	3ff921fb 	.word	0x3ff921fb
 8003608:	1a626331 	.word	0x1a626331
 800360c:	3dd0b461 	.word	0x3dd0b461
 8003610:	1a600000 	.word	0x1a600000
 8003614:	3dd0b461 	.word	0x3dd0b461
 8003618:	2e037073 	.word	0x2e037073
 800361c:	3ba3198a 	.word	0x3ba3198a
 8003620:	6dc9c883 	.word	0x6dc9c883
 8003624:	3fe45f30 	.word	0x3fe45f30
 8003628:	2e000000 	.word	0x2e000000
 800362c:	3ba3198a 	.word	0x3ba3198a
 8003630:	252049c1 	.word	0x252049c1
 8003634:	397b839a 	.word	0x397b839a
 8003638:	3fe921fb 	.word	0x3fe921fb
 800363c:	4002d97b 	.word	0x4002d97b
 8003640:	3ff921fb 	.word	0x3ff921fb
 8003644:	413921fb 	.word	0x413921fb
 8003648:	3fe00000 	.word	0x3fe00000
 800364c:	08004130 	.word	0x08004130
 8003650:	7fefffff 	.word	0x7fefffff
 8003654:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003658:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800365c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003660:	4630      	mov	r0, r6
 8003662:	460f      	mov	r7, r1
 8003664:	f7fd fa66 	bl	8000b34 <__aeabi_d2iz>
 8003668:	f7fc ff60 	bl	800052c <__aeabi_i2d>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4630      	mov	r0, r6
 8003672:	4639      	mov	r1, r7
 8003674:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003678:	f7fc fe0a 	bl	8000290 <__aeabi_dsub>
 800367c:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <__ieee754_rem_pio2+0x3f0>)
 800367e:	2200      	movs	r2, #0
 8003680:	f7fc ffbe 	bl	8000600 <__aeabi_dmul>
 8003684:	460f      	mov	r7, r1
 8003686:	4606      	mov	r6, r0
 8003688:	f7fd fa54 	bl	8000b34 <__aeabi_d2iz>
 800368c:	f7fc ff4e 	bl	800052c <__aeabi_i2d>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4630      	mov	r0, r6
 8003696:	4639      	mov	r1, r7
 8003698:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800369c:	f7fc fdf8 	bl	8000290 <__aeabi_dsub>
 80036a0:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <__ieee754_rem_pio2+0x3f0>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	f7fc ffac 	bl	8000600 <__aeabi_dmul>
 80036a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80036ac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80036b0:	f04f 0803 	mov.w	r8, #3
 80036b4:	2600      	movs	r6, #0
 80036b6:	2700      	movs	r7, #0
 80036b8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80036bc:	4632      	mov	r2, r6
 80036be:	463b      	mov	r3, r7
 80036c0:	46c2      	mov	sl, r8
 80036c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80036c6:	f7fd fa03 	bl	8000ad0 <__aeabi_dcmpeq>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d1f4      	bne.n	80036b8 <__ieee754_rem_pio2+0x3a0>
 80036ce:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <__ieee754_rem_pio2+0x3f4>)
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2302      	movs	r3, #2
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	462a      	mov	r2, r5
 80036d8:	4653      	mov	r3, sl
 80036da:	4621      	mov	r1, r4
 80036dc:	a806      	add	r0, sp, #24
 80036de:	f000 f81f 	bl	8003720 <__kernel_rem_pio2>
 80036e2:	9b04      	ldr	r3, [sp, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	4605      	mov	r5, r0
 80036e8:	f6bf ae53 	bge.w	8003392 <__ieee754_rem_pio2+0x7a>
 80036ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80036f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80036f4:	e9c4 2300 	strd	r2, r3, [r4]
 80036f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80036fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003700:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003704:	e740      	b.n	8003588 <__ieee754_rem_pio2+0x270>
 8003706:	bf00      	nop
 8003708:	41700000 	.word	0x41700000
 800370c:	080041b0 	.word	0x080041b0

08003710 <fabs>:
 8003710:	ec51 0b10 	vmov	r0, r1, d0
 8003714:	4602      	mov	r2, r0
 8003716:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800371a:	ec43 2b10 	vmov	d0, r2, r3
 800371e:	4770      	bx	lr

08003720 <__kernel_rem_pio2>:
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003724:	ed2d 8b02 	vpush	{d8}
 8003728:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800372c:	f112 0f14 	cmn.w	r2, #20
 8003730:	9306      	str	r3, [sp, #24]
 8003732:	9104      	str	r1, [sp, #16]
 8003734:	4bbe      	ldr	r3, [pc, #760]	@ (8003a30 <__kernel_rem_pio2+0x310>)
 8003736:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003738:	9008      	str	r0, [sp, #32]
 800373a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	9b06      	ldr	r3, [sp, #24]
 8003742:	f103 33ff 	add.w	r3, r3, #4294967295
 8003746:	bfa8      	it	ge
 8003748:	1ed4      	subge	r4, r2, #3
 800374a:	9305      	str	r3, [sp, #20]
 800374c:	bfb2      	itee	lt
 800374e:	2400      	movlt	r4, #0
 8003750:	2318      	movge	r3, #24
 8003752:	fb94 f4f3 	sdivge	r4, r4, r3
 8003756:	f06f 0317 	mvn.w	r3, #23
 800375a:	fb04 3303 	mla	r3, r4, r3, r3
 800375e:	eb03 0b02 	add.w	fp, r3, r2
 8003762:	9b00      	ldr	r3, [sp, #0]
 8003764:	9a05      	ldr	r2, [sp, #20]
 8003766:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003a20 <__kernel_rem_pio2+0x300>
 800376a:	eb03 0802 	add.w	r8, r3, r2
 800376e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003770:	1aa7      	subs	r7, r4, r2
 8003772:	ae20      	add	r6, sp, #128	@ 0x80
 8003774:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003778:	2500      	movs	r5, #0
 800377a:	4545      	cmp	r5, r8
 800377c:	dd13      	ble.n	80037a6 <__kernel_rem_pio2+0x86>
 800377e:	9b06      	ldr	r3, [sp, #24]
 8003780:	aa20      	add	r2, sp, #128	@ 0x80
 8003782:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003786:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800378a:	f04f 0800 	mov.w	r8, #0
 800378e:	9b00      	ldr	r3, [sp, #0]
 8003790:	4598      	cmp	r8, r3
 8003792:	dc31      	bgt.n	80037f8 <__kernel_rem_pio2+0xd8>
 8003794:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003a20 <__kernel_rem_pio2+0x300>
 8003798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800379c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80037a0:	462f      	mov	r7, r5
 80037a2:	2600      	movs	r6, #0
 80037a4:	e01b      	b.n	80037de <__kernel_rem_pio2+0xbe>
 80037a6:	42ef      	cmn	r7, r5
 80037a8:	d407      	bmi.n	80037ba <__kernel_rem_pio2+0x9a>
 80037aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80037ae:	f7fc febd 	bl	800052c <__aeabi_i2d>
 80037b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80037b6:	3501      	adds	r5, #1
 80037b8:	e7df      	b.n	800377a <__kernel_rem_pio2+0x5a>
 80037ba:	ec51 0b18 	vmov	r0, r1, d8
 80037be:	e7f8      	b.n	80037b2 <__kernel_rem_pio2+0x92>
 80037c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80037c8:	f7fc ff1a 	bl	8000600 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037d4:	f7fc fd5e 	bl	8000294 <__adddf3>
 80037d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037dc:	3601      	adds	r6, #1
 80037de:	9b05      	ldr	r3, [sp, #20]
 80037e0:	429e      	cmp	r6, r3
 80037e2:	f1a7 0708 	sub.w	r7, r7, #8
 80037e6:	ddeb      	ble.n	80037c0 <__kernel_rem_pio2+0xa0>
 80037e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80037ec:	f108 0801 	add.w	r8, r8, #1
 80037f0:	ecaa 7b02 	vstmia	sl!, {d7}
 80037f4:	3508      	adds	r5, #8
 80037f6:	e7ca      	b.n	800378e <__kernel_rem_pio2+0x6e>
 80037f8:	9b00      	ldr	r3, [sp, #0]
 80037fa:	f8dd 8000 	ldr.w	r8, [sp]
 80037fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8003800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003804:	930a      	str	r3, [sp, #40]	@ 0x28
 8003806:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003808:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800380c:	9309      	str	r3, [sp, #36]	@ 0x24
 800380e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003814:	ab98      	add	r3, sp, #608	@ 0x260
 8003816:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800381a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800381e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003822:	ac0c      	add	r4, sp, #48	@ 0x30
 8003824:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003826:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800382a:	46a1      	mov	r9, r4
 800382c:	46c2      	mov	sl, r8
 800382e:	f1ba 0f00 	cmp.w	sl, #0
 8003832:	f1a5 0508 	sub.w	r5, r5, #8
 8003836:	dc77      	bgt.n	8003928 <__kernel_rem_pio2+0x208>
 8003838:	4658      	mov	r0, fp
 800383a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800383e:	f000 fac7 	bl	8003dd0 <scalbn>
 8003842:	ec57 6b10 	vmov	r6, r7, d0
 8003846:	2200      	movs	r2, #0
 8003848:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800384c:	4630      	mov	r0, r6
 800384e:	4639      	mov	r1, r7
 8003850:	f7fc fed6 	bl	8000600 <__aeabi_dmul>
 8003854:	ec41 0b10 	vmov	d0, r0, r1
 8003858:	f000 fb3a 	bl	8003ed0 <floor>
 800385c:	4b75      	ldr	r3, [pc, #468]	@ (8003a34 <__kernel_rem_pio2+0x314>)
 800385e:	ec51 0b10 	vmov	r0, r1, d0
 8003862:	2200      	movs	r2, #0
 8003864:	f7fc fecc 	bl	8000600 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4630      	mov	r0, r6
 800386e:	4639      	mov	r1, r7
 8003870:	f7fc fd0e 	bl	8000290 <__aeabi_dsub>
 8003874:	460f      	mov	r7, r1
 8003876:	4606      	mov	r6, r0
 8003878:	f7fd f95c 	bl	8000b34 <__aeabi_d2iz>
 800387c:	9002      	str	r0, [sp, #8]
 800387e:	f7fc fe55 	bl	800052c <__aeabi_i2d>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4630      	mov	r0, r6
 8003888:	4639      	mov	r1, r7
 800388a:	f7fc fd01 	bl	8000290 <__aeabi_dsub>
 800388e:	f1bb 0f00 	cmp.w	fp, #0
 8003892:	4606      	mov	r6, r0
 8003894:	460f      	mov	r7, r1
 8003896:	dd6c      	ble.n	8003972 <__kernel_rem_pio2+0x252>
 8003898:	f108 31ff 	add.w	r1, r8, #4294967295
 800389c:	ab0c      	add	r3, sp, #48	@ 0x30
 800389e:	9d02      	ldr	r5, [sp, #8]
 80038a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038a4:	f1cb 0018 	rsb	r0, fp, #24
 80038a8:	fa43 f200 	asr.w	r2, r3, r0
 80038ac:	4415      	add	r5, r2
 80038ae:	4082      	lsls	r2, r0
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	aa0c      	add	r2, sp, #48	@ 0x30
 80038b4:	9502      	str	r5, [sp, #8]
 80038b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80038ba:	f1cb 0217 	rsb	r2, fp, #23
 80038be:	fa43 f902 	asr.w	r9, r3, r2
 80038c2:	f1b9 0f00 	cmp.w	r9, #0
 80038c6:	dd64      	ble.n	8003992 <__kernel_rem_pio2+0x272>
 80038c8:	9b02      	ldr	r3, [sp, #8]
 80038ca:	2200      	movs	r2, #0
 80038cc:	3301      	adds	r3, #1
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	4615      	mov	r5, r2
 80038d2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80038d6:	4590      	cmp	r8, r2
 80038d8:	f300 80b8 	bgt.w	8003a4c <__kernel_rem_pio2+0x32c>
 80038dc:	f1bb 0f00 	cmp.w	fp, #0
 80038e0:	dd07      	ble.n	80038f2 <__kernel_rem_pio2+0x1d2>
 80038e2:	f1bb 0f01 	cmp.w	fp, #1
 80038e6:	f000 80bf 	beq.w	8003a68 <__kernel_rem_pio2+0x348>
 80038ea:	f1bb 0f02 	cmp.w	fp, #2
 80038ee:	f000 80c6 	beq.w	8003a7e <__kernel_rem_pio2+0x35e>
 80038f2:	f1b9 0f02 	cmp.w	r9, #2
 80038f6:	d14c      	bne.n	8003992 <__kernel_rem_pio2+0x272>
 80038f8:	4632      	mov	r2, r6
 80038fa:	463b      	mov	r3, r7
 80038fc:	494e      	ldr	r1, [pc, #312]	@ (8003a38 <__kernel_rem_pio2+0x318>)
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fc fcc6 	bl	8000290 <__aeabi_dsub>
 8003904:	4606      	mov	r6, r0
 8003906:	460f      	mov	r7, r1
 8003908:	2d00      	cmp	r5, #0
 800390a:	d042      	beq.n	8003992 <__kernel_rem_pio2+0x272>
 800390c:	4658      	mov	r0, fp
 800390e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003a28 <__kernel_rem_pio2+0x308>
 8003912:	f000 fa5d 	bl	8003dd0 <scalbn>
 8003916:	4630      	mov	r0, r6
 8003918:	4639      	mov	r1, r7
 800391a:	ec53 2b10 	vmov	r2, r3, d0
 800391e:	f7fc fcb7 	bl	8000290 <__aeabi_dsub>
 8003922:	4606      	mov	r6, r0
 8003924:	460f      	mov	r7, r1
 8003926:	e034      	b.n	8003992 <__kernel_rem_pio2+0x272>
 8003928:	4b44      	ldr	r3, [pc, #272]	@ (8003a3c <__kernel_rem_pio2+0x31c>)
 800392a:	2200      	movs	r2, #0
 800392c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003930:	f7fc fe66 	bl	8000600 <__aeabi_dmul>
 8003934:	f7fd f8fe 	bl	8000b34 <__aeabi_d2iz>
 8003938:	f7fc fdf8 	bl	800052c <__aeabi_i2d>
 800393c:	4b40      	ldr	r3, [pc, #256]	@ (8003a40 <__kernel_rem_pio2+0x320>)
 800393e:	2200      	movs	r2, #0
 8003940:	4606      	mov	r6, r0
 8003942:	460f      	mov	r7, r1
 8003944:	f7fc fe5c 	bl	8000600 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003950:	f7fc fc9e 	bl	8000290 <__aeabi_dsub>
 8003954:	f7fd f8ee 	bl	8000b34 <__aeabi_d2iz>
 8003958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800395c:	f849 0b04 	str.w	r0, [r9], #4
 8003960:	4639      	mov	r1, r7
 8003962:	4630      	mov	r0, r6
 8003964:	f7fc fc96 	bl	8000294 <__adddf3>
 8003968:	f10a 3aff 	add.w	sl, sl, #4294967295
 800396c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003970:	e75d      	b.n	800382e <__kernel_rem_pio2+0x10e>
 8003972:	d107      	bne.n	8003984 <__kernel_rem_pio2+0x264>
 8003974:	f108 33ff 	add.w	r3, r8, #4294967295
 8003978:	aa0c      	add	r2, sp, #48	@ 0x30
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003982:	e79e      	b.n	80038c2 <__kernel_rem_pio2+0x1a2>
 8003984:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <__kernel_rem_pio2+0x324>)
 8003986:	2200      	movs	r2, #0
 8003988:	f7fd f8c0 	bl	8000b0c <__aeabi_dcmpge>
 800398c:	2800      	cmp	r0, #0
 800398e:	d143      	bne.n	8003a18 <__kernel_rem_pio2+0x2f8>
 8003990:	4681      	mov	r9, r0
 8003992:	2200      	movs	r2, #0
 8003994:	2300      	movs	r3, #0
 8003996:	4630      	mov	r0, r6
 8003998:	4639      	mov	r1, r7
 800399a:	f7fd f899 	bl	8000ad0 <__aeabi_dcmpeq>
 800399e:	2800      	cmp	r0, #0
 80039a0:	f000 80bf 	beq.w	8003b22 <__kernel_rem_pio2+0x402>
 80039a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80039a8:	2200      	movs	r2, #0
 80039aa:	9900      	ldr	r1, [sp, #0]
 80039ac:	428b      	cmp	r3, r1
 80039ae:	da6e      	bge.n	8003a8e <__kernel_rem_pio2+0x36e>
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	f000 8089 	beq.w	8003ac8 <__kernel_rem_pio2+0x3a8>
 80039b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80039ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80039bc:	f1ab 0b18 	sub.w	fp, fp, #24
 80039c0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f6      	beq.n	80039b6 <__kernel_rem_pio2+0x296>
 80039c8:	4658      	mov	r0, fp
 80039ca:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003a28 <__kernel_rem_pio2+0x308>
 80039ce:	f000 f9ff 	bl	8003dd0 <scalbn>
 80039d2:	f108 0301 	add.w	r3, r8, #1
 80039d6:	00da      	lsls	r2, r3, #3
 80039d8:	9205      	str	r2, [sp, #20]
 80039da:	ec55 4b10 	vmov	r4, r5, d0
 80039de:	aa70      	add	r2, sp, #448	@ 0x1c0
 80039e0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003a3c <__kernel_rem_pio2+0x31c>
 80039e4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80039e8:	4646      	mov	r6, r8
 80039ea:	f04f 0a00 	mov.w	sl, #0
 80039ee:	2e00      	cmp	r6, #0
 80039f0:	f280 80cf 	bge.w	8003b92 <__kernel_rem_pio2+0x472>
 80039f4:	4644      	mov	r4, r8
 80039f6:	2c00      	cmp	r4, #0
 80039f8:	f2c0 80fd 	blt.w	8003bf6 <__kernel_rem_pio2+0x4d6>
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <__kernel_rem_pio2+0x328>)
 80039fe:	461f      	mov	r7, r3
 8003a00:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003a02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a06:	9306      	str	r3, [sp, #24]
 8003a08:	f04f 0a00 	mov.w	sl, #0
 8003a0c:	f04f 0b00 	mov.w	fp, #0
 8003a10:	2600      	movs	r6, #0
 8003a12:	eba8 0504 	sub.w	r5, r8, r4
 8003a16:	e0e2      	b.n	8003bde <__kernel_rem_pio2+0x4be>
 8003a18:	f04f 0902 	mov.w	r9, #2
 8003a1c:	e754      	b.n	80038c8 <__kernel_rem_pio2+0x1a8>
 8003a1e:	bf00      	nop
	...
 8003a2c:	3ff00000 	.word	0x3ff00000
 8003a30:	080042f8 	.word	0x080042f8
 8003a34:	40200000 	.word	0x40200000
 8003a38:	3ff00000 	.word	0x3ff00000
 8003a3c:	3e700000 	.word	0x3e700000
 8003a40:	41700000 	.word	0x41700000
 8003a44:	3fe00000 	.word	0x3fe00000
 8003a48:	080042b8 	.word	0x080042b8
 8003a4c:	f854 3b04 	ldr.w	r3, [r4], #4
 8003a50:	b945      	cbnz	r5, 8003a64 <__kernel_rem_pio2+0x344>
 8003a52:	b123      	cbz	r3, 8003a5e <__kernel_rem_pio2+0x33e>
 8003a54:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003a58:	f844 3c04 	str.w	r3, [r4, #-4]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	3201      	adds	r2, #1
 8003a60:	461d      	mov	r5, r3
 8003a62:	e738      	b.n	80038d6 <__kernel_rem_pio2+0x1b6>
 8003a64:	1acb      	subs	r3, r1, r3
 8003a66:	e7f7      	b.n	8003a58 <__kernel_rem_pio2+0x338>
 8003a68:	f108 32ff 	add.w	r2, r8, #4294967295
 8003a6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a72:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003a76:	a90c      	add	r1, sp, #48	@ 0x30
 8003a78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003a7c:	e739      	b.n	80038f2 <__kernel_rem_pio2+0x1d2>
 8003a7e:	f108 32ff 	add.w	r2, r8, #4294967295
 8003a82:	ab0c      	add	r3, sp, #48	@ 0x30
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003a8c:	e7f3      	b.n	8003a76 <__kernel_rem_pio2+0x356>
 8003a8e:	a90c      	add	r1, sp, #48	@ 0x30
 8003a90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	430a      	orrs	r2, r1
 8003a98:	e787      	b.n	80039aa <__kernel_rem_pio2+0x28a>
 8003a9a:	3401      	adds	r4, #1
 8003a9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d0fa      	beq.n	8003a9a <__kernel_rem_pio2+0x37a>
 8003aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003aa6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003aaa:	eb0d 0503 	add.w	r5, sp, r3
 8003aae:	9b06      	ldr	r3, [sp, #24]
 8003ab0:	aa20      	add	r2, sp, #128	@ 0x80
 8003ab2:	4443      	add	r3, r8
 8003ab4:	f108 0701 	add.w	r7, r8, #1
 8003ab8:	3d98      	subs	r5, #152	@ 0x98
 8003aba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003abe:	4444      	add	r4, r8
 8003ac0:	42bc      	cmp	r4, r7
 8003ac2:	da04      	bge.n	8003ace <__kernel_rem_pio2+0x3ae>
 8003ac4:	46a0      	mov	r8, r4
 8003ac6:	e6a2      	b.n	800380e <__kernel_rem_pio2+0xee>
 8003ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003aca:	2401      	movs	r4, #1
 8003acc:	e7e6      	b.n	8003a9c <__kernel_rem_pio2+0x37c>
 8003ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ad0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003ad4:	f7fc fd2a 	bl	800052c <__aeabi_i2d>
 8003ad8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8003da0 <__kernel_rem_pio2+0x680>
 8003adc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ae8:	46b2      	mov	sl, r6
 8003aea:	f04f 0800 	mov.w	r8, #0
 8003aee:	9b05      	ldr	r3, [sp, #20]
 8003af0:	4598      	cmp	r8, r3
 8003af2:	dd05      	ble.n	8003b00 <__kernel_rem_pio2+0x3e0>
 8003af4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003af8:	3701      	adds	r7, #1
 8003afa:	eca5 7b02 	vstmia	r5!, {d7}
 8003afe:	e7df      	b.n	8003ac0 <__kernel_rem_pio2+0x3a0>
 8003b00:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003b04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003b08:	f7fc fd7a 	bl	8000600 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b14:	f7fc fbbe 	bl	8000294 <__adddf3>
 8003b18:	f108 0801 	add.w	r8, r8, #1
 8003b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b20:	e7e5      	b.n	8003aee <__kernel_rem_pio2+0x3ce>
 8003b22:	f1cb 0000 	rsb	r0, fp, #0
 8003b26:	ec47 6b10 	vmov	d0, r6, r7
 8003b2a:	f000 f951 	bl	8003dd0 <scalbn>
 8003b2e:	ec55 4b10 	vmov	r4, r5, d0
 8003b32:	4b9d      	ldr	r3, [pc, #628]	@ (8003da8 <__kernel_rem_pio2+0x688>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f7fc ffe7 	bl	8000b0c <__aeabi_dcmpge>
 8003b3e:	b300      	cbz	r0, 8003b82 <__kernel_rem_pio2+0x462>
 8003b40:	4b9a      	ldr	r3, [pc, #616]	@ (8003dac <__kernel_rem_pio2+0x68c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fc fd5a 	bl	8000600 <__aeabi_dmul>
 8003b4c:	f7fc fff2 	bl	8000b34 <__aeabi_d2iz>
 8003b50:	4606      	mov	r6, r0
 8003b52:	f7fc fceb 	bl	800052c <__aeabi_i2d>
 8003b56:	4b94      	ldr	r3, [pc, #592]	@ (8003da8 <__kernel_rem_pio2+0x688>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f7fc fd51 	bl	8000600 <__aeabi_dmul>
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4602      	mov	r2, r0
 8003b62:	4629      	mov	r1, r5
 8003b64:	4620      	mov	r0, r4
 8003b66:	f7fc fb93 	bl	8000290 <__aeabi_dsub>
 8003b6a:	f7fc ffe3 	bl	8000b34 <__aeabi_d2iz>
 8003b6e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b70:	f10b 0b18 	add.w	fp, fp, #24
 8003b74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003b78:	f108 0801 	add.w	r8, r8, #1
 8003b7c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8003b80:	e722      	b.n	80039c8 <__kernel_rem_pio2+0x2a8>
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc ffd5 	bl	8000b34 <__aeabi_d2iz>
 8003b8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003b90:	e71a      	b.n	80039c8 <__kernel_rem_pio2+0x2a8>
 8003b92:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003b98:	f7fc fcc8 	bl	800052c <__aeabi_i2d>
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	462b      	mov	r3, r5
 8003ba0:	f7fc fd2e 	bl	8000600 <__aeabi_dmul>
 8003ba4:	4652      	mov	r2, sl
 8003ba6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003baa:	465b      	mov	r3, fp
 8003bac:	4620      	mov	r0, r4
 8003bae:	4629      	mov	r1, r5
 8003bb0:	f7fc fd26 	bl	8000600 <__aeabi_dmul>
 8003bb4:	3e01      	subs	r6, #1
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	460d      	mov	r5, r1
 8003bba:	e718      	b.n	80039ee <__kernel_rem_pio2+0x2ce>
 8003bbc:	9906      	ldr	r1, [sp, #24]
 8003bbe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003bc2:	9106      	str	r1, [sp, #24]
 8003bc4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003bc8:	f7fc fd1a 	bl	8000600 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4650      	mov	r0, sl
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	f7fc fb5e 	bl	8000294 <__adddf3>
 8003bd8:	3601      	adds	r6, #1
 8003bda:	4682      	mov	sl, r0
 8003bdc:	468b      	mov	fp, r1
 8003bde:	9b00      	ldr	r3, [sp, #0]
 8003be0:	429e      	cmp	r6, r3
 8003be2:	dc01      	bgt.n	8003be8 <__kernel_rem_pio2+0x4c8>
 8003be4:	42b5      	cmp	r5, r6
 8003be6:	dae9      	bge.n	8003bbc <__kernel_rem_pio2+0x49c>
 8003be8:	ab48      	add	r3, sp, #288	@ 0x120
 8003bea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003bee:	e9c5 ab00 	strd	sl, fp, [r5]
 8003bf2:	3c01      	subs	r4, #1
 8003bf4:	e6ff      	b.n	80039f6 <__kernel_rem_pio2+0x2d6>
 8003bf6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	dc0b      	bgt.n	8003c14 <__kernel_rem_pio2+0x4f4>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dc39      	bgt.n	8003c74 <__kernel_rem_pio2+0x554>
 8003c00:	d05d      	beq.n	8003cbe <__kernel_rem_pio2+0x59e>
 8003c02:	9b02      	ldr	r3, [sp, #8]
 8003c04:	f003 0007 	and.w	r0, r3, #7
 8003c08:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003c0c:	ecbd 8b02 	vpop	{d8}
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d1f3      	bne.n	8003c02 <__kernel_rem_pio2+0x4e2>
 8003c1a:	9b05      	ldr	r3, [sp, #20]
 8003c1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c20:	eb0d 0403 	add.w	r4, sp, r3
 8003c24:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8003c28:	4625      	mov	r5, r4
 8003c2a:	46c2      	mov	sl, r8
 8003c2c:	f1ba 0f00 	cmp.w	sl, #0
 8003c30:	f1a5 0508 	sub.w	r5, r5, #8
 8003c34:	dc6b      	bgt.n	8003d0e <__kernel_rem_pio2+0x5ee>
 8003c36:	4645      	mov	r5, r8
 8003c38:	2d01      	cmp	r5, #1
 8003c3a:	f1a4 0408 	sub.w	r4, r4, #8
 8003c3e:	f300 8087 	bgt.w	8003d50 <__kernel_rem_pio2+0x630>
 8003c42:	9c05      	ldr	r4, [sp, #20]
 8003c44:	ab48      	add	r3, sp, #288	@ 0x120
 8003c46:	441c      	add	r4, r3
 8003c48:	2000      	movs	r0, #0
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f1b8 0f01 	cmp.w	r8, #1
 8003c50:	f300 809c 	bgt.w	8003d8c <__kernel_rem_pio2+0x66c>
 8003c54:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8003c58:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003c5c:	f1b9 0f00 	cmp.w	r9, #0
 8003c60:	f040 80a6 	bne.w	8003db0 <__kernel_rem_pio2+0x690>
 8003c64:	9b04      	ldr	r3, [sp, #16]
 8003c66:	e9c3 7800 	strd	r7, r8, [r3]
 8003c6a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003c6e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003c72:	e7c6      	b.n	8003c02 <__kernel_rem_pio2+0x4e2>
 8003c74:	9d05      	ldr	r5, [sp, #20]
 8003c76:	ab48      	add	r3, sp, #288	@ 0x120
 8003c78:	441d      	add	r5, r3
 8003c7a:	4644      	mov	r4, r8
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2c00      	cmp	r4, #0
 8003c82:	da35      	bge.n	8003cf0 <__kernel_rem_pio2+0x5d0>
 8003c84:	f1b9 0f00 	cmp.w	r9, #0
 8003c88:	d038      	beq.n	8003cfc <__kernel_rem_pio2+0x5dc>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003c90:	9c04      	ldr	r4, [sp, #16]
 8003c92:	e9c4 2300 	strd	r2, r3, [r4]
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003c9e:	f7fc faf7 	bl	8000290 <__aeabi_dsub>
 8003ca2:	ad4a      	add	r5, sp, #296	@ 0x128
 8003ca4:	2401      	movs	r4, #1
 8003ca6:	45a0      	cmp	r8, r4
 8003ca8:	da2b      	bge.n	8003d02 <__kernel_rem_pio2+0x5e2>
 8003caa:	f1b9 0f00 	cmp.w	r9, #0
 8003cae:	d002      	beq.n	8003cb6 <__kernel_rem_pio2+0x596>
 8003cb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	9b04      	ldr	r3, [sp, #16]
 8003cb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003cbc:	e7a1      	b.n	8003c02 <__kernel_rem_pio2+0x4e2>
 8003cbe:	9c05      	ldr	r4, [sp, #20]
 8003cc0:	ab48      	add	r3, sp, #288	@ 0x120
 8003cc2:	441c      	add	r4, r3
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f1b8 0f00 	cmp.w	r8, #0
 8003ccc:	da09      	bge.n	8003ce2 <__kernel_rem_pio2+0x5c2>
 8003cce:	f1b9 0f00 	cmp.w	r9, #0
 8003cd2:	d002      	beq.n	8003cda <__kernel_rem_pio2+0x5ba>
 8003cd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003cd8:	4619      	mov	r1, r3
 8003cda:	9b04      	ldr	r3, [sp, #16]
 8003cdc:	e9c3 0100 	strd	r0, r1, [r3]
 8003ce0:	e78f      	b.n	8003c02 <__kernel_rem_pio2+0x4e2>
 8003ce2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ce6:	f7fc fad5 	bl	8000294 <__adddf3>
 8003cea:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cee:	e7eb      	b.n	8003cc8 <__kernel_rem_pio2+0x5a8>
 8003cf0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003cf4:	f7fc face 	bl	8000294 <__adddf3>
 8003cf8:	3c01      	subs	r4, #1
 8003cfa:	e7c1      	b.n	8003c80 <__kernel_rem_pio2+0x560>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e7c6      	b.n	8003c90 <__kernel_rem_pio2+0x570>
 8003d02:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003d06:	f7fc fac5 	bl	8000294 <__adddf3>
 8003d0a:	3401      	adds	r4, #1
 8003d0c:	e7cb      	b.n	8003ca6 <__kernel_rem_pio2+0x586>
 8003d0e:	ed95 7b00 	vldr	d7, [r5]
 8003d12:	ed8d 7b00 	vstr	d7, [sp]
 8003d16:	ed95 7b02 	vldr	d7, [r5, #8]
 8003d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d1e:	ec53 2b17 	vmov	r2, r3, d7
 8003d22:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d26:	f7fc fab5 	bl	8000294 <__adddf3>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4606      	mov	r6, r0
 8003d30:	460f      	mov	r7, r1
 8003d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d36:	f7fc faab 	bl	8000290 <__aeabi_dsub>
 8003d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d3e:	f7fc faa9 	bl	8000294 <__adddf3>
 8003d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d46:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003d4a:	e9c5 6700 	strd	r6, r7, [r5]
 8003d4e:	e76d      	b.n	8003c2c <__kernel_rem_pio2+0x50c>
 8003d50:	ed94 7b00 	vldr	d7, [r4]
 8003d54:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8003d58:	ec51 0b17 	vmov	r0, r1, d7
 8003d5c:	4652      	mov	r2, sl
 8003d5e:	465b      	mov	r3, fp
 8003d60:	ed8d 7b00 	vstr	d7, [sp]
 8003d64:	f7fc fa96 	bl	8000294 <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	460f      	mov	r7, r1
 8003d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d74:	f7fc fa8c 	bl	8000290 <__aeabi_dsub>
 8003d78:	4652      	mov	r2, sl
 8003d7a:	465b      	mov	r3, fp
 8003d7c:	f7fc fa8a 	bl	8000294 <__adddf3>
 8003d80:	3d01      	subs	r5, #1
 8003d82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d86:	e9c4 6700 	strd	r6, r7, [r4]
 8003d8a:	e755      	b.n	8003c38 <__kernel_rem_pio2+0x518>
 8003d8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003d90:	f7fc fa80 	bl	8000294 <__adddf3>
 8003d94:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d98:	e758      	b.n	8003c4c <__kernel_rem_pio2+0x52c>
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w
	...
 8003da8:	41700000 	.word	0x41700000
 8003dac:	3e700000 	.word	0x3e700000
 8003db0:	9b04      	ldr	r3, [sp, #16]
 8003db2:	9a04      	ldr	r2, [sp, #16]
 8003db4:	601f      	str	r7, [r3, #0]
 8003db6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8003dba:	605c      	str	r4, [r3, #4]
 8003dbc:	609d      	str	r5, [r3, #8]
 8003dbe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003dc2:	60d3      	str	r3, [r2, #12]
 8003dc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003dc8:	6110      	str	r0, [r2, #16]
 8003dca:	6153      	str	r3, [r2, #20]
 8003dcc:	e719      	b.n	8003c02 <__kernel_rem_pio2+0x4e2>
 8003dce:	bf00      	nop

08003dd0 <scalbn>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	ec55 4b10 	vmov	r4, r5, d0
 8003dd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003dda:	4606      	mov	r6, r0
 8003ddc:	462b      	mov	r3, r5
 8003dde:	b991      	cbnz	r1, 8003e06 <scalbn+0x36>
 8003de0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003de4:	4323      	orrs	r3, r4
 8003de6:	d03d      	beq.n	8003e64 <scalbn+0x94>
 8003de8:	4b35      	ldr	r3, [pc, #212]	@ (8003ec0 <scalbn+0xf0>)
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	2200      	movs	r2, #0
 8003df0:	f7fc fc06 	bl	8000600 <__aeabi_dmul>
 8003df4:	4b33      	ldr	r3, [pc, #204]	@ (8003ec4 <scalbn+0xf4>)
 8003df6:	429e      	cmp	r6, r3
 8003df8:	4604      	mov	r4, r0
 8003dfa:	460d      	mov	r5, r1
 8003dfc:	da0f      	bge.n	8003e1e <scalbn+0x4e>
 8003dfe:	a328      	add	r3, pc, #160	@ (adr r3, 8003ea0 <scalbn+0xd0>)
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	e01e      	b.n	8003e44 <scalbn+0x74>
 8003e06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	d10b      	bne.n	8003e26 <scalbn+0x56>
 8003e0e:	4622      	mov	r2, r4
 8003e10:	4620      	mov	r0, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	f7fc fa3e 	bl	8000294 <__adddf3>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	460d      	mov	r5, r1
 8003e1c:	e022      	b.n	8003e64 <scalbn+0x94>
 8003e1e:	460b      	mov	r3, r1
 8003e20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003e24:	3936      	subs	r1, #54	@ 0x36
 8003e26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003e2a:	4296      	cmp	r6, r2
 8003e2c:	dd0d      	ble.n	8003e4a <scalbn+0x7a>
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	a11d      	add	r1, pc, #116	@ (adr r1, 8003ea8 <scalbn+0xd8>)
 8003e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e36:	da02      	bge.n	8003e3e <scalbn+0x6e>
 8003e38:	a11d      	add	r1, pc, #116	@ (adr r1, 8003eb0 <scalbn+0xe0>)
 8003e3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e3e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003ea8 <scalbn+0xd8>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fbdc 	bl	8000600 <__aeabi_dmul>
 8003e48:	e7e6      	b.n	8003e18 <scalbn+0x48>
 8003e4a:	1872      	adds	r2, r6, r1
 8003e4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003e50:	428a      	cmp	r2, r1
 8003e52:	dcec      	bgt.n	8003e2e <scalbn+0x5e>
 8003e54:	2a00      	cmp	r2, #0
 8003e56:	dd08      	ble.n	8003e6a <scalbn+0x9a>
 8003e58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003e5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003e60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003e64:	ec45 4b10 	vmov	d0, r4, r5
 8003e68:	bd70      	pop	{r4, r5, r6, pc}
 8003e6a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003e6e:	da08      	bge.n	8003e82 <scalbn+0xb2>
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	a10b      	add	r1, pc, #44	@ (adr r1, 8003ea0 <scalbn+0xd0>)
 8003e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e78:	dac1      	bge.n	8003dfe <scalbn+0x2e>
 8003e7a:	a10f      	add	r1, pc, #60	@ (adr r1, 8003eb8 <scalbn+0xe8>)
 8003e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e80:	e7bd      	b.n	8003dfe <scalbn+0x2e>
 8003e82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003e86:	3236      	adds	r2, #54	@ 0x36
 8003e88:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003e8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003e90:	4620      	mov	r0, r4
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <scalbn+0xf8>)
 8003e94:	4629      	mov	r1, r5
 8003e96:	2200      	movs	r2, #0
 8003e98:	e7d4      	b.n	8003e44 <scalbn+0x74>
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	c2f8f359 	.word	0xc2f8f359
 8003ea4:	01a56e1f 	.word	0x01a56e1f
 8003ea8:	8800759c 	.word	0x8800759c
 8003eac:	7e37e43c 	.word	0x7e37e43c
 8003eb0:	8800759c 	.word	0x8800759c
 8003eb4:	fe37e43c 	.word	0xfe37e43c
 8003eb8:	c2f8f359 	.word	0xc2f8f359
 8003ebc:	81a56e1f 	.word	0x81a56e1f
 8003ec0:	43500000 	.word	0x43500000
 8003ec4:	ffff3cb0 	.word	0xffff3cb0
 8003ec8:	3c900000 	.word	0x3c900000
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <floor>:
 8003ed0:	ec51 0b10 	vmov	r0, r1, d0
 8003ed4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003edc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8003ee0:	2e13      	cmp	r6, #19
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	4680      	mov	r8, r0
 8003ee8:	dc34      	bgt.n	8003f54 <floor+0x84>
 8003eea:	2e00      	cmp	r6, #0
 8003eec:	da17      	bge.n	8003f1e <floor+0x4e>
 8003eee:	a332      	add	r3, pc, #200	@ (adr r3, 8003fb8 <floor+0xe8>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc f9ce 	bl	8000294 <__adddf3>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2300      	movs	r3, #0
 8003efc:	f7fc fe10 	bl	8000b20 <__aeabi_dcmpgt>
 8003f00:	b150      	cbz	r0, 8003f18 <floor+0x48>
 8003f02:	2c00      	cmp	r4, #0
 8003f04:	da55      	bge.n	8003fb2 <floor+0xe2>
 8003f06:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003f0a:	432c      	orrs	r4, r5
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	42ac      	cmp	r4, r5
 8003f10:	4c2b      	ldr	r4, [pc, #172]	@ (8003fc0 <floor+0xf0>)
 8003f12:	bf08      	it	eq
 8003f14:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	e023      	b.n	8003f66 <floor+0x96>
 8003f1e:	4f29      	ldr	r7, [pc, #164]	@ (8003fc4 <floor+0xf4>)
 8003f20:	4137      	asrs	r7, r6
 8003f22:	ea01 0307 	and.w	r3, r1, r7
 8003f26:	4303      	orrs	r3, r0
 8003f28:	d01d      	beq.n	8003f66 <floor+0x96>
 8003f2a:	a323      	add	r3, pc, #140	@ (adr r3, 8003fb8 <floor+0xe8>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f7fc f9b0 	bl	8000294 <__adddf3>
 8003f34:	2200      	movs	r2, #0
 8003f36:	2300      	movs	r3, #0
 8003f38:	f7fc fdf2 	bl	8000b20 <__aeabi_dcmpgt>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0eb      	beq.n	8003f18 <floor+0x48>
 8003f40:	2c00      	cmp	r4, #0
 8003f42:	bfbe      	ittt	lt
 8003f44:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8003f48:	4133      	asrlt	r3, r6
 8003f4a:	18e4      	addlt	r4, r4, r3
 8003f4c:	ea24 0407 	bic.w	r4, r4, r7
 8003f50:	2500      	movs	r5, #0
 8003f52:	e7e1      	b.n	8003f18 <floor+0x48>
 8003f54:	2e33      	cmp	r6, #51	@ 0x33
 8003f56:	dd0a      	ble.n	8003f6e <floor+0x9e>
 8003f58:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003f5c:	d103      	bne.n	8003f66 <floor+0x96>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	f7fc f997 	bl	8000294 <__adddf3>
 8003f66:	ec41 0b10 	vmov	d0, r0, r1
 8003f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f6e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8003f72:	f04f 37ff 	mov.w	r7, #4294967295
 8003f76:	40df      	lsrs	r7, r3
 8003f78:	4207      	tst	r7, r0
 8003f7a:	d0f4      	beq.n	8003f66 <floor+0x96>
 8003f7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003fb8 <floor+0xe8>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc f987 	bl	8000294 <__adddf3>
 8003f86:	2200      	movs	r2, #0
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f7fc fdc9 	bl	8000b20 <__aeabi_dcmpgt>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0c2      	beq.n	8003f18 <floor+0x48>
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	da0a      	bge.n	8003fac <floor+0xdc>
 8003f96:	2e14      	cmp	r6, #20
 8003f98:	d101      	bne.n	8003f9e <floor+0xce>
 8003f9a:	3401      	adds	r4, #1
 8003f9c:	e006      	b.n	8003fac <floor+0xdc>
 8003f9e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	40b3      	lsls	r3, r6
 8003fa6:	441d      	add	r5, r3
 8003fa8:	4545      	cmp	r5, r8
 8003faa:	d3f6      	bcc.n	8003f9a <floor+0xca>
 8003fac:	ea25 0507 	bic.w	r5, r5, r7
 8003fb0:	e7b2      	b.n	8003f18 <floor+0x48>
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	462c      	mov	r4, r5
 8003fb6:	e7af      	b.n	8003f18 <floor+0x48>
 8003fb8:	8800759c 	.word	0x8800759c
 8003fbc:	7e37e43c 	.word	0x7e37e43c
 8003fc0:	bff00000 	.word	0xbff00000
 8003fc4:	000fffff 	.word	0x000fffff

08003fc8 <_init>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr

08003fd4 <_fini>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr
