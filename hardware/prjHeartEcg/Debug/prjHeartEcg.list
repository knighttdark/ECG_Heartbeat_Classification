
prjHeartEcg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002ee8  08002ee8  00003ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f40  08002f40  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002f40  08002f40  00003f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f48  08002f48  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f48  08002f48  00003f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f4c  08002f4c  00003f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002f50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001bc  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20000224  20000224  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000055b3  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000138d  00000000  00000000  0000964b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  0000a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003d7  00000000  00000000  0000af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021af9  00000000  00000000  0000b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006c57  00000000  00000000  0002cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0969  00000000  00000000  00033a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001043b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001be4  00000000  00000000  001043f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00105fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ed0 	.word	0x08002ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002ed0 	.word	0x08002ed0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fa2c 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f824 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f8de 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c0:	f000 f88a 	bl	80006d8 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <main+0x48>)
 80005c6:	f000 fafd 	bl	8000bc4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80005ca:	210a      	movs	r1, #10
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <main+0x48>)
 80005ce:	f000 fbcb 	bl	8000d68 <HAL_ADC_PollForConversion>
	  ecg_raw = HAL_ADC_GetValue(&hadc1);
 80005d2:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <main+0x48>)
 80005d4:	f000 fc53 	bl	8000e7e <HAL_ADC_GetValue>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <main+0x4c>)
 80005de:	801a      	strh	r2, [r3, #0]
	  printf("ECG raw value: %d\r\n", ecg_raw);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <main+0x4c>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <main+0x50>)
 80005e8:	f001 fe8a 	bl	8002300 <iprintf>
	  HAL_Delay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f0:	f000 fa80 	bl	8000af4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005f4:	bf00      	nop
 80005f6:	e7e5      	b.n	80005c4 <main+0x14>
 80005f8:	20000084 	.word	0x20000084
 80005fc:	200000cc 	.word	0x200000cc
 8000600:	08002ee8 	.word	0x08002ee8

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fec9 	bl	80023aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000678:	23a8      	movs	r3, #168	@ 0xa8
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f8a5 	bl	80017d8 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f8a8 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2105      	movs	r1, #5
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fb06 	bl	8001cc8 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 f891 	bl	80007e8 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <MX_ADC1_Init+0x9c>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_ADC1_Init+0x98>)
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_ADC1_Init+0xa0>)
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000726:	2201      	movs	r2, #1
 8000728:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000734:	2201      	movs	r2, #1
 8000736:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000738:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_ADC1_Init+0x98>)
 800073a:	f000 f9ff 	bl	8000b3c <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000744:	f000 f850 	bl	80007e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_ADC1_Init+0x98>)
 800075a:	f000 fb9d 	bl	8000e98 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000764:	f000 f840 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000084 	.word	0x20000084
 8000774:	40012000 	.word	0x40012000
 8000778:	0f000001 	.word	0x0f000001

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_GPIO_Init+0x30>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <MX_GPIO_Init+0x30>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_GPIO_Init+0x30>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e009      	b.n	80007d6 <_write+0x26>
		ITM_SendChar(*ptr++);
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	60ba      	str	r2, [r7, #8]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fec8 	bl	8000560 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbf1      	blt.n	80007c2 <_write+0x12>
	}
	return len;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000808:	6453      	str	r3, [r2, #68]	@ 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	@ 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a17      	ldr	r2, [pc, #92]	@ (80008c0 <HAL_ADC_MspInit+0x7c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d127      	bne.n	80008b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <HAL_ADC_MspInit+0x80>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <HAL_ADC_MspInit+0x80>)
 8000870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000874:	6453      	str	r3, [r2, #68]	@ 0x44
 8000876:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <HAL_ADC_MspInit+0x80>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_ADC_MspInit+0x80>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a0e      	ldr	r2, [pc, #56]	@ (80008c4 <HAL_ADC_MspInit+0x80>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_ADC_MspInit+0x80>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	2303      	movs	r3, #3
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <HAL_ADC_MspInit+0x84>)
 80008b2:	f000 fdf5 	bl	80014a0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40012000 	.word	0x40012000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <MemManage_Handler+0x4>

080008e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000922:	f000 f8c7 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f001 fd84 	bl	8002468 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2001c000 	.word	0x2001c000
 800098c:	00000800 	.word	0x00000800
 8000990:	200000d0 	.word	0x200000d0
 8000994:	20000228 	.word	0x20000228

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f001 fd43 	bl	8002474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fddf 	bl	80005b0 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a00:	08002f50 	.word	0x08002f50
  ldr r2, =_sbss
 8000a04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a08:	20000224 	.word	0x20000224

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 fcfd 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fed6 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fd07 	bl	8001486 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 fcdd 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200000d4 	.word	0x200000d4

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000d4 	.word	0x200000d4

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e033      	b.n	8000bba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d109      	bne.n	8000b6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fe72 	bl	8000844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d118      	bne.n	8000bac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b82:	f023 0302 	bic.w	r3, r3, #2
 8000b86:	f043 0202 	orr.w	r2, r3, #2
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 faa4 	bl	80010dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f023 0303 	bic.w	r3, r3, #3
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000baa:	e001      	b.n	8000bb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d101      	bne.n	8000bde <HAL_ADC_Start+0x1a>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e0b2      	b.n	8000d44 <HAL_ADC_Start+0x180>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d018      	beq.n	8000c26 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c04:	4b52      	ldr	r3, [pc, #328]	@ (8000d50 <HAL_ADC_Start+0x18c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a52      	ldr	r2, [pc, #328]	@ (8000d54 <HAL_ADC_Start+0x190>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9a      	lsrs	r2, r3, #18
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000c18:	e002      	b.n	8000c20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f9      	bne.n	8000c1a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d17a      	bne.n	8000d2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c72:	d106      	bne.n	8000c82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c78:	f023 0206 	bic.w	r2, r3, #6
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c80:	e002      	b.n	8000c88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c90:	4b31      	ldr	r3, [pc, #196]	@ (8000d58 <HAL_ADC_Start+0x194>)
 8000c92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000c9c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d12a      	bne.n	8000d00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a2b      	ldr	r2, [pc, #172]	@ (8000d5c <HAL_ADC_Start+0x198>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d015      	beq.n	8000ce0 <HAL_ADC_Start+0x11c>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <HAL_ADC_Start+0x19c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d105      	bne.n	8000cca <HAL_ADC_Start+0x106>
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <HAL_ADC_Start+0x194>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 031f 	and.w	r3, r3, #31
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00a      	beq.n	8000ce0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a25      	ldr	r2, [pc, #148]	@ (8000d64 <HAL_ADC_Start+0x1a0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d136      	bne.n	8000d42 <HAL_ADC_Start+0x17e>
 8000cd4:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_ADC_Start+0x194>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d130      	bne.n	8000d42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d129      	bne.n	8000d42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	e020      	b.n	8000d42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <HAL_ADC_Start+0x198>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d11b      	bne.n	8000d42 <HAL_ADC_Start+0x17e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d114      	bne.n	8000d42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	e00b      	b.n	8000d42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f043 0210 	orr.w	r2, r3, #16
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20000000 	.word	0x20000000
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	40012300 	.word	0x40012300
 8000d5c:	40012000 	.word	0x40012000
 8000d60:	40012100 	.word	0x40012100
 8000d64:	40012200 	.word	0x40012200

08000d68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d84:	d113      	bne.n	8000dae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d94:	d10b      	bne.n	8000dae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f043 0220 	orr.w	r2, r3, #32
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e063      	b.n	8000e76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dae:	f7ff fe95 	bl	8000adc <HAL_GetTick>
 8000db2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000db4:	e021      	b.n	8000dfa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d01d      	beq.n	8000dfa <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d007      	beq.n	8000dd4 <HAL_ADC_PollForConversion+0x6c>
 8000dc4:	f7ff fe8a 	bl	8000adc <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d212      	bcs.n	8000dfa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d00b      	beq.n	8000dfa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f043 0204 	orr.w	r2, r3, #4
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e03d      	b.n	8000e76 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d1d6      	bne.n	8000db6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f06f 0212 	mvn.w	r2, #18
 8000e10:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d123      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11f      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d105      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x1c>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e105      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x228>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b09      	cmp	r3, #9
 8000ec2:	d925      	bls.n	8000f10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68d9      	ldr	r1, [r3, #12]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3b1e      	subs	r3, #30
 8000eda:	2207      	movs	r2, #7
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43da      	mvns	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68d9      	ldr	r1, [r3, #12]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4403      	add	r3, r0
 8000f02:	3b1e      	subs	r3, #30
 8000f04:	409a      	lsls	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	e022      	b.n	8000f56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6919      	ldr	r1, [r3, #16]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	2207      	movs	r2, #7
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	400a      	ands	r2, r1
 8000f32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6919      	ldr	r1, [r3, #16]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4403      	add	r3, r0
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d824      	bhi.n	8000fa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b05      	subs	r3, #5
 8000f70:	221f      	movs	r2, #31
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	3b05      	subs	r3, #5
 8000f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa6:	e04c      	b.n	8001042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b0c      	cmp	r3, #12
 8000fae:	d824      	bhi.n	8000ffa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b23      	subs	r3, #35	@ 0x23
 8000fc2:	221f      	movs	r2, #31
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	400a      	ands	r2, r1
 8000fd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b23      	subs	r3, #35	@ 0x23
 8000fec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ff8:	e023      	b.n	8001042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	3b41      	subs	r3, #65	@ 0x41
 800100c:	221f      	movs	r2, #31
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	400a      	ands	r2, r1
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b41      	subs	r3, #65	@ 0x41
 8001036:	fa00 f203 	lsl.w	r2, r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <HAL_ADC_ConfigChannel+0x234>)
 8001044:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <HAL_ADC_ConfigChannel+0x238>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d109      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1cc>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b12      	cmp	r3, #18
 8001056:	d105      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_ADC_ConfigChannel+0x238>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d123      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x21e>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b10      	cmp	r3, #16
 8001074:	d003      	beq.n	800107e <HAL_ADC_ConfigChannel+0x1e6>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b11      	cmp	r3, #17
 800107c:	d11b      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b10      	cmp	r3, #16
 8001090:	d111      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_ADC_ConfigChannel+0x240>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	0c9a      	lsrs	r2, r3, #18
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80010a8:	e002      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f9      	bne.n	80010aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40012300 	.word	0x40012300
 80010d0:	40012000 	.word	0x40012000
 80010d4:	20000000 	.word	0x20000000
 80010d8:	431bde83 	.word	0x431bde83

080010dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e4:	4b79      	ldr	r3, [pc, #484]	@ (80012cc <ADC_Init+0x1f0>)
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	021a      	lsls	r2, r3, #8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6899      	ldr	r1, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116e:	4a58      	ldr	r2, [pc, #352]	@ (80012d0 <ADC_Init+0x1f4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d022      	beq.n	80011ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6899      	ldr	r1, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80011a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6899      	ldr	r1, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	e00f      	b.n	80011da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80011c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80011d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0202 	bic.w	r2, r2, #2
 80011e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6899      	ldr	r1, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e1b      	ldrb	r3, [r3, #24]
 80011f4:	005a      	lsls	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01b      	beq.n	8001240 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001216:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001226:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6859      	ldr	r1, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	3b01      	subs	r3, #1
 8001234:	035a      	lsls	r2, r3, #13
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	e007      	b.n	8001250 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800124e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800125e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	3b01      	subs	r3, #1
 800126c:	051a      	lsls	r2, r3, #20
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6899      	ldr	r1, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001292:	025a      	lsls	r2, r3, #9
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6899      	ldr	r1, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	029a      	lsls	r2, r3, #10
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	609a      	str	r2, [r3, #8]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40012300 	.word	0x40012300
 80012d0:	0f000001 	.word	0x0f000001

080012d4 <__NVIC_SetPriorityGrouping>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_SetPriority>:
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	@ (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	@ (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	@ 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff47 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff5c 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffb0 	bl	80013f4 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e16b      	b.n	8001794 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 815a 	bne.w	800178e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d130      	bne.n	8001554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 0201 	and.w	r2, r3, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b03      	cmp	r3, #3
 800155e:	d017      	beq.n	8001590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d123      	bne.n	80015e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80b4 	beq.w	800178e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b60      	ldr	r3, [pc, #384]	@ (80017ac <HAL_GPIO_Init+0x30c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	4a5f      	ldr	r2, [pc, #380]	@ (80017ac <HAL_GPIO_Init+0x30c>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001634:	6453      	str	r3, [r2, #68]	@ 0x44
 8001636:	4b5d      	ldr	r3, [pc, #372]	@ (80017ac <HAL_GPIO_Init+0x30c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001642:	4a5b      	ldr	r2, [pc, #364]	@ (80017b0 <HAL_GPIO_Init+0x310>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <HAL_GPIO_Init+0x314>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d02b      	beq.n	80016c6 <HAL_GPIO_Init+0x226>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a51      	ldr	r2, [pc, #324]	@ (80017b8 <HAL_GPIO_Init+0x318>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d025      	beq.n	80016c2 <HAL_GPIO_Init+0x222>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a50      	ldr	r2, [pc, #320]	@ (80017bc <HAL_GPIO_Init+0x31c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01f      	beq.n	80016be <HAL_GPIO_Init+0x21e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4f      	ldr	r2, [pc, #316]	@ (80017c0 <HAL_GPIO_Init+0x320>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d019      	beq.n	80016ba <HAL_GPIO_Init+0x21a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4e      	ldr	r2, [pc, #312]	@ (80017c4 <HAL_GPIO_Init+0x324>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x216>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4d      	ldr	r2, [pc, #308]	@ (80017c8 <HAL_GPIO_Init+0x328>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x212>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4c      	ldr	r2, [pc, #304]	@ (80017cc <HAL_GPIO_Init+0x32c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	@ (80017d0 <HAL_GPIO_Init+0x330>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x20a>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e00e      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016aa:	2308      	movs	r3, #8
 80016ac:	e00c      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e00a      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016b2:	2305      	movs	r3, #5
 80016b4:	e008      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e004      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016be:	2302      	movs	r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x228>
 80016c6:	2300      	movs	r3, #0
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	f002 0203 	and.w	r2, r2, #3
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4093      	lsls	r3, r2
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d8:	4935      	ldr	r1, [pc, #212]	@ (80017b0 <HAL_GPIO_Init+0x310>)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170a:	4a32      	ldr	r2, [pc, #200]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001734:	4a27      	ldr	r2, [pc, #156]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800175e:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001788:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3301      	adds	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	f67f ae90 	bls.w	80014bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40021400 	.word	0x40021400
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40021c00 	.word	0x40021c00
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e267      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d075      	beq.n	80018e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017f6:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d00c      	beq.n	800181c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b85      	ldr	r3, [pc, #532]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800180a:	2b08      	cmp	r3, #8
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180e:	4b82      	ldr	r3, [pc, #520]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800181a:	d10b      	bne.n	8001834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d05b      	beq.n	80018e0 <HAL_RCC_OscConfig+0x108>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d157      	bne.n	80018e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e242      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x74>
 800183e:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a75      	ldr	r2, [pc, #468]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0xb0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x98>
 8001856:	4b70      	ldr	r3, [pc, #448]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b6d      	ldr	r3, [pc, #436]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6c      	ldr	r2, [pc, #432]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0xb0>
 8001870:	4b69      	ldr	r3, [pc, #420]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a68      	ldr	r2, [pc, #416]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b66      	ldr	r3, [pc, #408]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a65      	ldr	r2, [pc, #404]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f924 	bl	8000adc <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff f920 	bl	8000adc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e207      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xc0>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff f910 	bl	8000adc <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff f90c 	bl	8000adc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	@ 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1f3      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0xe8>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001902:	2b08      	cmp	r3, #8
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x152>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1c7      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e03a      	b.n	80019b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCC_OscConfig+0x244>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff f8c5 	bl	8000adc <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff f8c1 	bl	8000adc <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1a8      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4925      	ldr	r1, [pc, #148]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_OscConfig+0x244>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f8a4 	bl	8000adc <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f8a0 	bl	8000adc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e187      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d036      	beq.n	8001a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_RCC_OscConfig+0x248>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f884 	bl	8000adc <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff f880 	bl	8000adc <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e167      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x200>
 80019f6:	e01b      	b.n	8001a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_RCC_OscConfig+0x248>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f86d 	bl	8000adc <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	e00e      	b.n	8001a24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff f869 	bl	8000adc <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d907      	bls.n	8001a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e150      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	42470000 	.word	0x42470000
 8001a20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ea      	bne.n	8001a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8097 	beq.w	8001b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b81      	ldr	r3, [pc, #516]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b7d      	ldr	r3, [pc, #500]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a7c      	ldr	r2, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b77      	ldr	r3, [pc, #476]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b74      	ldr	r3, [pc, #464]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a73      	ldr	r2, [pc, #460]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f829 	bl	8000adc <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff f825 	bl	8000adc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e10c      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2ea>
 8001ab4:	4b64      	ldr	r3, [pc, #400]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab8:	4a63      	ldr	r2, [pc, #396]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x30c>
 8001aca:	4b5f      	ldr	r3, [pc, #380]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	4a5e      	ldr	r2, [pc, #376]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	4a5b      	ldr	r2, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ae4:	4b58      	ldr	r3, [pc, #352]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af0:	4b55      	ldr	r3, [pc, #340]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a54      	ldr	r2, [pc, #336]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 0304 	bic.w	r3, r3, #4
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7fe ffea 	bl	8000adc <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7fe ffe6 	bl	8000adc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0cb      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	4b49      	ldr	r3, [pc, #292]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ee      	beq.n	8001b0c <HAL_RCC_OscConfig+0x334>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7fe ffd4 	bl	8000adc <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7fe ffd0 	bl	8000adc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0b5      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ee      	bne.n	8001b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a1 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d05c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d141      	bne.n	8001c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe ffa4 	bl	8000adc <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe ffa0 	bl	8000adc <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e087      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	491b      	ldr	r1, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe ff79 	bl	8000adc <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe ff75 	bl	8000adc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e05c      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x416>
 8001c0c:	e054      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe ff62 	bl	8000adc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe ff5e 	bl	8000adc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e045      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x444>
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e038      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <HAL_RCC_OscConfig+0x4ec>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d028      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0cc      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b68      	ldr	r3, [pc, #416]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d90c      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b65      	ldr	r3, [pc, #404]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b63      	ldr	r3, [pc, #396]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b8      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d1c:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a58      	ldr	r2, [pc, #352]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	494d      	ldr	r1, [pc, #308]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d044      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b47      	ldr	r3, [pc, #284]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d119      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e07f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	4b3f      	ldr	r3, [pc, #252]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e067      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4934      	ldr	r1, [pc, #208]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db8:	f7fe fe90 	bl	8000adc <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7fe fe8c 	bl	8000adc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e04f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d20c      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e032      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4916      	ldr	r1, [pc, #88]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490e      	ldr	r1, [pc, #56]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4e:	f000 f821 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490a      	ldr	r1, [pc, #40]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fdf0 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08002efc 	.word	0x08002efc
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e98:	b090      	sub	sp, #64	@ 0x40
 8001e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eac:	4b59      	ldr	r3, [pc, #356]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	f200 80a1 	bhi.w	8002000 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec6:	e09b      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ecc:	e09b      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ece:	4b53      	ldr	r3, [pc, #332]	@ (800201c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ed2:	e098      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001edc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ede:	4b4d      	ldr	r3, [pc, #308]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d028      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b4a      	ldr	r3, [pc, #296]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001efc:	2100      	movs	r1, #0
 8001efe:	4b47      	ldr	r3, [pc, #284]	@ (800201c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f00:	fb03 f201 	mul.w	r2, r3, r1
 8001f04:	2300      	movs	r3, #0
 8001f06:	fb00 f303 	mul.w	r3, r0, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a43      	ldr	r2, [pc, #268]	@ (800201c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f14:	460a      	mov	r2, r1
 8001f16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f1a:	4413      	add	r3, r2
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f20:	2200      	movs	r2, #0
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	61fa      	str	r2, [r7, #28]
 8001f26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f2e:	f7fe f99f 	bl	8000270 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4613      	mov	r3, r2
 8001f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f3a:	e053      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	2200      	movs	r2, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	617a      	str	r2, [r7, #20]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f4e:	f04f 0b00 	mov.w	fp, #0
 8001f52:	4652      	mov	r2, sl
 8001f54:	465b      	mov	r3, fp
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	0159      	lsls	r1, r3, #5
 8001f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f64:	0150      	lsls	r0, r2, #5
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f86:	ebb2 0408 	subs.w	r4, r2, r8
 8001f8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	00eb      	lsls	r3, r5, #3
 8001f98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9c:	00e2      	lsls	r2, r4, #3
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	eb14 030a 	adds.w	r3, r4, sl
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	eb45 030b 	adc.w	r3, r5, fp
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fba:	4629      	mov	r1, r5
 8001fbc:	028b      	lsls	r3, r1, #10
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	028a      	lsls	r2, r1, #10
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd8:	f7fe f94a 	bl	8000270 <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ff4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x184>)
 8002002:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002008:	4618      	mov	r0, r3
 800200a:	3740      	adds	r7, #64	@ 0x40
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	00f42400 	.word	0x00f42400
 800201c:	017d7840 	.word	0x017d7840

08002020 <sbrk_aligned>:
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	4e0f      	ldr	r6, [pc, #60]	@ (8002060 <sbrk_aligned+0x40>)
 8002024:	460c      	mov	r4, r1
 8002026:	6831      	ldr	r1, [r6, #0]
 8002028:	4605      	mov	r5, r0
 800202a:	b911      	cbnz	r1, 8002032 <sbrk_aligned+0x12>
 800202c:	f000 f9fa 	bl	8002424 <_sbrk_r>
 8002030:	6030      	str	r0, [r6, #0]
 8002032:	4621      	mov	r1, r4
 8002034:	4628      	mov	r0, r5
 8002036:	f000 f9f5 	bl	8002424 <_sbrk_r>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	d103      	bne.n	8002046 <sbrk_aligned+0x26>
 800203e:	f04f 34ff 	mov.w	r4, #4294967295
 8002042:	4620      	mov	r0, r4
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	1cc4      	adds	r4, r0, #3
 8002048:	f024 0403 	bic.w	r4, r4, #3
 800204c:	42a0      	cmp	r0, r4
 800204e:	d0f8      	beq.n	8002042 <sbrk_aligned+0x22>
 8002050:	1a21      	subs	r1, r4, r0
 8002052:	4628      	mov	r0, r5
 8002054:	f000 f9e6 	bl	8002424 <_sbrk_r>
 8002058:	3001      	adds	r0, #1
 800205a:	d1f2      	bne.n	8002042 <sbrk_aligned+0x22>
 800205c:	e7ef      	b.n	800203e <sbrk_aligned+0x1e>
 800205e:	bf00      	nop
 8002060:	200000d8 	.word	0x200000d8

08002064 <_malloc_r>:
 8002064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002068:	1ccd      	adds	r5, r1, #3
 800206a:	f025 0503 	bic.w	r5, r5, #3
 800206e:	3508      	adds	r5, #8
 8002070:	2d0c      	cmp	r5, #12
 8002072:	bf38      	it	cc
 8002074:	250c      	movcc	r5, #12
 8002076:	2d00      	cmp	r5, #0
 8002078:	4606      	mov	r6, r0
 800207a:	db01      	blt.n	8002080 <_malloc_r+0x1c>
 800207c:	42a9      	cmp	r1, r5
 800207e:	d904      	bls.n	800208a <_malloc_r+0x26>
 8002080:	230c      	movs	r3, #12
 8002082:	6033      	str	r3, [r6, #0]
 8002084:	2000      	movs	r0, #0
 8002086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800208a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002160 <_malloc_r+0xfc>
 800208e:	f000 f869 	bl	8002164 <__malloc_lock>
 8002092:	f8d8 3000 	ldr.w	r3, [r8]
 8002096:	461c      	mov	r4, r3
 8002098:	bb44      	cbnz	r4, 80020ec <_malloc_r+0x88>
 800209a:	4629      	mov	r1, r5
 800209c:	4630      	mov	r0, r6
 800209e:	f7ff ffbf 	bl	8002020 <sbrk_aligned>
 80020a2:	1c43      	adds	r3, r0, #1
 80020a4:	4604      	mov	r4, r0
 80020a6:	d158      	bne.n	800215a <_malloc_r+0xf6>
 80020a8:	f8d8 4000 	ldr.w	r4, [r8]
 80020ac:	4627      	mov	r7, r4
 80020ae:	2f00      	cmp	r7, #0
 80020b0:	d143      	bne.n	800213a <_malloc_r+0xd6>
 80020b2:	2c00      	cmp	r4, #0
 80020b4:	d04b      	beq.n	800214e <_malloc_r+0xea>
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	4639      	mov	r1, r7
 80020ba:	4630      	mov	r0, r6
 80020bc:	eb04 0903 	add.w	r9, r4, r3
 80020c0:	f000 f9b0 	bl	8002424 <_sbrk_r>
 80020c4:	4581      	cmp	r9, r0
 80020c6:	d142      	bne.n	800214e <_malloc_r+0xea>
 80020c8:	6821      	ldr	r1, [r4, #0]
 80020ca:	1a6d      	subs	r5, r5, r1
 80020cc:	4629      	mov	r1, r5
 80020ce:	4630      	mov	r0, r6
 80020d0:	f7ff ffa6 	bl	8002020 <sbrk_aligned>
 80020d4:	3001      	adds	r0, #1
 80020d6:	d03a      	beq.n	800214e <_malloc_r+0xea>
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	442b      	add	r3, r5
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	f8d8 3000 	ldr.w	r3, [r8]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	bb62      	cbnz	r2, 8002140 <_malloc_r+0xdc>
 80020e6:	f8c8 7000 	str.w	r7, [r8]
 80020ea:	e00f      	b.n	800210c <_malloc_r+0xa8>
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	1b52      	subs	r2, r2, r5
 80020f0:	d420      	bmi.n	8002134 <_malloc_r+0xd0>
 80020f2:	2a0b      	cmp	r2, #11
 80020f4:	d917      	bls.n	8002126 <_malloc_r+0xc2>
 80020f6:	1961      	adds	r1, r4, r5
 80020f8:	42a3      	cmp	r3, r4
 80020fa:	6025      	str	r5, [r4, #0]
 80020fc:	bf18      	it	ne
 80020fe:	6059      	strne	r1, [r3, #4]
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	bf08      	it	eq
 8002104:	f8c8 1000 	streq.w	r1, [r8]
 8002108:	5162      	str	r2, [r4, r5]
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	4630      	mov	r0, r6
 800210e:	f000 f82f 	bl	8002170 <__malloc_unlock>
 8002112:	f104 000b 	add.w	r0, r4, #11
 8002116:	1d23      	adds	r3, r4, #4
 8002118:	f020 0007 	bic.w	r0, r0, #7
 800211c:	1ac2      	subs	r2, r0, r3
 800211e:	bf1c      	itt	ne
 8002120:	1a1b      	subne	r3, r3, r0
 8002122:	50a3      	strne	r3, [r4, r2]
 8002124:	e7af      	b.n	8002086 <_malloc_r+0x22>
 8002126:	6862      	ldr	r2, [r4, #4]
 8002128:	42a3      	cmp	r3, r4
 800212a:	bf0c      	ite	eq
 800212c:	f8c8 2000 	streq.w	r2, [r8]
 8002130:	605a      	strne	r2, [r3, #4]
 8002132:	e7eb      	b.n	800210c <_malloc_r+0xa8>
 8002134:	4623      	mov	r3, r4
 8002136:	6864      	ldr	r4, [r4, #4]
 8002138:	e7ae      	b.n	8002098 <_malloc_r+0x34>
 800213a:	463c      	mov	r4, r7
 800213c:	687f      	ldr	r7, [r7, #4]
 800213e:	e7b6      	b.n	80020ae <_malloc_r+0x4a>
 8002140:	461a      	mov	r2, r3
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	42a3      	cmp	r3, r4
 8002146:	d1fb      	bne.n	8002140 <_malloc_r+0xdc>
 8002148:	2300      	movs	r3, #0
 800214a:	6053      	str	r3, [r2, #4]
 800214c:	e7de      	b.n	800210c <_malloc_r+0xa8>
 800214e:	230c      	movs	r3, #12
 8002150:	6033      	str	r3, [r6, #0]
 8002152:	4630      	mov	r0, r6
 8002154:	f000 f80c 	bl	8002170 <__malloc_unlock>
 8002158:	e794      	b.n	8002084 <_malloc_r+0x20>
 800215a:	6005      	str	r5, [r0, #0]
 800215c:	e7d6      	b.n	800210c <_malloc_r+0xa8>
 800215e:	bf00      	nop
 8002160:	200000dc 	.word	0x200000dc

08002164 <__malloc_lock>:
 8002164:	4801      	ldr	r0, [pc, #4]	@ (800216c <__malloc_lock+0x8>)
 8002166:	f000 b9aa 	b.w	80024be <__retarget_lock_acquire_recursive>
 800216a:	bf00      	nop
 800216c:	20000220 	.word	0x20000220

08002170 <__malloc_unlock>:
 8002170:	4801      	ldr	r0, [pc, #4]	@ (8002178 <__malloc_unlock+0x8>)
 8002172:	f000 b9a5 	b.w	80024c0 <__retarget_lock_release_recursive>
 8002176:	bf00      	nop
 8002178:	20000220 	.word	0x20000220

0800217c <std>:
 800217c:	2300      	movs	r3, #0
 800217e:	b510      	push	{r4, lr}
 8002180:	4604      	mov	r4, r0
 8002182:	e9c0 3300 	strd	r3, r3, [r0]
 8002186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800218a:	6083      	str	r3, [r0, #8]
 800218c:	8181      	strh	r1, [r0, #12]
 800218e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002190:	81c2      	strh	r2, [r0, #14]
 8002192:	6183      	str	r3, [r0, #24]
 8002194:	4619      	mov	r1, r3
 8002196:	2208      	movs	r2, #8
 8002198:	305c      	adds	r0, #92	@ 0x5c
 800219a:	f000 f906 	bl	80023aa <memset>
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <std+0x58>)
 80021a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <std+0x5c>)
 80021a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <std+0x60>)
 80021a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <std+0x64>)
 80021ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80021ae:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <std+0x68>)
 80021b0:	6224      	str	r4, [r4, #32]
 80021b2:	429c      	cmp	r4, r3
 80021b4:	d006      	beq.n	80021c4 <std+0x48>
 80021b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80021ba:	4294      	cmp	r4, r2
 80021bc:	d002      	beq.n	80021c4 <std+0x48>
 80021be:	33d0      	adds	r3, #208	@ 0xd0
 80021c0:	429c      	cmp	r4, r3
 80021c2:	d105      	bne.n	80021d0 <std+0x54>
 80021c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80021c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021cc:	f000 b976 	b.w	80024bc <__retarget_lock_init_recursive>
 80021d0:	bd10      	pop	{r4, pc}
 80021d2:	bf00      	nop
 80021d4:	08002325 	.word	0x08002325
 80021d8:	08002347 	.word	0x08002347
 80021dc:	0800237f 	.word	0x0800237f
 80021e0:	080023a3 	.word	0x080023a3
 80021e4:	200000e0 	.word	0x200000e0

080021e8 <stdio_exit_handler>:
 80021e8:	4a02      	ldr	r2, [pc, #8]	@ (80021f4 <stdio_exit_handler+0xc>)
 80021ea:	4903      	ldr	r1, [pc, #12]	@ (80021f8 <stdio_exit_handler+0x10>)
 80021ec:	4803      	ldr	r0, [pc, #12]	@ (80021fc <stdio_exit_handler+0x14>)
 80021ee:	f000 b869 	b.w	80022c4 <_fwalk_sglue>
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c
 80021f8:	08002c01 	.word	0x08002c01
 80021fc:	2000001c 	.word	0x2000001c

08002200 <cleanup_stdio>:
 8002200:	6841      	ldr	r1, [r0, #4]
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <cleanup_stdio+0x34>)
 8002204:	4299      	cmp	r1, r3
 8002206:	b510      	push	{r4, lr}
 8002208:	4604      	mov	r4, r0
 800220a:	d001      	beq.n	8002210 <cleanup_stdio+0x10>
 800220c:	f000 fcf8 	bl	8002c00 <_fflush_r>
 8002210:	68a1      	ldr	r1, [r4, #8]
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <cleanup_stdio+0x38>)
 8002214:	4299      	cmp	r1, r3
 8002216:	d002      	beq.n	800221e <cleanup_stdio+0x1e>
 8002218:	4620      	mov	r0, r4
 800221a:	f000 fcf1 	bl	8002c00 <_fflush_r>
 800221e:	68e1      	ldr	r1, [r4, #12]
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <cleanup_stdio+0x3c>)
 8002222:	4299      	cmp	r1, r3
 8002224:	d004      	beq.n	8002230 <cleanup_stdio+0x30>
 8002226:	4620      	mov	r0, r4
 8002228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800222c:	f000 bce8 	b.w	8002c00 <_fflush_r>
 8002230:	bd10      	pop	{r4, pc}
 8002232:	bf00      	nop
 8002234:	200000e0 	.word	0x200000e0
 8002238:	20000148 	.word	0x20000148
 800223c:	200001b0 	.word	0x200001b0

08002240 <global_stdio_init.part.0>:
 8002240:	b510      	push	{r4, lr}
 8002242:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <global_stdio_init.part.0+0x30>)
 8002244:	4c0b      	ldr	r4, [pc, #44]	@ (8002274 <global_stdio_init.part.0+0x34>)
 8002246:	4a0c      	ldr	r2, [pc, #48]	@ (8002278 <global_stdio_init.part.0+0x38>)
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	4620      	mov	r0, r4
 800224c:	2200      	movs	r2, #0
 800224e:	2104      	movs	r1, #4
 8002250:	f7ff ff94 	bl	800217c <std>
 8002254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002258:	2201      	movs	r2, #1
 800225a:	2109      	movs	r1, #9
 800225c:	f7ff ff8e 	bl	800217c <std>
 8002260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002264:	2202      	movs	r2, #2
 8002266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800226a:	2112      	movs	r1, #18
 800226c:	f7ff bf86 	b.w	800217c <std>
 8002270:	20000218 	.word	0x20000218
 8002274:	200000e0 	.word	0x200000e0
 8002278:	080021e9 	.word	0x080021e9

0800227c <__sfp_lock_acquire>:
 800227c:	4801      	ldr	r0, [pc, #4]	@ (8002284 <__sfp_lock_acquire+0x8>)
 800227e:	f000 b91e 	b.w	80024be <__retarget_lock_acquire_recursive>
 8002282:	bf00      	nop
 8002284:	20000221 	.word	0x20000221

08002288 <__sfp_lock_release>:
 8002288:	4801      	ldr	r0, [pc, #4]	@ (8002290 <__sfp_lock_release+0x8>)
 800228a:	f000 b919 	b.w	80024c0 <__retarget_lock_release_recursive>
 800228e:	bf00      	nop
 8002290:	20000221 	.word	0x20000221

08002294 <__sinit>:
 8002294:	b510      	push	{r4, lr}
 8002296:	4604      	mov	r4, r0
 8002298:	f7ff fff0 	bl	800227c <__sfp_lock_acquire>
 800229c:	6a23      	ldr	r3, [r4, #32]
 800229e:	b11b      	cbz	r3, 80022a8 <__sinit+0x14>
 80022a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a4:	f7ff bff0 	b.w	8002288 <__sfp_lock_release>
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <__sinit+0x28>)
 80022aa:	6223      	str	r3, [r4, #32]
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__sinit+0x2c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f5      	bne.n	80022a0 <__sinit+0xc>
 80022b4:	f7ff ffc4 	bl	8002240 <global_stdio_init.part.0>
 80022b8:	e7f2      	b.n	80022a0 <__sinit+0xc>
 80022ba:	bf00      	nop
 80022bc:	08002201 	.word	0x08002201
 80022c0:	20000218 	.word	0x20000218

080022c4 <_fwalk_sglue>:
 80022c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022c8:	4607      	mov	r7, r0
 80022ca:	4688      	mov	r8, r1
 80022cc:	4614      	mov	r4, r2
 80022ce:	2600      	movs	r6, #0
 80022d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022d4:	f1b9 0901 	subs.w	r9, r9, #1
 80022d8:	d505      	bpl.n	80022e6 <_fwalk_sglue+0x22>
 80022da:	6824      	ldr	r4, [r4, #0]
 80022dc:	2c00      	cmp	r4, #0
 80022de:	d1f7      	bne.n	80022d0 <_fwalk_sglue+0xc>
 80022e0:	4630      	mov	r0, r6
 80022e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022e6:	89ab      	ldrh	r3, [r5, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d907      	bls.n	80022fc <_fwalk_sglue+0x38>
 80022ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022f0:	3301      	adds	r3, #1
 80022f2:	d003      	beq.n	80022fc <_fwalk_sglue+0x38>
 80022f4:	4629      	mov	r1, r5
 80022f6:	4638      	mov	r0, r7
 80022f8:	47c0      	blx	r8
 80022fa:	4306      	orrs	r6, r0
 80022fc:	3568      	adds	r5, #104	@ 0x68
 80022fe:	e7e9      	b.n	80022d4 <_fwalk_sglue+0x10>

08002300 <iprintf>:
 8002300:	b40f      	push	{r0, r1, r2, r3}
 8002302:	b507      	push	{r0, r1, r2, lr}
 8002304:	4906      	ldr	r1, [pc, #24]	@ (8002320 <iprintf+0x20>)
 8002306:	ab04      	add	r3, sp, #16
 8002308:	6808      	ldr	r0, [r1, #0]
 800230a:	f853 2b04 	ldr.w	r2, [r3], #4
 800230e:	6881      	ldr	r1, [r0, #8]
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	f000 f94b 	bl	80025ac <_vfiprintf_r>
 8002316:	b003      	add	sp, #12
 8002318:	f85d eb04 	ldr.w	lr, [sp], #4
 800231c:	b004      	add	sp, #16
 800231e:	4770      	bx	lr
 8002320:	20000018 	.word	0x20000018

08002324 <__sread>:
 8002324:	b510      	push	{r4, lr}
 8002326:	460c      	mov	r4, r1
 8002328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232c:	f000 f868 	bl	8002400 <_read_r>
 8002330:	2800      	cmp	r0, #0
 8002332:	bfab      	itete	ge
 8002334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002336:	89a3      	ldrhlt	r3, [r4, #12]
 8002338:	181b      	addge	r3, r3, r0
 800233a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800233e:	bfac      	ite	ge
 8002340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002342:	81a3      	strhlt	r3, [r4, #12]
 8002344:	bd10      	pop	{r4, pc}

08002346 <__swrite>:
 8002346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234a:	461f      	mov	r7, r3
 800234c:	898b      	ldrh	r3, [r1, #12]
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	4605      	mov	r5, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4616      	mov	r6, r2
 8002356:	d505      	bpl.n	8002364 <__swrite+0x1e>
 8002358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800235c:	2302      	movs	r3, #2
 800235e:	2200      	movs	r2, #0
 8002360:	f000 f83c 	bl	80023dc <_lseek_r>
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800236a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800236e:	81a3      	strh	r3, [r4, #12]
 8002370:	4632      	mov	r2, r6
 8002372:	463b      	mov	r3, r7
 8002374:	4628      	mov	r0, r5
 8002376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800237a:	f000 b863 	b.w	8002444 <_write_r>

0800237e <__sseek>:
 800237e:	b510      	push	{r4, lr}
 8002380:	460c      	mov	r4, r1
 8002382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002386:	f000 f829 	bl	80023dc <_lseek_r>
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	bf15      	itete	ne
 8002390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800239a:	81a3      	strheq	r3, [r4, #12]
 800239c:	bf18      	it	ne
 800239e:	81a3      	strhne	r3, [r4, #12]
 80023a0:	bd10      	pop	{r4, pc}

080023a2 <__sclose>:
 80023a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a6:	f000 b809 	b.w	80023bc <_close_r>

080023aa <memset>:
 80023aa:	4402      	add	r2, r0
 80023ac:	4603      	mov	r3, r0
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d100      	bne.n	80023b4 <memset+0xa>
 80023b2:	4770      	bx	lr
 80023b4:	f803 1b01 	strb.w	r1, [r3], #1
 80023b8:	e7f9      	b.n	80023ae <memset+0x4>
	...

080023bc <_close_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4d06      	ldr	r5, [pc, #24]	@ (80023d8 <_close_r+0x1c>)
 80023c0:	2300      	movs	r3, #0
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	602b      	str	r3, [r5, #0]
 80023c8:	f000 fd5a 	bl	8002e80 <_close>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_close_r+0x1a>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_close_r+0x1a>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	2000021c 	.word	0x2000021c

080023dc <_lseek_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4d07      	ldr	r5, [pc, #28]	@ (80023fc <_lseek_r+0x20>)
 80023e0:	4604      	mov	r4, r0
 80023e2:	4608      	mov	r0, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	602a      	str	r2, [r5, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 fd60 	bl	8002eb0 <_lseek>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_lseek_r+0x1e>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_lseek_r+0x1e>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	2000021c 	.word	0x2000021c

08002400 <_read_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d07      	ldr	r5, [pc, #28]	@ (8002420 <_read_r+0x20>)
 8002404:	4604      	mov	r4, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	2200      	movs	r2, #0
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f000 fd56 	bl	8002ec0 <_read>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_read_r+0x1e>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_read_r+0x1e>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	2000021c 	.word	0x2000021c

08002424 <_sbrk_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4d06      	ldr	r5, [pc, #24]	@ (8002440 <_sbrk_r+0x1c>)
 8002428:	2300      	movs	r3, #0
 800242a:	4604      	mov	r4, r0
 800242c:	4608      	mov	r0, r1
 800242e:	602b      	str	r3, [r5, #0]
 8002430:	f7fe fa7c 	bl	800092c <_sbrk>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d102      	bne.n	800243e <_sbrk_r+0x1a>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	b103      	cbz	r3, 800243e <_sbrk_r+0x1a>
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	2000021c 	.word	0x2000021c

08002444 <_write_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4d07      	ldr	r5, [pc, #28]	@ (8002464 <_write_r+0x20>)
 8002448:	4604      	mov	r4, r0
 800244a:	4608      	mov	r0, r1
 800244c:	4611      	mov	r1, r2
 800244e:	2200      	movs	r2, #0
 8002450:	602a      	str	r2, [r5, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	f7fe f9ac 	bl	80007b0 <_write>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d102      	bne.n	8002462 <_write_r+0x1e>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	b103      	cbz	r3, 8002462 <_write_r+0x1e>
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	2000021c 	.word	0x2000021c

08002468 <__errno>:
 8002468:	4b01      	ldr	r3, [pc, #4]	@ (8002470 <__errno+0x8>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000018 	.word	0x20000018

08002474 <__libc_init_array>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	4d0d      	ldr	r5, [pc, #52]	@ (80024ac <__libc_init_array+0x38>)
 8002478:	4c0d      	ldr	r4, [pc, #52]	@ (80024b0 <__libc_init_array+0x3c>)
 800247a:	1b64      	subs	r4, r4, r5
 800247c:	10a4      	asrs	r4, r4, #2
 800247e:	2600      	movs	r6, #0
 8002480:	42a6      	cmp	r6, r4
 8002482:	d109      	bne.n	8002498 <__libc_init_array+0x24>
 8002484:	4d0b      	ldr	r5, [pc, #44]	@ (80024b4 <__libc_init_array+0x40>)
 8002486:	4c0c      	ldr	r4, [pc, #48]	@ (80024b8 <__libc_init_array+0x44>)
 8002488:	f000 fd22 	bl	8002ed0 <_init>
 800248c:	1b64      	subs	r4, r4, r5
 800248e:	10a4      	asrs	r4, r4, #2
 8002490:	2600      	movs	r6, #0
 8002492:	42a6      	cmp	r6, r4
 8002494:	d105      	bne.n	80024a2 <__libc_init_array+0x2e>
 8002496:	bd70      	pop	{r4, r5, r6, pc}
 8002498:	f855 3b04 	ldr.w	r3, [r5], #4
 800249c:	4798      	blx	r3
 800249e:	3601      	adds	r6, #1
 80024a0:	e7ee      	b.n	8002480 <__libc_init_array+0xc>
 80024a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a6:	4798      	blx	r3
 80024a8:	3601      	adds	r6, #1
 80024aa:	e7f2      	b.n	8002492 <__libc_init_array+0x1e>
 80024ac:	08002f48 	.word	0x08002f48
 80024b0:	08002f48 	.word	0x08002f48
 80024b4:	08002f48 	.word	0x08002f48
 80024b8:	08002f4c 	.word	0x08002f4c

080024bc <__retarget_lock_init_recursive>:
 80024bc:	4770      	bx	lr

080024be <__retarget_lock_acquire_recursive>:
 80024be:	4770      	bx	lr

080024c0 <__retarget_lock_release_recursive>:
 80024c0:	4770      	bx	lr
	...

080024c4 <_free_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4605      	mov	r5, r0
 80024c8:	2900      	cmp	r1, #0
 80024ca:	d041      	beq.n	8002550 <_free_r+0x8c>
 80024cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d0:	1f0c      	subs	r4, r1, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfb8      	it	lt
 80024d6:	18e4      	addlt	r4, r4, r3
 80024d8:	f7ff fe44 	bl	8002164 <__malloc_lock>
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <_free_r+0x90>)
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	b933      	cbnz	r3, 80024f0 <_free_r+0x2c>
 80024e2:	6063      	str	r3, [r4, #4]
 80024e4:	6014      	str	r4, [r2, #0]
 80024e6:	4628      	mov	r0, r5
 80024e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ec:	f7ff be40 	b.w	8002170 <__malloc_unlock>
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d908      	bls.n	8002506 <_free_r+0x42>
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	1821      	adds	r1, r4, r0
 80024f8:	428b      	cmp	r3, r1
 80024fa:	bf01      	itttt	eq
 80024fc:	6819      	ldreq	r1, [r3, #0]
 80024fe:	685b      	ldreq	r3, [r3, #4]
 8002500:	1809      	addeq	r1, r1, r0
 8002502:	6021      	streq	r1, [r4, #0]
 8002504:	e7ed      	b.n	80024e2 <_free_r+0x1e>
 8002506:	461a      	mov	r2, r3
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b10b      	cbz	r3, 8002510 <_free_r+0x4c>
 800250c:	42a3      	cmp	r3, r4
 800250e:	d9fa      	bls.n	8002506 <_free_r+0x42>
 8002510:	6811      	ldr	r1, [r2, #0]
 8002512:	1850      	adds	r0, r2, r1
 8002514:	42a0      	cmp	r0, r4
 8002516:	d10b      	bne.n	8002530 <_free_r+0x6c>
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	4401      	add	r1, r0
 800251c:	1850      	adds	r0, r2, r1
 800251e:	4283      	cmp	r3, r0
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	d1e0      	bne.n	80024e6 <_free_r+0x22>
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	6053      	str	r3, [r2, #4]
 800252a:	4408      	add	r0, r1
 800252c:	6010      	str	r0, [r2, #0]
 800252e:	e7da      	b.n	80024e6 <_free_r+0x22>
 8002530:	d902      	bls.n	8002538 <_free_r+0x74>
 8002532:	230c      	movs	r3, #12
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	e7d6      	b.n	80024e6 <_free_r+0x22>
 8002538:	6820      	ldr	r0, [r4, #0]
 800253a:	1821      	adds	r1, r4, r0
 800253c:	428b      	cmp	r3, r1
 800253e:	bf04      	itt	eq
 8002540:	6819      	ldreq	r1, [r3, #0]
 8002542:	685b      	ldreq	r3, [r3, #4]
 8002544:	6063      	str	r3, [r4, #4]
 8002546:	bf04      	itt	eq
 8002548:	1809      	addeq	r1, r1, r0
 800254a:	6021      	streq	r1, [r4, #0]
 800254c:	6054      	str	r4, [r2, #4]
 800254e:	e7ca      	b.n	80024e6 <_free_r+0x22>
 8002550:	bd38      	pop	{r3, r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	200000dc 	.word	0x200000dc

08002558 <__sfputc_r>:
 8002558:	6893      	ldr	r3, [r2, #8]
 800255a:	3b01      	subs	r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	b410      	push	{r4}
 8002560:	6093      	str	r3, [r2, #8]
 8002562:	da08      	bge.n	8002576 <__sfputc_r+0x1e>
 8002564:	6994      	ldr	r4, [r2, #24]
 8002566:	42a3      	cmp	r3, r4
 8002568:	db01      	blt.n	800256e <__sfputc_r+0x16>
 800256a:	290a      	cmp	r1, #10
 800256c:	d103      	bne.n	8002576 <__sfputc_r+0x1e>
 800256e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002572:	f000 bb6d 	b.w	8002c50 <__swbuf_r>
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	1c58      	adds	r0, r3, #1
 800257a:	6010      	str	r0, [r2, #0]
 800257c:	7019      	strb	r1, [r3, #0]
 800257e:	4608      	mov	r0, r1
 8002580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002584:	4770      	bx	lr

08002586 <__sfputs_r>:
 8002586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002588:	4606      	mov	r6, r0
 800258a:	460f      	mov	r7, r1
 800258c:	4614      	mov	r4, r2
 800258e:	18d5      	adds	r5, r2, r3
 8002590:	42ac      	cmp	r4, r5
 8002592:	d101      	bne.n	8002598 <__sfputs_r+0x12>
 8002594:	2000      	movs	r0, #0
 8002596:	e007      	b.n	80025a8 <__sfputs_r+0x22>
 8002598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800259c:	463a      	mov	r2, r7
 800259e:	4630      	mov	r0, r6
 80025a0:	f7ff ffda 	bl	8002558 <__sfputc_r>
 80025a4:	1c43      	adds	r3, r0, #1
 80025a6:	d1f3      	bne.n	8002590 <__sfputs_r+0xa>
 80025a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025ac <_vfiprintf_r>:
 80025ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b0:	460d      	mov	r5, r1
 80025b2:	b09d      	sub	sp, #116	@ 0x74
 80025b4:	4614      	mov	r4, r2
 80025b6:	4698      	mov	r8, r3
 80025b8:	4606      	mov	r6, r0
 80025ba:	b118      	cbz	r0, 80025c4 <_vfiprintf_r+0x18>
 80025bc:	6a03      	ldr	r3, [r0, #32]
 80025be:	b90b      	cbnz	r3, 80025c4 <_vfiprintf_r+0x18>
 80025c0:	f7ff fe68 	bl	8002294 <__sinit>
 80025c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80025c6:	07d9      	lsls	r1, r3, #31
 80025c8:	d405      	bmi.n	80025d6 <_vfiprintf_r+0x2a>
 80025ca:	89ab      	ldrh	r3, [r5, #12]
 80025cc:	059a      	lsls	r2, r3, #22
 80025ce:	d402      	bmi.n	80025d6 <_vfiprintf_r+0x2a>
 80025d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80025d2:	f7ff ff74 	bl	80024be <__retarget_lock_acquire_recursive>
 80025d6:	89ab      	ldrh	r3, [r5, #12]
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	d501      	bpl.n	80025e0 <_vfiprintf_r+0x34>
 80025dc:	692b      	ldr	r3, [r5, #16]
 80025de:	b99b      	cbnz	r3, 8002608 <_vfiprintf_r+0x5c>
 80025e0:	4629      	mov	r1, r5
 80025e2:	4630      	mov	r0, r6
 80025e4:	f000 fb72 	bl	8002ccc <__swsetup_r>
 80025e8:	b170      	cbz	r0, 8002608 <_vfiprintf_r+0x5c>
 80025ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80025ec:	07dc      	lsls	r4, r3, #31
 80025ee:	d504      	bpl.n	80025fa <_vfiprintf_r+0x4e>
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	b01d      	add	sp, #116	@ 0x74
 80025f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fa:	89ab      	ldrh	r3, [r5, #12]
 80025fc:	0598      	lsls	r0, r3, #22
 80025fe:	d4f7      	bmi.n	80025f0 <_vfiprintf_r+0x44>
 8002600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002602:	f7ff ff5d 	bl	80024c0 <__retarget_lock_release_recursive>
 8002606:	e7f3      	b.n	80025f0 <_vfiprintf_r+0x44>
 8002608:	2300      	movs	r3, #0
 800260a:	9309      	str	r3, [sp, #36]	@ 0x24
 800260c:	2320      	movs	r3, #32
 800260e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002612:	f8cd 800c 	str.w	r8, [sp, #12]
 8002616:	2330      	movs	r3, #48	@ 0x30
 8002618:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80027c8 <_vfiprintf_r+0x21c>
 800261c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002620:	f04f 0901 	mov.w	r9, #1
 8002624:	4623      	mov	r3, r4
 8002626:	469a      	mov	sl, r3
 8002628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800262c:	b10a      	cbz	r2, 8002632 <_vfiprintf_r+0x86>
 800262e:	2a25      	cmp	r2, #37	@ 0x25
 8002630:	d1f9      	bne.n	8002626 <_vfiprintf_r+0x7a>
 8002632:	ebba 0b04 	subs.w	fp, sl, r4
 8002636:	d00b      	beq.n	8002650 <_vfiprintf_r+0xa4>
 8002638:	465b      	mov	r3, fp
 800263a:	4622      	mov	r2, r4
 800263c:	4629      	mov	r1, r5
 800263e:	4630      	mov	r0, r6
 8002640:	f7ff ffa1 	bl	8002586 <__sfputs_r>
 8002644:	3001      	adds	r0, #1
 8002646:	f000 80a7 	beq.w	8002798 <_vfiprintf_r+0x1ec>
 800264a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800264c:	445a      	add	r2, fp
 800264e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002650:	f89a 3000 	ldrb.w	r3, [sl]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 809f 	beq.w	8002798 <_vfiprintf_r+0x1ec>
 800265a:	2300      	movs	r3, #0
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002664:	f10a 0a01 	add.w	sl, sl, #1
 8002668:	9304      	str	r3, [sp, #16]
 800266a:	9307      	str	r3, [sp, #28]
 800266c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002670:	931a      	str	r3, [sp, #104]	@ 0x68
 8002672:	4654      	mov	r4, sl
 8002674:	2205      	movs	r2, #5
 8002676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800267a:	4853      	ldr	r0, [pc, #332]	@ (80027c8 <_vfiprintf_r+0x21c>)
 800267c:	f7fd fda8 	bl	80001d0 <memchr>
 8002680:	9a04      	ldr	r2, [sp, #16]
 8002682:	b9d8      	cbnz	r0, 80026bc <_vfiprintf_r+0x110>
 8002684:	06d1      	lsls	r1, r2, #27
 8002686:	bf44      	itt	mi
 8002688:	2320      	movmi	r3, #32
 800268a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800268e:	0713      	lsls	r3, r2, #28
 8002690:	bf44      	itt	mi
 8002692:	232b      	movmi	r3, #43	@ 0x2b
 8002694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002698:	f89a 3000 	ldrb.w	r3, [sl]
 800269c:	2b2a      	cmp	r3, #42	@ 0x2a
 800269e:	d015      	beq.n	80026cc <_vfiprintf_r+0x120>
 80026a0:	9a07      	ldr	r2, [sp, #28]
 80026a2:	4654      	mov	r4, sl
 80026a4:	2000      	movs	r0, #0
 80026a6:	f04f 0c0a 	mov.w	ip, #10
 80026aa:	4621      	mov	r1, r4
 80026ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026b0:	3b30      	subs	r3, #48	@ 0x30
 80026b2:	2b09      	cmp	r3, #9
 80026b4:	d94b      	bls.n	800274e <_vfiprintf_r+0x1a2>
 80026b6:	b1b0      	cbz	r0, 80026e6 <_vfiprintf_r+0x13a>
 80026b8:	9207      	str	r2, [sp, #28]
 80026ba:	e014      	b.n	80026e6 <_vfiprintf_r+0x13a>
 80026bc:	eba0 0308 	sub.w	r3, r0, r8
 80026c0:	fa09 f303 	lsl.w	r3, r9, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	9304      	str	r3, [sp, #16]
 80026c8:	46a2      	mov	sl, r4
 80026ca:	e7d2      	b.n	8002672 <_vfiprintf_r+0xc6>
 80026cc:	9b03      	ldr	r3, [sp, #12]
 80026ce:	1d19      	adds	r1, r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	9103      	str	r1, [sp, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bfbb      	ittet	lt
 80026d8:	425b      	neglt	r3, r3
 80026da:	f042 0202 	orrlt.w	r2, r2, #2
 80026de:	9307      	strge	r3, [sp, #28]
 80026e0:	9307      	strlt	r3, [sp, #28]
 80026e2:	bfb8      	it	lt
 80026e4:	9204      	strlt	r2, [sp, #16]
 80026e6:	7823      	ldrb	r3, [r4, #0]
 80026e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80026ea:	d10a      	bne.n	8002702 <_vfiprintf_r+0x156>
 80026ec:	7863      	ldrb	r3, [r4, #1]
 80026ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80026f0:	d132      	bne.n	8002758 <_vfiprintf_r+0x1ac>
 80026f2:	9b03      	ldr	r3, [sp, #12]
 80026f4:	1d1a      	adds	r2, r3, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	9203      	str	r2, [sp, #12]
 80026fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80026fe:	3402      	adds	r4, #2
 8002700:	9305      	str	r3, [sp, #20]
 8002702:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80027d8 <_vfiprintf_r+0x22c>
 8002706:	7821      	ldrb	r1, [r4, #0]
 8002708:	2203      	movs	r2, #3
 800270a:	4650      	mov	r0, sl
 800270c:	f7fd fd60 	bl	80001d0 <memchr>
 8002710:	b138      	cbz	r0, 8002722 <_vfiprintf_r+0x176>
 8002712:	9b04      	ldr	r3, [sp, #16]
 8002714:	eba0 000a 	sub.w	r0, r0, sl
 8002718:	2240      	movs	r2, #64	@ 0x40
 800271a:	4082      	lsls	r2, r0
 800271c:	4313      	orrs	r3, r2
 800271e:	3401      	adds	r4, #1
 8002720:	9304      	str	r3, [sp, #16]
 8002722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002726:	4829      	ldr	r0, [pc, #164]	@ (80027cc <_vfiprintf_r+0x220>)
 8002728:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800272c:	2206      	movs	r2, #6
 800272e:	f7fd fd4f 	bl	80001d0 <memchr>
 8002732:	2800      	cmp	r0, #0
 8002734:	d03f      	beq.n	80027b6 <_vfiprintf_r+0x20a>
 8002736:	4b26      	ldr	r3, [pc, #152]	@ (80027d0 <_vfiprintf_r+0x224>)
 8002738:	bb1b      	cbnz	r3, 8002782 <_vfiprintf_r+0x1d6>
 800273a:	9b03      	ldr	r3, [sp, #12]
 800273c:	3307      	adds	r3, #7
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	3308      	adds	r3, #8
 8002744:	9303      	str	r3, [sp, #12]
 8002746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002748:	443b      	add	r3, r7
 800274a:	9309      	str	r3, [sp, #36]	@ 0x24
 800274c:	e76a      	b.n	8002624 <_vfiprintf_r+0x78>
 800274e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002752:	460c      	mov	r4, r1
 8002754:	2001      	movs	r0, #1
 8002756:	e7a8      	b.n	80026aa <_vfiprintf_r+0xfe>
 8002758:	2300      	movs	r3, #0
 800275a:	3401      	adds	r4, #1
 800275c:	9305      	str	r3, [sp, #20]
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0c0a 	mov.w	ip, #10
 8002764:	4620      	mov	r0, r4
 8002766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800276a:	3a30      	subs	r2, #48	@ 0x30
 800276c:	2a09      	cmp	r2, #9
 800276e:	d903      	bls.n	8002778 <_vfiprintf_r+0x1cc>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0c6      	beq.n	8002702 <_vfiprintf_r+0x156>
 8002774:	9105      	str	r1, [sp, #20]
 8002776:	e7c4      	b.n	8002702 <_vfiprintf_r+0x156>
 8002778:	fb0c 2101 	mla	r1, ip, r1, r2
 800277c:	4604      	mov	r4, r0
 800277e:	2301      	movs	r3, #1
 8002780:	e7f0      	b.n	8002764 <_vfiprintf_r+0x1b8>
 8002782:	ab03      	add	r3, sp, #12
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	462a      	mov	r2, r5
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <_vfiprintf_r+0x228>)
 800278a:	a904      	add	r1, sp, #16
 800278c:	4630      	mov	r0, r6
 800278e:	f3af 8000 	nop.w
 8002792:	4607      	mov	r7, r0
 8002794:	1c78      	adds	r0, r7, #1
 8002796:	d1d6      	bne.n	8002746 <_vfiprintf_r+0x19a>
 8002798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800279a:	07d9      	lsls	r1, r3, #31
 800279c:	d405      	bmi.n	80027aa <_vfiprintf_r+0x1fe>
 800279e:	89ab      	ldrh	r3, [r5, #12]
 80027a0:	059a      	lsls	r2, r3, #22
 80027a2:	d402      	bmi.n	80027aa <_vfiprintf_r+0x1fe>
 80027a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027a6:	f7ff fe8b 	bl	80024c0 <__retarget_lock_release_recursive>
 80027aa:	89ab      	ldrh	r3, [r5, #12]
 80027ac:	065b      	lsls	r3, r3, #25
 80027ae:	f53f af1f 	bmi.w	80025f0 <_vfiprintf_r+0x44>
 80027b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80027b4:	e71e      	b.n	80025f4 <_vfiprintf_r+0x48>
 80027b6:	ab03      	add	r3, sp, #12
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	462a      	mov	r2, r5
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <_vfiprintf_r+0x228>)
 80027be:	a904      	add	r1, sp, #16
 80027c0:	4630      	mov	r0, r6
 80027c2:	f000 f879 	bl	80028b8 <_printf_i>
 80027c6:	e7e4      	b.n	8002792 <_vfiprintf_r+0x1e6>
 80027c8:	08002f0c 	.word	0x08002f0c
 80027cc:	08002f16 	.word	0x08002f16
 80027d0:	00000000 	.word	0x00000000
 80027d4:	08002587 	.word	0x08002587
 80027d8:	08002f12 	.word	0x08002f12

080027dc <_printf_common>:
 80027dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e0:	4616      	mov	r6, r2
 80027e2:	4698      	mov	r8, r3
 80027e4:	688a      	ldr	r2, [r1, #8]
 80027e6:	690b      	ldr	r3, [r1, #16]
 80027e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bfb8      	it	lt
 80027f0:	4613      	movlt	r3, r2
 80027f2:	6033      	str	r3, [r6, #0]
 80027f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80027f8:	4607      	mov	r7, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	b10a      	cbz	r2, 8002802 <_printf_common+0x26>
 80027fe:	3301      	adds	r3, #1
 8002800:	6033      	str	r3, [r6, #0]
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	0699      	lsls	r1, r3, #26
 8002806:	bf42      	ittt	mi
 8002808:	6833      	ldrmi	r3, [r6, #0]
 800280a:	3302      	addmi	r3, #2
 800280c:	6033      	strmi	r3, [r6, #0]
 800280e:	6825      	ldr	r5, [r4, #0]
 8002810:	f015 0506 	ands.w	r5, r5, #6
 8002814:	d106      	bne.n	8002824 <_printf_common+0x48>
 8002816:	f104 0a19 	add.w	sl, r4, #25
 800281a:	68e3      	ldr	r3, [r4, #12]
 800281c:	6832      	ldr	r2, [r6, #0]
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	42ab      	cmp	r3, r5
 8002822:	dc26      	bgt.n	8002872 <_printf_common+0x96>
 8002824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	3b00      	subs	r3, #0
 800282c:	bf18      	it	ne
 800282e:	2301      	movne	r3, #1
 8002830:	0692      	lsls	r2, r2, #26
 8002832:	d42b      	bmi.n	800288c <_printf_common+0xb0>
 8002834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002838:	4641      	mov	r1, r8
 800283a:	4638      	mov	r0, r7
 800283c:	47c8      	blx	r9
 800283e:	3001      	adds	r0, #1
 8002840:	d01e      	beq.n	8002880 <_printf_common+0xa4>
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	6922      	ldr	r2, [r4, #16]
 8002846:	f003 0306 	and.w	r3, r3, #6
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf02      	ittt	eq
 800284e:	68e5      	ldreq	r5, [r4, #12]
 8002850:	6833      	ldreq	r3, [r6, #0]
 8002852:	1aed      	subeq	r5, r5, r3
 8002854:	68a3      	ldr	r3, [r4, #8]
 8002856:	bf0c      	ite	eq
 8002858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800285c:	2500      	movne	r5, #0
 800285e:	4293      	cmp	r3, r2
 8002860:	bfc4      	itt	gt
 8002862:	1a9b      	subgt	r3, r3, r2
 8002864:	18ed      	addgt	r5, r5, r3
 8002866:	2600      	movs	r6, #0
 8002868:	341a      	adds	r4, #26
 800286a:	42b5      	cmp	r5, r6
 800286c:	d11a      	bne.n	80028a4 <_printf_common+0xc8>
 800286e:	2000      	movs	r0, #0
 8002870:	e008      	b.n	8002884 <_printf_common+0xa8>
 8002872:	2301      	movs	r3, #1
 8002874:	4652      	mov	r2, sl
 8002876:	4641      	mov	r1, r8
 8002878:	4638      	mov	r0, r7
 800287a:	47c8      	blx	r9
 800287c:	3001      	adds	r0, #1
 800287e:	d103      	bne.n	8002888 <_printf_common+0xac>
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002888:	3501      	adds	r5, #1
 800288a:	e7c6      	b.n	800281a <_printf_common+0x3e>
 800288c:	18e1      	adds	r1, r4, r3
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	2030      	movs	r0, #48	@ 0x30
 8002892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002896:	4422      	add	r2, r4
 8002898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800289c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80028a0:	3302      	adds	r3, #2
 80028a2:	e7c7      	b.n	8002834 <_printf_common+0x58>
 80028a4:	2301      	movs	r3, #1
 80028a6:	4622      	mov	r2, r4
 80028a8:	4641      	mov	r1, r8
 80028aa:	4638      	mov	r0, r7
 80028ac:	47c8      	blx	r9
 80028ae:	3001      	adds	r0, #1
 80028b0:	d0e6      	beq.n	8002880 <_printf_common+0xa4>
 80028b2:	3601      	adds	r6, #1
 80028b4:	e7d9      	b.n	800286a <_printf_common+0x8e>
	...

080028b8 <_printf_i>:
 80028b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028bc:	7e0f      	ldrb	r7, [r1, #24]
 80028be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80028c0:	2f78      	cmp	r7, #120	@ 0x78
 80028c2:	4691      	mov	r9, r2
 80028c4:	4680      	mov	r8, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	469a      	mov	sl, r3
 80028ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80028ce:	d807      	bhi.n	80028e0 <_printf_i+0x28>
 80028d0:	2f62      	cmp	r7, #98	@ 0x62
 80028d2:	d80a      	bhi.n	80028ea <_printf_i+0x32>
 80028d4:	2f00      	cmp	r7, #0
 80028d6:	f000 80d2 	beq.w	8002a7e <_printf_i+0x1c6>
 80028da:	2f58      	cmp	r7, #88	@ 0x58
 80028dc:	f000 80b9 	beq.w	8002a52 <_printf_i+0x19a>
 80028e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028e8:	e03a      	b.n	8002960 <_printf_i+0xa8>
 80028ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028ee:	2b15      	cmp	r3, #21
 80028f0:	d8f6      	bhi.n	80028e0 <_printf_i+0x28>
 80028f2:	a101      	add	r1, pc, #4	@ (adr r1, 80028f8 <_printf_i+0x40>)
 80028f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028f8:	08002951 	.word	0x08002951
 80028fc:	08002965 	.word	0x08002965
 8002900:	080028e1 	.word	0x080028e1
 8002904:	080028e1 	.word	0x080028e1
 8002908:	080028e1 	.word	0x080028e1
 800290c:	080028e1 	.word	0x080028e1
 8002910:	08002965 	.word	0x08002965
 8002914:	080028e1 	.word	0x080028e1
 8002918:	080028e1 	.word	0x080028e1
 800291c:	080028e1 	.word	0x080028e1
 8002920:	080028e1 	.word	0x080028e1
 8002924:	08002a65 	.word	0x08002a65
 8002928:	0800298f 	.word	0x0800298f
 800292c:	08002a1f 	.word	0x08002a1f
 8002930:	080028e1 	.word	0x080028e1
 8002934:	080028e1 	.word	0x080028e1
 8002938:	08002a87 	.word	0x08002a87
 800293c:	080028e1 	.word	0x080028e1
 8002940:	0800298f 	.word	0x0800298f
 8002944:	080028e1 	.word	0x080028e1
 8002948:	080028e1 	.word	0x080028e1
 800294c:	08002a27 	.word	0x08002a27
 8002950:	6833      	ldr	r3, [r6, #0]
 8002952:	1d1a      	adds	r2, r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6032      	str	r2, [r6, #0]
 8002958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800295c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002960:	2301      	movs	r3, #1
 8002962:	e09d      	b.n	8002aa0 <_printf_i+0x1e8>
 8002964:	6833      	ldr	r3, [r6, #0]
 8002966:	6820      	ldr	r0, [r4, #0]
 8002968:	1d19      	adds	r1, r3, #4
 800296a:	6031      	str	r1, [r6, #0]
 800296c:	0606      	lsls	r6, r0, #24
 800296e:	d501      	bpl.n	8002974 <_printf_i+0xbc>
 8002970:	681d      	ldr	r5, [r3, #0]
 8002972:	e003      	b.n	800297c <_printf_i+0xc4>
 8002974:	0645      	lsls	r5, r0, #25
 8002976:	d5fb      	bpl.n	8002970 <_printf_i+0xb8>
 8002978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800297c:	2d00      	cmp	r5, #0
 800297e:	da03      	bge.n	8002988 <_printf_i+0xd0>
 8002980:	232d      	movs	r3, #45	@ 0x2d
 8002982:	426d      	negs	r5, r5
 8002984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002988:	4859      	ldr	r0, [pc, #356]	@ (8002af0 <_printf_i+0x238>)
 800298a:	230a      	movs	r3, #10
 800298c:	e011      	b.n	80029b2 <_printf_i+0xfa>
 800298e:	6821      	ldr	r1, [r4, #0]
 8002990:	6833      	ldr	r3, [r6, #0]
 8002992:	0608      	lsls	r0, r1, #24
 8002994:	f853 5b04 	ldr.w	r5, [r3], #4
 8002998:	d402      	bmi.n	80029a0 <_printf_i+0xe8>
 800299a:	0649      	lsls	r1, r1, #25
 800299c:	bf48      	it	mi
 800299e:	b2ad      	uxthmi	r5, r5
 80029a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80029a2:	4853      	ldr	r0, [pc, #332]	@ (8002af0 <_printf_i+0x238>)
 80029a4:	6033      	str	r3, [r6, #0]
 80029a6:	bf14      	ite	ne
 80029a8:	230a      	movne	r3, #10
 80029aa:	2308      	moveq	r3, #8
 80029ac:	2100      	movs	r1, #0
 80029ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80029b2:	6866      	ldr	r6, [r4, #4]
 80029b4:	60a6      	str	r6, [r4, #8]
 80029b6:	2e00      	cmp	r6, #0
 80029b8:	bfa2      	ittt	ge
 80029ba:	6821      	ldrge	r1, [r4, #0]
 80029bc:	f021 0104 	bicge.w	r1, r1, #4
 80029c0:	6021      	strge	r1, [r4, #0]
 80029c2:	b90d      	cbnz	r5, 80029c8 <_printf_i+0x110>
 80029c4:	2e00      	cmp	r6, #0
 80029c6:	d04b      	beq.n	8002a60 <_printf_i+0x1a8>
 80029c8:	4616      	mov	r6, r2
 80029ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80029ce:	fb03 5711 	mls	r7, r3, r1, r5
 80029d2:	5dc7      	ldrb	r7, [r0, r7]
 80029d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029d8:	462f      	mov	r7, r5
 80029da:	42bb      	cmp	r3, r7
 80029dc:	460d      	mov	r5, r1
 80029de:	d9f4      	bls.n	80029ca <_printf_i+0x112>
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d10b      	bne.n	80029fc <_printf_i+0x144>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	07df      	lsls	r7, r3, #31
 80029e8:	d508      	bpl.n	80029fc <_printf_i+0x144>
 80029ea:	6923      	ldr	r3, [r4, #16]
 80029ec:	6861      	ldr	r1, [r4, #4]
 80029ee:	4299      	cmp	r1, r3
 80029f0:	bfde      	ittt	le
 80029f2:	2330      	movle	r3, #48	@ 0x30
 80029f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029fc:	1b92      	subs	r2, r2, r6
 80029fe:	6122      	str	r2, [r4, #16]
 8002a00:	f8cd a000 	str.w	sl, [sp]
 8002a04:	464b      	mov	r3, r9
 8002a06:	aa03      	add	r2, sp, #12
 8002a08:	4621      	mov	r1, r4
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f7ff fee6 	bl	80027dc <_printf_common>
 8002a10:	3001      	adds	r0, #1
 8002a12:	d14a      	bne.n	8002aaa <_printf_i+0x1f2>
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	b004      	add	sp, #16
 8002a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	f043 0320 	orr.w	r3, r3, #32
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	4833      	ldr	r0, [pc, #204]	@ (8002af4 <_printf_i+0x23c>)
 8002a28:	2778      	movs	r7, #120	@ 0x78
 8002a2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	6831      	ldr	r1, [r6, #0]
 8002a32:	061f      	lsls	r7, r3, #24
 8002a34:	f851 5b04 	ldr.w	r5, [r1], #4
 8002a38:	d402      	bmi.n	8002a40 <_printf_i+0x188>
 8002a3a:	065f      	lsls	r7, r3, #25
 8002a3c:	bf48      	it	mi
 8002a3e:	b2ad      	uxthmi	r5, r5
 8002a40:	6031      	str	r1, [r6, #0]
 8002a42:	07d9      	lsls	r1, r3, #31
 8002a44:	bf44      	itt	mi
 8002a46:	f043 0320 	orrmi.w	r3, r3, #32
 8002a4a:	6023      	strmi	r3, [r4, #0]
 8002a4c:	b11d      	cbz	r5, 8002a56 <_printf_i+0x19e>
 8002a4e:	2310      	movs	r3, #16
 8002a50:	e7ac      	b.n	80029ac <_printf_i+0xf4>
 8002a52:	4827      	ldr	r0, [pc, #156]	@ (8002af0 <_printf_i+0x238>)
 8002a54:	e7e9      	b.n	8002a2a <_printf_i+0x172>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f023 0320 	bic.w	r3, r3, #32
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	e7f6      	b.n	8002a4e <_printf_i+0x196>
 8002a60:	4616      	mov	r6, r2
 8002a62:	e7bd      	b.n	80029e0 <_printf_i+0x128>
 8002a64:	6833      	ldr	r3, [r6, #0]
 8002a66:	6825      	ldr	r5, [r4, #0]
 8002a68:	6961      	ldr	r1, [r4, #20]
 8002a6a:	1d18      	adds	r0, r3, #4
 8002a6c:	6030      	str	r0, [r6, #0]
 8002a6e:	062e      	lsls	r6, r5, #24
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	d501      	bpl.n	8002a78 <_printf_i+0x1c0>
 8002a74:	6019      	str	r1, [r3, #0]
 8002a76:	e002      	b.n	8002a7e <_printf_i+0x1c6>
 8002a78:	0668      	lsls	r0, r5, #25
 8002a7a:	d5fb      	bpl.n	8002a74 <_printf_i+0x1bc>
 8002a7c:	8019      	strh	r1, [r3, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	6123      	str	r3, [r4, #16]
 8002a82:	4616      	mov	r6, r2
 8002a84:	e7bc      	b.n	8002a00 <_printf_i+0x148>
 8002a86:	6833      	ldr	r3, [r6, #0]
 8002a88:	1d1a      	adds	r2, r3, #4
 8002a8a:	6032      	str	r2, [r6, #0]
 8002a8c:	681e      	ldr	r6, [r3, #0]
 8002a8e:	6862      	ldr	r2, [r4, #4]
 8002a90:	2100      	movs	r1, #0
 8002a92:	4630      	mov	r0, r6
 8002a94:	f7fd fb9c 	bl	80001d0 <memchr>
 8002a98:	b108      	cbz	r0, 8002a9e <_printf_i+0x1e6>
 8002a9a:	1b80      	subs	r0, r0, r6
 8002a9c:	6060      	str	r0, [r4, #4]
 8002a9e:	6863      	ldr	r3, [r4, #4]
 8002aa0:	6123      	str	r3, [r4, #16]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002aa8:	e7aa      	b.n	8002a00 <_printf_i+0x148>
 8002aaa:	6923      	ldr	r3, [r4, #16]
 8002aac:	4632      	mov	r2, r6
 8002aae:	4649      	mov	r1, r9
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	47d0      	blx	sl
 8002ab4:	3001      	adds	r0, #1
 8002ab6:	d0ad      	beq.n	8002a14 <_printf_i+0x15c>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	079b      	lsls	r3, r3, #30
 8002abc:	d413      	bmi.n	8002ae6 <_printf_i+0x22e>
 8002abe:	68e0      	ldr	r0, [r4, #12]
 8002ac0:	9b03      	ldr	r3, [sp, #12]
 8002ac2:	4298      	cmp	r0, r3
 8002ac4:	bfb8      	it	lt
 8002ac6:	4618      	movlt	r0, r3
 8002ac8:	e7a6      	b.n	8002a18 <_printf_i+0x160>
 8002aca:	2301      	movs	r3, #1
 8002acc:	4632      	mov	r2, r6
 8002ace:	4649      	mov	r1, r9
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	47d0      	blx	sl
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d09d      	beq.n	8002a14 <_printf_i+0x15c>
 8002ad8:	3501      	adds	r5, #1
 8002ada:	68e3      	ldr	r3, [r4, #12]
 8002adc:	9903      	ldr	r1, [sp, #12]
 8002ade:	1a5b      	subs	r3, r3, r1
 8002ae0:	42ab      	cmp	r3, r5
 8002ae2:	dcf2      	bgt.n	8002aca <_printf_i+0x212>
 8002ae4:	e7eb      	b.n	8002abe <_printf_i+0x206>
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	f104 0619 	add.w	r6, r4, #25
 8002aec:	e7f5      	b.n	8002ada <_printf_i+0x222>
 8002aee:	bf00      	nop
 8002af0:	08002f1d 	.word	0x08002f1d
 8002af4:	08002f2e 	.word	0x08002f2e

08002af8 <__sflush_r>:
 8002af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	0716      	lsls	r6, r2, #28
 8002b02:	4605      	mov	r5, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	d454      	bmi.n	8002bb2 <__sflush_r+0xba>
 8002b08:	684b      	ldr	r3, [r1, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	dc02      	bgt.n	8002b14 <__sflush_r+0x1c>
 8002b0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	dd48      	ble.n	8002ba6 <__sflush_r+0xae>
 8002b14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b16:	2e00      	cmp	r6, #0
 8002b18:	d045      	beq.n	8002ba6 <__sflush_r+0xae>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002b20:	682f      	ldr	r7, [r5, #0]
 8002b22:	6a21      	ldr	r1, [r4, #32]
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	d030      	beq.n	8002b8a <__sflush_r+0x92>
 8002b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	0759      	lsls	r1, r3, #29
 8002b2e:	d505      	bpl.n	8002b3c <__sflush_r+0x44>
 8002b30:	6863      	ldr	r3, [r4, #4]
 8002b32:	1ad2      	subs	r2, r2, r3
 8002b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b36:	b10b      	cbz	r3, 8002b3c <__sflush_r+0x44>
 8002b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b40:	6a21      	ldr	r1, [r4, #32]
 8002b42:	4628      	mov	r0, r5
 8002b44:	47b0      	blx	r6
 8002b46:	1c43      	adds	r3, r0, #1
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	d106      	bne.n	8002b5a <__sflush_r+0x62>
 8002b4c:	6829      	ldr	r1, [r5, #0]
 8002b4e:	291d      	cmp	r1, #29
 8002b50:	d82b      	bhi.n	8002baa <__sflush_r+0xb2>
 8002b52:	4a2a      	ldr	r2, [pc, #168]	@ (8002bfc <__sflush_r+0x104>)
 8002b54:	410a      	asrs	r2, r1
 8002b56:	07d6      	lsls	r6, r2, #31
 8002b58:	d427      	bmi.n	8002baa <__sflush_r+0xb2>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	6062      	str	r2, [r4, #4]
 8002b5e:	04d9      	lsls	r1, r3, #19
 8002b60:	6922      	ldr	r2, [r4, #16]
 8002b62:	6022      	str	r2, [r4, #0]
 8002b64:	d504      	bpl.n	8002b70 <__sflush_r+0x78>
 8002b66:	1c42      	adds	r2, r0, #1
 8002b68:	d101      	bne.n	8002b6e <__sflush_r+0x76>
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	b903      	cbnz	r3, 8002b70 <__sflush_r+0x78>
 8002b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b72:	602f      	str	r7, [r5, #0]
 8002b74:	b1b9      	cbz	r1, 8002ba6 <__sflush_r+0xae>
 8002b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	d002      	beq.n	8002b84 <__sflush_r+0x8c>
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f7ff fca0 	bl	80024c4 <_free_r>
 8002b84:	2300      	movs	r3, #0
 8002b86:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b88:	e00d      	b.n	8002ba6 <__sflush_r+0xae>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	47b0      	blx	r6
 8002b90:	4602      	mov	r2, r0
 8002b92:	1c50      	adds	r0, r2, #1
 8002b94:	d1c9      	bne.n	8002b2a <__sflush_r+0x32>
 8002b96:	682b      	ldr	r3, [r5, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0c6      	beq.n	8002b2a <__sflush_r+0x32>
 8002b9c:	2b1d      	cmp	r3, #29
 8002b9e:	d001      	beq.n	8002ba4 <__sflush_r+0xac>
 8002ba0:	2b16      	cmp	r3, #22
 8002ba2:	d11e      	bne.n	8002be2 <__sflush_r+0xea>
 8002ba4:	602f      	str	r7, [r5, #0]
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e022      	b.n	8002bf0 <__sflush_r+0xf8>
 8002baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	e01b      	b.n	8002bea <__sflush_r+0xf2>
 8002bb2:	690f      	ldr	r7, [r1, #16]
 8002bb4:	2f00      	cmp	r7, #0
 8002bb6:	d0f6      	beq.n	8002ba6 <__sflush_r+0xae>
 8002bb8:	0793      	lsls	r3, r2, #30
 8002bba:	680e      	ldr	r6, [r1, #0]
 8002bbc:	bf08      	it	eq
 8002bbe:	694b      	ldreq	r3, [r1, #20]
 8002bc0:	600f      	str	r7, [r1, #0]
 8002bc2:	bf18      	it	ne
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	eba6 0807 	sub.w	r8, r6, r7
 8002bca:	608b      	str	r3, [r1, #8]
 8002bcc:	f1b8 0f00 	cmp.w	r8, #0
 8002bd0:	dde9      	ble.n	8002ba6 <__sflush_r+0xae>
 8002bd2:	6a21      	ldr	r1, [r4, #32]
 8002bd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002bd6:	4643      	mov	r3, r8
 8002bd8:	463a      	mov	r2, r7
 8002bda:	4628      	mov	r0, r5
 8002bdc:	47b0      	blx	r6
 8002bde:	2800      	cmp	r0, #0
 8002be0:	dc08      	bgt.n	8002bf4 <__sflush_r+0xfc>
 8002be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bea:	81a3      	strh	r3, [r4, #12]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bf4:	4407      	add	r7, r0
 8002bf6:	eba8 0800 	sub.w	r8, r8, r0
 8002bfa:	e7e7      	b.n	8002bcc <__sflush_r+0xd4>
 8002bfc:	dfbffffe 	.word	0xdfbffffe

08002c00 <_fflush_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	690b      	ldr	r3, [r1, #16]
 8002c04:	4605      	mov	r5, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	b913      	cbnz	r3, 8002c10 <_fflush_r+0x10>
 8002c0a:	2500      	movs	r5, #0
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
 8002c10:	b118      	cbz	r0, 8002c1a <_fflush_r+0x1a>
 8002c12:	6a03      	ldr	r3, [r0, #32]
 8002c14:	b90b      	cbnz	r3, 8002c1a <_fflush_r+0x1a>
 8002c16:	f7ff fb3d 	bl	8002294 <__sinit>
 8002c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f3      	beq.n	8002c0a <_fflush_r+0xa>
 8002c22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c24:	07d0      	lsls	r0, r2, #31
 8002c26:	d404      	bmi.n	8002c32 <_fflush_r+0x32>
 8002c28:	0599      	lsls	r1, r3, #22
 8002c2a:	d402      	bmi.n	8002c32 <_fflush_r+0x32>
 8002c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c2e:	f7ff fc46 	bl	80024be <__retarget_lock_acquire_recursive>
 8002c32:	4628      	mov	r0, r5
 8002c34:	4621      	mov	r1, r4
 8002c36:	f7ff ff5f 	bl	8002af8 <__sflush_r>
 8002c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c3c:	07da      	lsls	r2, r3, #31
 8002c3e:	4605      	mov	r5, r0
 8002c40:	d4e4      	bmi.n	8002c0c <_fflush_r+0xc>
 8002c42:	89a3      	ldrh	r3, [r4, #12]
 8002c44:	059b      	lsls	r3, r3, #22
 8002c46:	d4e1      	bmi.n	8002c0c <_fflush_r+0xc>
 8002c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c4a:	f7ff fc39 	bl	80024c0 <__retarget_lock_release_recursive>
 8002c4e:	e7dd      	b.n	8002c0c <_fflush_r+0xc>

08002c50 <__swbuf_r>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	460e      	mov	r6, r1
 8002c54:	4614      	mov	r4, r2
 8002c56:	4605      	mov	r5, r0
 8002c58:	b118      	cbz	r0, 8002c62 <__swbuf_r+0x12>
 8002c5a:	6a03      	ldr	r3, [r0, #32]
 8002c5c:	b90b      	cbnz	r3, 8002c62 <__swbuf_r+0x12>
 8002c5e:	f7ff fb19 	bl	8002294 <__sinit>
 8002c62:	69a3      	ldr	r3, [r4, #24]
 8002c64:	60a3      	str	r3, [r4, #8]
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	071a      	lsls	r2, r3, #28
 8002c6a:	d501      	bpl.n	8002c70 <__swbuf_r+0x20>
 8002c6c:	6923      	ldr	r3, [r4, #16]
 8002c6e:	b943      	cbnz	r3, 8002c82 <__swbuf_r+0x32>
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f000 f82a 	bl	8002ccc <__swsetup_r>
 8002c78:	b118      	cbz	r0, 8002c82 <__swbuf_r+0x32>
 8002c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8002c7e:	4638      	mov	r0, r7
 8002c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	6922      	ldr	r2, [r4, #16]
 8002c86:	1a98      	subs	r0, r3, r2
 8002c88:	6963      	ldr	r3, [r4, #20]
 8002c8a:	b2f6      	uxtb	r6, r6
 8002c8c:	4283      	cmp	r3, r0
 8002c8e:	4637      	mov	r7, r6
 8002c90:	dc05      	bgt.n	8002c9e <__swbuf_r+0x4e>
 8002c92:	4621      	mov	r1, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	f7ff ffb3 	bl	8002c00 <_fflush_r>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d1ed      	bne.n	8002c7a <__swbuf_r+0x2a>
 8002c9e:	68a3      	ldr	r3, [r4, #8]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60a3      	str	r3, [r4, #8]
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	6022      	str	r2, [r4, #0]
 8002caa:	701e      	strb	r6, [r3, #0]
 8002cac:	6962      	ldr	r2, [r4, #20]
 8002cae:	1c43      	adds	r3, r0, #1
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d004      	beq.n	8002cbe <__swbuf_r+0x6e>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	07db      	lsls	r3, r3, #31
 8002cb8:	d5e1      	bpl.n	8002c7e <__swbuf_r+0x2e>
 8002cba:	2e0a      	cmp	r6, #10
 8002cbc:	d1df      	bne.n	8002c7e <__swbuf_r+0x2e>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f7ff ff9d 	bl	8002c00 <_fflush_r>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d0d9      	beq.n	8002c7e <__swbuf_r+0x2e>
 8002cca:	e7d6      	b.n	8002c7a <__swbuf_r+0x2a>

08002ccc <__swsetup_r>:
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <__swsetup_r+0xa8>)
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	b118      	cbz	r0, 8002ce0 <__swsetup_r+0x14>
 8002cd8:	6a03      	ldr	r3, [r0, #32]
 8002cda:	b90b      	cbnz	r3, 8002ce0 <__swsetup_r+0x14>
 8002cdc:	f7ff fada 	bl	8002294 <__sinit>
 8002ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce4:	0719      	lsls	r1, r3, #28
 8002ce6:	d422      	bmi.n	8002d2e <__swsetup_r+0x62>
 8002ce8:	06da      	lsls	r2, r3, #27
 8002cea:	d407      	bmi.n	8002cfc <__swsetup_r+0x30>
 8002cec:	2209      	movs	r2, #9
 8002cee:	602a      	str	r2, [r5, #0]
 8002cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cf4:	81a3      	strh	r3, [r4, #12]
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfa:	e033      	b.n	8002d64 <__swsetup_r+0x98>
 8002cfc:	0758      	lsls	r0, r3, #29
 8002cfe:	d512      	bpl.n	8002d26 <__swsetup_r+0x5a>
 8002d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d02:	b141      	cbz	r1, 8002d16 <__swsetup_r+0x4a>
 8002d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d08:	4299      	cmp	r1, r3
 8002d0a:	d002      	beq.n	8002d12 <__swsetup_r+0x46>
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f7ff fbd9 	bl	80024c4 <_free_r>
 8002d12:	2300      	movs	r3, #0
 8002d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d1c:	81a3      	strh	r3, [r4, #12]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6063      	str	r3, [r4, #4]
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	b94b      	cbnz	r3, 8002d46 <__swsetup_r+0x7a>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d3c:	d003      	beq.n	8002d46 <__swsetup_r+0x7a>
 8002d3e:	4621      	mov	r1, r4
 8002d40:	4628      	mov	r0, r5
 8002d42:	f000 f83f 	bl	8002dc4 <__smakebuf_r>
 8002d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d4a:	f013 0201 	ands.w	r2, r3, #1
 8002d4e:	d00a      	beq.n	8002d66 <__swsetup_r+0x9a>
 8002d50:	2200      	movs	r2, #0
 8002d52:	60a2      	str	r2, [r4, #8]
 8002d54:	6962      	ldr	r2, [r4, #20]
 8002d56:	4252      	negs	r2, r2
 8002d58:	61a2      	str	r2, [r4, #24]
 8002d5a:	6922      	ldr	r2, [r4, #16]
 8002d5c:	b942      	cbnz	r2, 8002d70 <__swsetup_r+0xa4>
 8002d5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002d62:	d1c5      	bne.n	8002cf0 <__swsetup_r+0x24>
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
 8002d66:	0799      	lsls	r1, r3, #30
 8002d68:	bf58      	it	pl
 8002d6a:	6962      	ldrpl	r2, [r4, #20]
 8002d6c:	60a2      	str	r2, [r4, #8]
 8002d6e:	e7f4      	b.n	8002d5a <__swsetup_r+0x8e>
 8002d70:	2000      	movs	r0, #0
 8002d72:	e7f7      	b.n	8002d64 <__swsetup_r+0x98>
 8002d74:	20000018 	.word	0x20000018

08002d78 <__swhatbuf_r>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d80:	2900      	cmp	r1, #0
 8002d82:	b096      	sub	sp, #88	@ 0x58
 8002d84:	4615      	mov	r5, r2
 8002d86:	461e      	mov	r6, r3
 8002d88:	da0d      	bge.n	8002da6 <__swhatbuf_r+0x2e>
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2340      	movne	r3, #64	@ 0x40
 8002d98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	6031      	str	r1, [r6, #0]
 8002da0:	602b      	str	r3, [r5, #0]
 8002da2:	b016      	add	sp, #88	@ 0x58
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	466a      	mov	r2, sp
 8002da8:	f000 f848 	bl	8002e3c <_fstat_r>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	dbec      	blt.n	8002d8a <__swhatbuf_r+0x12>
 8002db0:	9901      	ldr	r1, [sp, #4]
 8002db2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002db6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002dba:	4259      	negs	r1, r3
 8002dbc:	4159      	adcs	r1, r3
 8002dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc2:	e7eb      	b.n	8002d9c <__swhatbuf_r+0x24>

08002dc4 <__smakebuf_r>:
 8002dc4:	898b      	ldrh	r3, [r1, #12]
 8002dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dc8:	079d      	lsls	r5, r3, #30
 8002dca:	4606      	mov	r6, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	d507      	bpl.n	8002de0 <__smakebuf_r+0x1c>
 8002dd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	6123      	str	r3, [r4, #16]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	6163      	str	r3, [r4, #20]
 8002ddc:	b003      	add	sp, #12
 8002dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de0:	ab01      	add	r3, sp, #4
 8002de2:	466a      	mov	r2, sp
 8002de4:	f7ff ffc8 	bl	8002d78 <__swhatbuf_r>
 8002de8:	9f00      	ldr	r7, [sp, #0]
 8002dea:	4605      	mov	r5, r0
 8002dec:	4639      	mov	r1, r7
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7ff f938 	bl	8002064 <_malloc_r>
 8002df4:	b948      	cbnz	r0, 8002e0a <__smakebuf_r+0x46>
 8002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfa:	059a      	lsls	r2, r3, #22
 8002dfc:	d4ee      	bmi.n	8002ddc <__smakebuf_r+0x18>
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	e7e2      	b.n	8002dd0 <__smakebuf_r+0xc>
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	6020      	str	r0, [r4, #0]
 8002e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	9b01      	ldr	r3, [sp, #4]
 8002e16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e1a:	b15b      	cbz	r3, 8002e34 <__smakebuf_r+0x70>
 8002e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e20:	4630      	mov	r0, r6
 8002e22:	f000 f81d 	bl	8002e60 <_isatty_r>
 8002e26:	b128      	cbz	r0, 8002e34 <__smakebuf_r+0x70>
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	81a3      	strh	r3, [r4, #12]
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	431d      	orrs	r5, r3
 8002e38:	81a5      	strh	r5, [r4, #12]
 8002e3a:	e7cf      	b.n	8002ddc <__smakebuf_r+0x18>

08002e3c <_fstat_r>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4d07      	ldr	r5, [pc, #28]	@ (8002e5c <_fstat_r+0x20>)
 8002e40:	2300      	movs	r3, #0
 8002e42:	4604      	mov	r4, r0
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	602b      	str	r3, [r5, #0]
 8002e4a:	f000 f821 	bl	8002e90 <_fstat>
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d102      	bne.n	8002e58 <_fstat_r+0x1c>
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	b103      	cbz	r3, 8002e58 <_fstat_r+0x1c>
 8002e56:	6023      	str	r3, [r4, #0]
 8002e58:	bd38      	pop	{r3, r4, r5, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000021c 	.word	0x2000021c

08002e60 <_isatty_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4d06      	ldr	r5, [pc, #24]	@ (8002e7c <_isatty_r+0x1c>)
 8002e64:	2300      	movs	r3, #0
 8002e66:	4604      	mov	r4, r0
 8002e68:	4608      	mov	r0, r1
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	f000 f818 	bl	8002ea0 <_isatty>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d102      	bne.n	8002e7a <_isatty_r+0x1a>
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	b103      	cbz	r3, 8002e7a <_isatty_r+0x1a>
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	2000021c 	.word	0x2000021c

08002e80 <_close>:
 8002e80:	4b02      	ldr	r3, [pc, #8]	@ (8002e8c <_close+0xc>)
 8002e82:	2258      	movs	r2, #88	@ 0x58
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8a:	4770      	bx	lr
 8002e8c:	2000021c 	.word	0x2000021c

08002e90 <_fstat>:
 8002e90:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <_fstat+0xc>)
 8002e92:	2258      	movs	r2, #88	@ 0x58
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9a:	4770      	bx	lr
 8002e9c:	2000021c 	.word	0x2000021c

08002ea0 <_isatty>:
 8002ea0:	4b02      	ldr	r3, [pc, #8]	@ (8002eac <_isatty+0xc>)
 8002ea2:	2258      	movs	r2, #88	@ 0x58
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	2000021c 	.word	0x2000021c

08002eb0 <_lseek>:
 8002eb0:	4b02      	ldr	r3, [pc, #8]	@ (8002ebc <_lseek+0xc>)
 8002eb2:	2258      	movs	r2, #88	@ 0x58
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	4770      	bx	lr
 8002ebc:	2000021c 	.word	0x2000021c

08002ec0 <_read>:
 8002ec0:	4b02      	ldr	r3, [pc, #8]	@ (8002ecc <_read+0xc>)
 8002ec2:	2258      	movs	r2, #88	@ 0x58
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eca:	4770      	bx	lr
 8002ecc:	2000021c 	.word	0x2000021c

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
